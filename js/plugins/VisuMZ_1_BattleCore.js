//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.57;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.57] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x16d1ef=_0x3da9;(function(_0x2e8c5c,_0x15bbe2){const _0x41fcff=_0x3da9,_0x14a6ad=_0x2e8c5c();while(!![]){try{const _0x22ea0b=parseInt(_0x41fcff(0x817))/0x1+-parseInt(_0x41fcff(0x27d))/0x2+parseInt(_0x41fcff(0x785))/0x3*(-parseInt(_0x41fcff(0x8a7))/0x4)+-parseInt(_0x41fcff(0x984))/0x5+parseInt(_0x41fcff(0xa64))/0x6*(parseInt(_0x41fcff(0x62c))/0x7)+parseInt(_0x41fcff(0xa63))/0x8+parseInt(_0x41fcff(0x66e))/0x9;if(_0x22ea0b===_0x15bbe2)break;else _0x14a6ad['push'](_0x14a6ad['shift']());}catch(_0x1888cf){_0x14a6ad['push'](_0x14a6ad['shift']());}}}(_0x4b9d,0x4f986));function _0x4b9d(){const _0xada8c5=['_effectType','victory','_wtypeIDs','addDebuff','updateFlip','ihEJT','prototype','JyXsu','drawGauge','Scene_Battle_startActorCommandSelection','Opacity','guardSkillId','updateStyleOpacity','khcne','1502160rzZWuO','1026tulnuF','ShowPortraitsBorderStyle','autoMeleeSingleTargetActionSet','_createCursorArea','encounterList','\x20to\x20%1\x20midbattle.','Sprite_Actor_updateFrame','bzqCR','commandName','DistanceX','StepDistanceX','_motion','gOgaB','JAVYC','_effectDuration','POST-','_battler','isForOpponentBattleCore','ActSeq_Zoom_Reset','isTurnBased','addOptionsCommand','DigitGrouping','HelpAutoBattle','hMWxS','DamageType%1','actionBattleCoreJS','AttackAnimation','isBTB','drawTextTopAligned','canAttackBattleCore','ParseArmorNotetags','AttachStateOffsetX','isDying','VSlpb','setHelpWindow','drawItemStatusListStyle','applyForcedGameTroopSettingsBattleCore','onAngleEnd','Frame','ActSeq_Mechanics_FtbAction','setSTBExploited','canAttack','isShownOnBattlePortrait','setBattleCameraOffset','setSkill','forceSelect','addAttackCommand','YshVo','isDuringNonLoopingMotion','jumpBattler','BindCommonEventKeysForObj','addCustomCommands','battleSpriteSkew','_frame','BsSSf','Game_Action_executeDamage','isPTB','%1StartTurnJS','_commonEventIDs','partyCommandWindowRectDefaultStyle','waitForMovement','clearDamagePopup','CalcActionSpeedJS','unshift','updateOpacity','getItemDamageAmountLabelOriginal','makeActionOrders','BTestBypass','alive\x20battlers\x20not\x20target','ActionEndUpdate','charged','dimColor2','bMXxi','_targetGrowY','ActSeq_Movement_WaitForMovement','KMeZf','Scene_Options','vmzTI','playEnemyDamage','addChildToBack','updateShadowScale','open','TtSId','Style','makeActionList','aqqXT','BattleManager_inputtingAction','optDisplayTp','applyTargetFilters','isForAll','isFriendly','CmdIconFight','FnqZJ','hasSkill','createDamageContainer','isFightCommandEnabled','displayMiss','StatusWindowAttachmentBack','popupDamage','VOZjd','performActionEndMembers','getInputButtonString','startAction','MJoeJ','weaponImageId','rgoRC','isActionSelectionValid','nameY','svShadow','fontSize','Scale','lineRect','Scene_Battle_updateBattleProcess','atbInterrupt','skills','XPActorCommandLines','Game_BattlerBase_refresh','Intensity','ActionAnimation','friendsUnit','useDigitGrouping','command339','setBattlePortrait','addAutoBattleCommands','ActSeq_Movement_FaceDirection','StatusWindowAttachmentFrontOffsetY','ActSeq_Mechanics_BreakShieldChange','createCommandNameWindow','Exploiter','EfVQT','PopupShiftY','updateActors','gainHalfActionsPTB','_skewX','GSVNu','setBattleCameraPoint','_cancelButton','cancelActorInput','contents','Rate','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','match','callNextMethod','FocusX','abs','GgNjc','ActSeq_Weapon_NextActiveWeapon','_flipScaleX','Interrupt','addedBuffs','Scene_Battle_commandFight','WTdZV','AlphaFilter','AllowCollapse','sideview_ui','toUpperCase','updateCommandNameWindow','onBattleStart','battler','log','Sprite_Enemy_setHue','applyArmorModifiers','deadMembers','_logWindow','process_VisuMZ_BattleCore_Notetags','setupBattleback','createActorCommandWindowBattleCore','Immortal','AsTarget','BqIRM','PSmjb','isOptionsCommandAdded','createBattleFieldBattleCore','customDamageFormula','yrODJ','ActSeq_Camera_Clamp','Index','StartTurnWait','_battleField','setBattleZoom','CmdStyle','WaitForFloat','Window_BattleLog_popupDamage','wetKT','%1EndActionJS','CopyCombatLog','XGEAh','updateStateIconSprite','onSkewEnd','walk','hasBeenDefeatedBefore','vxAIm','ActSeq_DB_DragonbonesTimeScale','CriticalHitRate','boxWidth','CastAnimation','selectNextCommandTpb','clone','<CUSTOM\x20ACTION\x20SEQUENCE>','waitForNewLine','exSvr','CastPhysical','BOGze','lqTKr','constructor','upsRD','process_VisuMZ_BattleCore_DamageStyles','tCMSL','isOptionsCommandEnabled','MtENb','cUEIu','changeWeather','getLastPluginCommandInterpreter','createEmptyBitmap','selectNextActor','autoBattleWindowRect','Scene_Battle_itemWindowRect','bitmapWidth','ScaleY','_partyCommandWindow','command357','isStatusAffected','hasStaticSvBattler','_opacityDuration','Window_BattleLog_displayMiss','stepFlinch','drawItemStyleIconText','pOZKc','updateWaitMode','lKRqO','DistanceY','KGTsj','clearRect','battleDisplayText','finalizeScale','Window_BattleLog_performDamage','Turns','Game_Battler_onBattleStart','CriticalDmgRate','Game_BattlerBase_canGuard','KGAMK','maxCommands','windowAreaHeight','ActSeq_Mechanics_AddBuffDebuff','slices','Window_ActorCommand_initialize','rPVqe','updateAttachmentSprites','processActorCommandCancelTPB','ShowPortraits','ParseStateNotetags','regionId','pynDg','UzjlC','needsSelection','CmdTextAutoBattle','OnbQv','_commandNameWindow','isIncludedInEnemyWindow','_targets','Window_BattleLog_popBaseLine','MP_Flat','displayReflectionPlayBack','Enemy','itemWindowRect','skillTypes','isForRandom','MsHrM','HZpdv','Targets2','_baseY','HJiGA','bitmap','ActSeq_BattleLog_Clear','_hpGaugeSprite','PreDamageJS','_targetHomeY','_forcing','mgtUj','cancelButtonText','actorId','NextTurn','mkgeR','dizWS','CalcEscapeRaiseJS','forceWeaponAnimation','LwjaB','setupIconTextPopup','drawItemImagePortraitStyle','AGI','BattleManager_onEscapeSuccess','_tempEquipCheck','updateBattlebackBitmap','khhlu','NdLeb','attackStates','destroyDamageSprite','otasL','custom','gFFwj','isAnyoneSkewing','cFqvr','ljBgf','GKmLX','TextColor','nsFsF','Game_Map_battleback2Name','dcFrX','isOpponent','zXBTK','alive\x20enemies','isSideView','YgBnw','_lastRegenFrameCount','getAttackMotionSlot','showEnemyAttackAnimation','pbNfC','command301_PreBattleEvent','hide','_multipliers','#ffffff','updateBattleProcess','_drawTextBody','zubHz','motionType','some','performMiss','TMYrN','NYotN','ConvertCount','setHome','Scene_Battle_skillWindowRect','startAttackWeaponAnimation','setHelpWindowItem','RrTSa','XnjKc','AS\x20USER','getConfigValue','dead\x20opponents','XIyHx','PRE-','MotionFrameWait','basicGaugesY','isTriggered','playReflection','_waitMode','ActSeq_Mechanics_VariablePopup','setTroopPage','ActSeq_Mechanics_CustomDmgFormula','cOGke','muAgZ','tpbActorSwitchConditionsMet','XPSpriteYLocation','ActSeq_Impact_ShockwaveCenterTargets','aIMZJ','wait','ARRAYEVAL','NMvrt','CastCertain','wVGQS','createCancelButton','drawEnemyName','WaitForAngle','Scene_Battle_selectPreviousCommand','applySoftDamageCap','PostDamageJS','QzYWG','logWindowRect','clearBattleRefreshRequest','startTpbTurn','innerWidth','HitRate','ShowPopup','CalcEscapeRatioJS','removeAnimationFromContainer','damageOffsetX','DTB','_targetSkewX','alive\x20friends\x20not\x20user','StatusWindowSelectableBackHide','uzZoQ','clearBattlerMotionTrailData','mDOSl','juvkZ','Game_BattlerBase_isStateResist','pOoCs','Ylhcg','waitForOpacity','createDigits','_floatWholeDuration','ActSeq_Horror_GlitchCreate','expRate','WaitComplete','isSkillItemWindowsMiddle','FCboW','setBattleCameraTargets','onBattleEnd','isPreviousSceneBattleTransitionable','setBattleSkew','Formula','setWaitMode','canEscape','IArOf','_angleWholeDuration','sKFgS','gainHp','exit','Game_BattlerBase_addNewState','ActionSkillMsg1','battleAngle','Window_BattleLog_performCounter','setGuard','ActSeq_Projectile_Animation','processEscape','fillRect','ActSeq_Mechanics_RemoveState','ShowFacesListStyle','initMembers','VisuMZ_2_BattleSystemSTB','djKHV','startEnemySelection','ActSeq_Angle_Reset','isMagical','Sprite_Actor_createStateSprite','refreshMotion','_visualHpGauge_JustDied','wPonb','_distortionSprite','processBattleCoreJS','addCombatLogCommand','_createClientArea','TXbJu','isMeleeSingleTargetAction','cgyRq','ShowWeapon','validTargets','shadow','isStateResist','itemHit','ATTACK','processDefeat','displayEvasion','startJump','NewPopupBottom','blockWidth','Text','_actorWindow','JS\x20%1END\x20ACTION','Game_Action_clear','_lastAction','WaitCount2','_skewY','commandSymbol','ActSeq_Camera_WaitForCamera','KjPdI','_offsetY','_targetOpacity','allBattleMembers','isFTB','gainBravePoints','maxItems','updateHelp','FdBGL','TpGaugeOffsetY','applyResultSwitches','ActSeq_Mechanics_OnceParallel','addGuardCommand','updateTargetPosition','bEhom','_enemy','ResetOffset','gainTp','commandNameWindowCenter','JumpToLabel','smooth','anchor','enemyNames','isSideButtonLayout','drawSingleSkillCost','Scene_ItemBase_applyItem','top','isGuard','updateSkew','Width','setupCriticalEffect','anchorY','VisuMZ_3_BoostAction','mBjsZ','Sprite_Battler_damageOffsetY','filterArea','MaxLines','JS\x20%1START\x20BATTLE','addSingleSkillCommands','flashColor','ActSeq_Impact_ShockwavePoint','_borderPortraitSprite','prepareCustomActionSequence','FQuiJ','ActSeq_Mechanics_AtbGauge','addSingleSkillCommand','startMove','DUYKw','windowPadding','nextActiveWeaponSlot','canGuard','moveBattlerToPoint','MP_Rate','CmdIconEscape','Victory','helpWindowRect','Window_BattleLog_displayCurrentState','JS\x20%1REGENERATE','targetObjects','textWidth','sZkVv','TimeScale','addImmortal','show','lonij','start','_flashDuration','numTargets','createBattleUIOffsetX','PopupOffsetY','CkytL','yjpwQ','displayCounter','surprise','cWchP','Game_Map_battleback1Name','ActSeq_Movement_MoveToPoint','TYyYn','Radius','NameAlwaysHidden','isUndecided','drawTextEx','mainFontSize','popBaseLine','VisuMZ_3_ActSeqProjectiles','battlerShadowScaleX','_itemWindow','XsVGL','ANFEu','QhtYt','USmac','JAwUE','createAttachedSprites','sgUSF','_preemptive','setFullActionsPTB','angle','createStateIconSprite','VariableHeal','NameAlwaysSelectOnly','enemyId','_targetFloatHeight','_enemyID','canUse','ParseEnemyNotetags','ZsqHM','performEvasion','KXYmL','makeDamageValue','DisplayAction','ActSeq_Mechanics_AnalyzeWeakness','_jumpMaxHeight','toLowerCase','Buffs','_additionalSprites','ZQEno','_preBattleCommonEvent','_floatDuration','processVictory','AWktz','Game_Enemy_transform','updateShadowPosition','process_VisuMZ_BattleCore_jsFunctions','gEfPA','ActSeq_Zoom_Scale','_skewWholeDuration','WSCKE','drawItemBackground','Game_Battler_performEvasion','displayAction','gainStoredBoostPoints','waitForJump','PostDamageAsUserJS','sBSeY','critical','KcgCF','applyItem','alignBattleCoreDamageSprite','close','applyImmortal','createShadowSprite','version','_targetSkewY','isGrowing','spell','changePaintOpacity','ActSeq_Movement_WaitForSpin','PreApplyJS','showNormalAnimation','_actorSprites','ShowActorGauge','yMFSB','performCounter','DyQFR','battleOpacity','isAnyoneSpinning','_animationSprites','createHpGaugeSprite','partyCommandWindowRect','retreat','createInnerPortrait','isTpbMainPhase','waitForAnimation','isETB','PreDamageAsUserJS','NKYhT','setLastPluginCommandInterpreter','magicSkills','srbVt','ygJEC','Window_ItemList_maxCols','Game_Action_apply','Game_System_initialize','sleep','Window_BattleLog_performMagicEvasion','CommonEventID','DCnDE','_createDamageContainer','parent','onRegeneratePlayStateAnimation','Sprite_Animation_targetSpritePosition','_motionType','createDamageSprite','XKPJt','_jumpDuration','Strength','IsXzv','ActSeq_Horror_GlitchRemove','startBattle','shaIP','callUpdateHelp','Scene_Battle_onActorCancel','uGkZF','isTickBased','IconStypeNorm','TuGFC','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','Game_Battler_performActionStart','Window_BattleEnemy_show','DigitGroupingDamageSprites','weapons','ActSeq_BattleLog_AddText','linkSprite','Skills','IylYM','Direction','canUseItemCommand','JS\x20%1START\x20ACTION','PortraitScaleBorderStyle','MeleeDistance','SceneManager_push','fEBBZ','refreshDimmerBitmap','mnVGO','GesXh','description','EgYkg','JS\x20ESCAPE\x20SUCCESS','_appeared','Game_Action_applyGlobal','CriticalDuration','repeatTargets','DefaultSoftCap','StartTurnShow','process_VisuMZ_BattleCore_CommonEventKeys','pCOsT','performRecovery','gLISq','PZpYy','JS\x20%1START\x20TURN','_enemyId','States','Scene_Battle_update','moveBattlerDistance','VariableID','redraw','animationShouldMirror','TwNrP','TsKeV','FGzkt','BIUlc','_emptyBitmap','BattleLogRectJS','isSTB','Game_BattlerBase_canAttack','alive\x20actors','_motionSpeed','IwPuu','_angleEasing','KELxq','max','VawDY','AtcKO','ShowHide','fJsRS','CIELe','attackStatesRate','onFloatEnd','isEscapeCommandEnabled','drawItemImageListStyle','showPortraits','VisuMZ_2_BattleSystemATB','updateFloat','glitch','DUbZO','BattleManager_startAction','currentAction','performAction','550134PcTGpw','createJS','changeAtbChargeTime','ALL\x20SKILLS','_stateIconSprite','CheckMapBattleEventValid','battleback2Name','extraPositionY','chant','ActSeq_Movement_WaitForFloat','PreEndActionJS','BindCommonEventKeysForGroup','<CENTER>%1','Vxfgg','WaitForZoom','_floatEasing','expTotal','_enemyIDs','isFloating','addBattleCoreAutoBattleStartupCommand','isAnyoneJumping','CommandVisible','NLmkD','isSkewing','PostStartBattleJS','ActSeq_Set_TargetActionSet','wfzrR','BattleManager_onEncounter','isOTB','isBreakStunned','DlwsV','removeAnimation','setImmortal','active','hKCKU','startWeaponAnimation','changeTurnOrderByCTB','updatePosition','findTargetSprite','front\x20center','_methods','Lurjo','battleMembers','IvATx','attack','Wave','actorCommandEscape','_damagePopupArray','refreshBattlerMotions','CZMPd','useItem','skill','resetResultSwitches','Game_Battler_performMiss','moveToStartPositionBattleCore','ArPenFlat','SWyRE','updateEffectContainers','evade','parameters','IOgcs','kjZnu','ParseClassNotetags','Sprite_Enemy_updateStateSprite','gainMp','XUybi','canMove','TPB','_attackAnimationId','casting','loadBitmap','_baseTexture','Spmrp','qlXmu','call','ShowRemovedBuff','unchanged','_branch','_dragonbonesSpriteContainer','_updateCursorFilterArea','yWSWA','isAnimationShownOnBattlePortrait','makeTargetSelectionMoreVisible','SzUgy','maxBattleMembers','setAttack','SvMotionIdleSolo-%1-%2','EscapeFail','ActSeq_Mechanics_AddState','makeHpDamageText','gRURz','autoSelectLastSelected','makeData','PreEndTurnJS','BattleManager_updatePhase','_currentAngle','ActSeq_Skew_WaitForSkew','battleSpin','startDamagePopup','freezeFrame','setupChild','addItemCommand','alterActionCostPTB','ForceExploited','SkipPartyCmd','formula','isBattleMember','Sprite_Battler_setHome','_forcedBattleLayout','ActSeq_Horror_TVRemove','rMTLb','setHorrorEffectSettings','Sprite_Actor_moveToStartPosition','hitFlat','zAPrp','UCNLD','skillItemWindowRectBorderStyle','alterBreakShield','GJXjQ','registerDefeatedEnemy','_statusWindow','changeBattlerOpacity','isGuardWaiting','ActSeq_Element_ForceElements','weatherType','processAnimationRequests','sort','makeCommandList','isSpinning','Window_BattleLog_performCollapse','OffsetX','ActSeq_BattleLog_PushBaseLine','CriticalHitMultiplier','faceWidth','BattleManager_startBattle','cancelTargetSelectionVisibility','_growX','dead','xEnfe','ZQVHY','commandEscape','Height','_enemyNameContainer','Game_Interpreter_command301','DefaultDamageStyle','_damages','XnzTM','dDwLf','CommandAddOptions','BYpqK','EFFECT_COMMON_EVENT','isMoving','ParseSkillNotetags','_actor','COMBATLOG','ShowCounter','whGGy','OffsetAdjust','applyAngleChange','forceEscapeSprite','StatusWindowAttachmentBackOffsetX','split','parseForcedGameTroopSettingsBattleCore','RiNFA','ActSeq_Animation_ShowAnimation','HuLjn','qsKhs','textColor','maSJW','dfPAg','_surprise','KEVCa','_homeDuration','isChanting','dSPUm','Debuffs','unRuo','RhYxf','xYiQk','HEZDh','isItemCommandEnabled','JbVvG','save','ESCAPE','isFrameVisible','enemy','battleUIOffsetX','TXsEr','addChild','Game_Battler_clearMotion','DamageDisplay','_battleCoreAddedElements','Game_Action_setGuard','Sprite_Enemy_update','PrioritySortActors','aGaid','isAlive','WUFAb','onBattleStartOnceParallels','_targetHomeX','setActionState','LSHNr','font','FlinchDistanceX','Sprite_Enemy_createStateIconSprite','isNextScene','QzzTN','makeActions','RlDlv','switchToWeaponType','updateCustomActionSequence','Window_PartyCommand_initialize','MessageWait','GroupDigits','UAnAF','mainSprite','ActSeq_Mechanics_PtbFullHalfAction','ahNsI','displayItemMessage','startSkew','SkillItemBorderCols','XTnGz','isBattleCoreTargetScope','_battleCoreBattleResumeAfter','_forcedBattlers','createBorderStylePortraitSprite','ZYXFS','performJump','Scene_Options_maxCommands','animationNextDelay','isAppeared','Window_BattleLog_displayTpDamage','isEffecting','drawIcon','recoverAll','animation','Game_Actor_makeActionList','revertTpbCachedActor','TMzQZ','vNIlk','contentsOpacity','currentClass','performCastAnimation','onEscapeSuccess','cameraOffsetDuration','iconWidth','toUseBoostPoints','SmoothImage','Window_BattleLog_performAction','_homeEasing','swing','startFloat','OrwkM','_baseX','setVisibleUI','SvWeaponMass-%1-%2','isSceneBattle','hardDamageCap','currentSymbol','isAnyoneMoving','PostDamageAsTargetJS','isSkill','SGVNG','NEdIc','loop','addSkillCommands','JS\x20%1END\x20TURN','svAnchorX','tpbCommandFight','battleCamera','battleMove','getHardDamageCap','allowRandomSpeed','ActionSkillMsg2','setFrame','ASmVM','FlinchDuration','Sprite_Enemy_initVisibility','NTmju','Sprite_Enemy_setBattler','MAXMP','FlashDuration','AutoMeleeAoE','EscapeFailureJS','HelpEscape','Targets','Scene_Battle_onActorOk','DistanceAdjust','targetSpritePosition','EaXvV','iZUrB','createAttachmentSprites','TextAlign','onJumpEnd','HitFlat','_skillIDs','_cursorArea','_callSceneOptions','isBattleFlipped','resizeWindowXPStyle','Window_BattleStatus_drawItemImage','dMjuR','ndnEC','DECCQ','isAnyoneGrowing','getSkillIdWithName','CezVa','BQghP','targetDistortionSpritePosition','ActSeq_Element_AddElements','allowCollapse','FEiOD','_defeatedEnemies','getSkillTypes','clearOnceParallelInterpreters','updateSpin','VisuMZ_3_ActSeqCamera','refreshActorPortrait','destroy','isDTB','_jumpWholeDuration','windowskin','MpGaugeOffsetX','isCommonEventReserved','_growDuration','_actionInputIndex','CwYJO','waitForEffect','DEaPO','stop','EscapeSuccess','getAttackWeaponAnimationId','attackMotions','performAttackSlot','Enemy-%1-%2','SVYGV','JS\x20%1END\x20BATTLE','requestRefresh','ElementStatusCore','setCursorRect','PostApplyAsTargetJS','battleCoreTpbMainPhase','SwitchCritical','processPostBattleCommonEvents','TpbGaugeOffsetX','battleSkew','ShowSubstitute','rzZpD','Sprite_Battler_setBattler','stateMotionIndex','ZCXrY','isNonSubmenuCancel','drawBackgroundRect','ActSeq_Set_WholeActionSet','ParseActorNotetags','updateCancel','update','drawSkillCost','ActSeq_Set_FinishAction','_autoBattleWindow','AelqB','Game_BattlerBase_die','ActSeq_Mechanics_ArmorPenetration','isAttack','performDamage','Game_BattlerBase_initMembers','Scene_Battle_windowAreaHeight','Game_Battler_regenerateAll','Game_Action_isForOpponent','skillId','initVisibility','QoL','_currentActor','helpAreaBottom','ActSeq_ChangeAngle','StepDistanceY','ShowReflect','Shadow2','VisuMZ_2_BattleSystemPTB','rizLX','_padding','autoBattle','addText','setupMotionBlurImpactFilter','addBattleCoreAutoBattleStyleCommand','ajjAy','CCoOV','playOnceParallelTroopPage','setBattler','stepBack','isHidden','XIlEj','vyvPF','performAttack','die','alterType','NWsUn','Game_Battler_onTurnEnd','PrioritySortActive','ozLCl','battleProjectiles','removeBuffsAuto','BattleManager_processDefeat','HelpFight','BattleManager_endAction','statusText','ConfigManager_applyData','addedDebuffs','startHomeMove','WEAPON\x20SWAP','partyCommandWindowRectBorderStyle','_lastPluginCommandInterpreter','_windowLayer','Sprite_Actor_updateBitmap','USYvs','_skillWindow','getItemDamageAmountTextOriginal','_commonEventQueue','ActSeq_Movement_BattleStep','RRezo','CreateCommonEventKeys','drawLineText','bossCollapse','qCZSZ','preemptive','applyHardDamageCap','type','zoSKV','HKFnO','XSEPG','canInput','FlinchDistanceY','buJWi','pow','OSthg','createHelpWindow','attackAnimationIdSlot','random','ActSeq_Mechanics_BtbGain','checkAutoCustomActionSequenceNotetagEffect','isQueueOptionsMenu','isCustomBattleScope','getNextSubject','_scene','inputtingAction','IDhhL','MotionSpeed','EasingType','VariableDmg','_skewEasing','Sprite_StateIcon_updateFrame','KfcsN','_tpbState','_activeWeaponSlot','makeAutoBattleActions','shift','PostApplyJS','VisuMZ_4_BreakShields','KCffd','LastSelected','ICcYz','KpUTm','HP_Flat','ActSeq_Impact_ColorBreak','command3011','YYEYo','GCtDW','setText','tfImE','updateBattlebackBitmap1','setBattlerFacePoint','WaitForSpin','makeSpeed','AutoNotetag','min','dbrxb','WtypeId','setupActionSet','SFvDT','VisuMZ_3_ActSeqImpact','yxqkV','qqQGy','Reveal','addSkillTypeCommand','ActSeq_Animation_ActionAnimation','onEncounterBattleCore','BattleManager_cancelActorInput','rLRLm','ActSeq_Impact_ZoomBlurPoint','OqNec','ActSeq_Set_SetupAction','concat','updateBorderSprite','_shadowScaleX','IconStypeMagic','alterCost','isConfused','WaitCount','pQlSN','qFjGH','ARRAYSTR','Window_ActorCommand_setup','loadWindowskin','_shadowScaleY','Sprite_Damage_createChildSprite','_damageContainer','isAutoBattleCommandAdded','_waitCount','Game_Battler_clearDamagePopup','ActSeq_Camera_Reset','stateRate','onActorOk','svBattlerAnchorX','ActSeq_Movement_HomeMoveToPoint','diRjp','ActSeq_Mechanics_DamagePopup','floor','scope','AS\x20TARGET','missile','performReflection','QuHWm','Destination','CrpNp','canAddSkillCommand','vLgzE','ConfigManager_makeData','ActSeq_BattleLog_UI','_list','_animation','Game_Action_needsSelection','ForceDeath','performActionMotions','jWYjC','deathStateId','SQGVK','ARRAYSTRUCT','textAlign','isDeathStateAffected','TOJaj','gainCurrentActionsFTB','anchorX','Game_Map_setupBattleback','isRightInputMode','_forceAction','selectNextCommand','displayType','center','_armorPenetration','statusTextAutoBattleStyle','getStypeIdWithName','ActSeq_BattleLog_WaitForBattleLog','StatusWindowSkinFilename','placeStateIcon','makeActionListAutoAttack','addEscapeCommand','TBrEa','MRigD','xfVoI','VPtZR','checkTpbInputClose','PopupOffsetX','isDamagePopupRequested','WaitForCamera','_angleRevertOnFinish','physical','faceRect','RucHt','iconHeight','Elements','updateShadowBattleCore','onMoveEnd','Game_Battler_performDamage','fnordRemovedStates','isImmortal','forceAction','hPKYd','value','_deathStateApplied','STRUCT','Skill-%1-%2','compatibilityVisible','Game_Action_evalDamageFormula','SwitchMissEvade','ext','HUDRB','WpcEw','ActSeq_Movement_HomeMoveBy','isInputting','processRandomizedData','djkkO','FbDIg','WaitForNewLine','WaitForMovement','ActSeq_DB_DragonbonesMotionAni','pfUUx','updateShadow','MotionIdle','missed','removedStateObjects','undecided','process_VisuMZ_BattleCore_PluginParams','Scene_Battle_createCancelButton','_effectsContainer','isAnimationPlaying','RBUlU','subject','CmdTextAlign','MAXHP','PostApplyAsUserJS','yWhqj','ActSeq_Mechanics_WaitForEffect','HalfActions','itemEffectAddAttackState','clearFreezeMotion','CriticalHitFlat','Yihhq','NKFZN','Window_BattleLog_displayActionResults','qcYyN','createStateSprite','isBattlerFlipped','dying','xYefV','_helpWindow','sortEnemies','children','PopupShiftX','createTroopNote','ActionEffect','isSelected','skewBattler','clearActiveWeaponSlot','_weather','_item','includes','refreshCursor','WodRJ','canBattlerMove','njriL','checkShowHideSwitchNotetags','getEnemyIdWithName','alterPriority','performFlinch','WaitCount1','isPlaytest','xVcWM','makeDeepCopy','numRepeats','CsyWf','not\x20focus','updateMotionCount','actor','measureTextWidth','createBattleUIOffsetY','elrUS','Scene_Battle_start','OMdwL','KwYIL','_active','_text','addWeaponSwapCommand','KMxcO','ngaWg','_subject','bJpLL','LUK','VisuMZ_2_WeaponSwapSystem','UAeMb','CmdIconOptions','VisuMZ_2_HorrorEffects','Game_Interpreter_PluginCommand','BattleManager_checkBattleEnd','MotionAni','VVxbo','aOQfW','isVisualHpGaugeDisplayed','vYBQw','Gwzia','WaitForScale','_shadowSprite','map','createAutoBattleWindow','showHelpWindow','EeNLj','DJlfm','%1Apply%2JS','evalDamageFormula','Scene_Battle_logWindowRect','SkewY','nGbGh','Sprite_Actor_initMembers','ActSeq_Animation_WaitForAnimation','addActor','FjXlm','QFiXB','mmp','_enemySprites','isDebuffAffected','updateVisibility','bIotH','isAlwaysHidden','putActiveBattlerOnTop','delay','Armor-%1-%2','ActSeq_Horror_NoiseRemove','displayAffectedStatus','Spriteset_Battle_createLowerLayer','replace','ZRmmv','ShowCosts','statusWindowRectXPStyle','onActorCancel','NvRye','SkillItemMiddleLayout','getBattlePortraitFilename','actionSplicePoint','createMainSprite','ShowCurrentState','stypeId','performSubstitute','aRImO','JpjwI','PHOgv','repositionCancelButtonBorderStyle','endAction','pVYiW','iconText','Game_Interpreter_updateWaitMode','createUIContainer','AHULL','gSHcv','RevertAngle','HomePosJS','loadSvActor','FcKLE','resize','SkillItemStandardCols','isPreviousScene','PreApplyAsUserJS','YmhFy','skillWindowRect','setupRgbSplitImpactFilter','ActSeq_Element_NullElements','resizeWindowBorderStyle','FollowTurn','battleCommandName','CommandAddAutoBattle','Sprite_Enemy_updateCollapse','mJdgi','PreDamageAsTargetJS','Linear','lukEffectRate','growBattler','QnxHN','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','createActionSequenceProjectile','clearHorrorEffects','updateBattlerContainer','SceneManager_isSceneChanging','displayMpDamage','setMoveEasingType','attackSkillId','OSZex','updateUiContainerPosition','jump','ShjPA','executeDamage','Spriteset_Battle_update','updateFrame','worldTransform','Variable','BattleManager_startTurn','nLSud','startInput','mainSpriteHeight','actorCommandSingleSkill','clearForcedGameTroopSettingsBattleCore','battleCorePreBattleCommonEvent','%1EndTurnJS','XNPaj','autoMeleeMultiTargetActionSet','setupHpGaugeSprite','Scene_Map_initialize','Settings','_forcedHomeY','clearBattleCoreData','actor%1-portrait','BattleLog','applyEasing','BCEVz','startOpacity','attackAnimationId1','MANUAL','setupBattleCore','performActionEnd','setActiveWeaponSlot','JuKZc','ActSeq_BattleLog_DisplayAction','rEFqm','fittingHeight','csEJC','moveToStartPosition','turn','onGrowEnd','dimColor1','HCIit','hpDamage','_stypeIDs','user','SmpkW','gGzUS','Game_Actor_equips','ForceRandom','reserveCommonEvent','_isBattlerFlipped','VisuMZ_2_BattleSystemFTB','requestMotionRefresh','Parse_Notetags_Targets','getMenuImage','Scene_Battle_createHelpWindow','JS\x20BATTLE\x20VICTORY','RUnIC','oUOln','code','bgType','getChildIndex','knIPt','DcDPr','isOkEnabled','Game_Party_addActor','gainCurrentActionsETB','sIRis','soDrO','addDamageSprite','JSON','animationWait','jlcdA','VisuMZ_3_WeaknessDisplay','tgwbw','removeDamageSprite','WaitForSkew','MvNBn','prev\x20target','QCFOD','pattern','Scene_Map_launchBattle','GRsgx','DamageRate','UnvCm','iUygk','displayActionResults','ApplyImmortal','WeaponTypeID','parse','updateStateSprite','gqeNJ','origin','VisuMZ_1_MainMenuCore','moveBattlerHomeDistance','round','_frontAttachmentSprite','bdZka','ActSeq_Target_NextTarget','Game_Action_makeTargets','updateCollapse','HpGaugeOffsetY','njiBq','Sprite_Weapon_loadBitmap','ScaleDown','SKILLS','isPhysical','Sprite_Actor_setActorHome','changeCtbCastTime','ZdYyI','helpAreaHeight','splice','ConvertParams','zaNIw','addNewState','kJwdf','updatePositionBattleCore','CriticalHitRateJS','AutoBattleRect','+%1\x20MP','Sprite_SvEnemy','VisuMZ_2_DragonbonesUnion','createBattleField','ActSeq_Skew_Reset','isAutoBattle','bxEbc','isBattlerGrounded','JEiAW','BattleStartEvent','isCTB','battleZoom','applyDamageCaps','CheckSkillCommandShowSwitches','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','applyBattleCoreJS','svBattlerData','applyGuard','changeAtbCastTime','clearResult','egkQy','ActSeq_Mechanics_RemoveBuffDebuff','_angleDuration','AnchorX','YOFxN','_borderPortraitDuration','buffAdd','onEscapeFailure','_battlerHue','fmNkS','GUARD','tQunU','aQxyH','command236','clearMotion','nsjaJ','message1','aICqq','FrontViewSelect','akxYI','targetActionSet','commandNameWindowDrawText','autoSelectPriority','Window_BattleStatus_initialize','clearActiveWeaponSet','lineHeight','Window_BattleLog_clear','updateStateSpriteBattleCore','GuardFormulaJS','okButtonText','BackColor','wBteR','xgweq','_totalValue','fnordAddedStates','MDF','collapse','adjustPosition_ScaleDown','Window_BattleLog_displayFailure','5908pxhscO','WfMsH','evaded','createEnemies','AutoBattleBgType','iterateBattler','isMagicSkill','QObNK','sHjsf','_baseLineStack','maxCols','DamageStyleList','Window_Options_statusText','zKbtn','XXxom','jdzqS','Game_Map_encounterList','commandOptions','applyGlobal','Window_BattleLog_pushBaseLine','Window_Options_addGeneralOptions','FKdQY','loadSystem','_eventId','updateStatusWindowPosition','regenerateAll','createSeparateDamagePopups','battleCommands','XroOB','hasSvBattler','RvBky','Targets1','KlgFt','startGrow','_updateCursorArea','updateForceAction','createEnemyNameContainer','PostDamage%1JS','DmUQj','isItem','Spriteset_Battle_updateActors','textSizeEx','removeChild','getDamageStyle','noise','WaitForAnimation','_tempActor','axgop','move','displayReflection','_regionBattleback2','Actor','sqxoT','performSTBExploiter','resetFontSettings','Window_SkillList_maxCols','onDisabledPartyCommandSelection','gaugeX','getItemDamageAmountTextBattleCore','NameAttachStateIcon','WsfTv','qANcY','Window_BattleEnemy_initialize','ACSsV','checkCacheKey','BattleLayout','5973210JjoJpR','SkillsStatesCore','DfDaJ','isAnyoneFloating','displayChangedBuffs','BattleManager_startInput','UVVcS','StateIconOffsetX','_opacityEasing','randomInt','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','checkBattleEnd','ActSeq_Mechanics_StbExploit','_offsetX','_targetAngle','SlotID','qitFc','arRedRate','adjustPosition','BWsJc','launchBattle','join','RGBZS','getBattlePortrait','NameOffsetX','processForcedAction','createChildSprite','IeSGY','AntiTintUiElements','makeEscapeRatio','Sprite_Battleback_adjustPosition','ShowMpDmg','VlQFd','alive\x20opponents','ActSeq_Mechanics_SwapWeapon','criticalDmgRate','FUZfE','_duration','VisuMZ_1_ElementStatusCore','ActSeq_Mechanics_ActionEffect','NameLegacy','TWEVB','foHZT','trim','COMBAT\x20LOG','ParseWeaponNotetags','createHelpWindowBattleCore','ANTI_TINT_UI','Sprite_Battler_isMoving','createBattleFieldContainer','border','Mute','Window_BattleLog_performActionStart','ActSeq_Mechanics_Multipliers','Amp','ActionEnd','Battleback','playCancel','prepareBorderActor','getWtypeIdWithName','actorCommandCancelTPB','DnglI','Game_Interpreter_terminate','okTargetSelectionVisibility','BRAer','callOptions','Neszc','PortraitScale','emerge','CmdIconItem','innerHeight','performMagicEvasion','clamp','%1Event','kdDtY','updateBattlebackBitmap2','setBattleAngle','PreStartBattleJS','EnableDamageCap','isForOpponent','boxHeight','addLoadListener','AdjustRect','ActorCmd','updateBorderStyle','alive\x20battlers\x20not\x20user','Damage','LCbQD','WemqR','updateStaticSvBattlerFrames','repositionEnemiesByResolution','changeCtbChargeTime','gFKYX','JS\x20%1DAMAGE\x20%2','yPKzx','createPartyCommandWindowBattleCore','VisuMZ_0_CoreEngine','magicReflection','_jumpHeight','VKNPN','Scene_Battle_initialize','Sprite_Battler_damageOffsetX','evalDamageFormulaBattleCore','WDBYD','setValue','Spriteset_Battle_createBattleField','_pattern','createKeyJS','commandNameWindowDrawBackground','actionEffect','zhzvq','softDamageCapRate','message2','VisuMZ_2_BattleSystemBTB','gPDxr','counterAttack','bODzg','Scene_Battle_updateStatusWindowPosition','ShowMissEvasion','fcrUo','performWeaponAnimation','_borderPortraitTargetX','performCollapse','uiInputPosition','kVVeL','_phase','itemEffectAddNormalState','damageRate','TP_Rate','battleGrow','_inputting','HP_Rate','Sprite_Actor_setBattler','indexOf','_ptbActionCost','duration','_requestRefresh','KfEIp','canAlterActionCostPTB','effect','_updateClientArea','singleSkill','AnimationID','displayBuffs','PreRegenerateJS','ActSeq_Target_CurrentIndex','LXuXZ','startActorSelection','zrtYo','removeStatesAuto','JFudE','TpbActiveChangeEnabled','setup','itemCri','requestFauxAnimation','initElementStatusCore','gaugeLineHeight','updatePhase','command119','_homeWholeDuration','updateBitmap','getColor','process_VisuMZ_BattleCore_PreBattleCommonEvent','uqzmr','apply','snapForBackground','ActSeq_Motion_PerformAction','regenerateAllBattleCore','setBattlerFlip','HRALJ','kKluI','PflyP','_spriteset','caPkY','AutoMeleeSolo','isActor','displayTpDamage','ActSeq_Mechanics_BoostPointsStoreData','isSkipPartyCommandWindow','clear','MOTIONS','_targetIndex','ActSeq_Mechanics_Collapse','PreApply%1JS','setActiveWeaponSet','shouldPopupDamage','VarianceFormulaJS','FzGMT','Game_Action_setAttack','bottom','BattleDefeatJS','UdUxE','MBjtb','Mirror','battlerName','kruni','damageFlat','SkewX','actorCommandWindowRect','checkShowHideSkillNotetags','TargetLocation','ActSeq_Impact_ZoomBlurTargetCenter','lYNsS','FHJLF','Scene_Battle_startEnemySelection','Game_Action_isForRandom','damageContainer','_backAttachmentSprite','animationBaseDelay','message4','Actions','statusWindowRect','isCharging','isAutoBattleCommandEnabled','Sprite_Enemy_updateBossCollapse','onDatabaseLoaded','backColor','JS\x20%1APPLY\x20%2','ActSeq_Movement_WaitForSkew','waitCount','item','onEncounter','ActSeq_Camera_FocusTarget','spinBattler','processRefresh','addGeneralOptions','VisuMZ_3_SideviewBattleUI','aRgOq','Jjsrl','mainSpriteWidth','mpDamage','_opacityWholeDuration','currentExt','invokeAction','Item-%1-%2','Game_Action_itemHit','performActionStart','HAXnx','svBattlerAnchorY','_updateFilterArea','ActSeq_Projectile_Icon','setupShockwaveImpactFilter','CurrentTurn','PostApply%1JS','finishActionSet','abnormal','Scene_Battle_createAllWindows','itemRect','right','FhypZ','dead\x20friends','performMoveToPoint','wtypeId','Scene_Battle_startActorSelection','updateShadowVisibility','_tempBattler','addChildAt','isJumping','mhp','Scene_Battle_partyCommandWindowRect','_battlerName','calcWindowHeight','setBackgroundType','usePremadeActionSequence','isForOne','slice','Game_Action_itemEffectAddAttackState','createEffectActionSet','escape','FkqZk','EnableSoftCap','SvBattlerSolo-%1-%2','_tpbNeedsPartyCommand','extraPositionScaledY','ActSeq_Movement_HomeReset','UNTITLED','hsXla','inHomePosition','_endBattle','1778190bnfUlf','addFightCommand','filter','Scene_Battle_helpWindowRect','StateIconOffsetY','hVJFG','qLhsc','placeActorName','pNAOd','extraHeight','fOuJC','Override','qLCRi','commandFight','loadEnemy','vSMEN','forceMotion','startSpin','ActSeq_Animation_AttackAnimation','displayHpDamage','updatePadding','Game_Troop_setup','drawItemStatus','updateMain','ClearBattleLog','ActSeq_BattleLog_Refresh','battlerShadowScaleY','StyleON','battlerSmoothImage','adjustPosition_ScaleToFit','ANDsl','Class-%1-%2','ActSeq_Mechanics_EnemyEscape','_immortal','needsSelectionBattleCore','damage','helpWindowRectBorderStyle','priority','_reflectionTarget','_createCursorSprite','pJmqH','_iconIndex','command301','Sprite_AnimationMV_updatePosition','onBattleStartBattleCore','WaitForProjectile','adjustPosition_ScaleUp','pages','YtbIe','TadsS','isLearnedSkill','SvBattlerMass-%1-%2','TpbGaugeOffsetY','StatusWindowAttachmentFrontOffsetX','_back2Sprite','Parse_Notetags_TraitObjects','ActSeq_Motion_WaitMotionFrame','missle','battleEffect','_flinched','BattleManager_selectNextCommand','ojMri','DamageStyles','updateHpGaugePosition','_action','displayCritical','addCommand','ShuffleArray','_growWholeDuration','NameFontSize','isSpriteVisible','FlashColor','setupBattlebackBattleCore','KSJrQ','LWgOW','skew','setupDamagePopup','addAnimationSpriteToContainer','NADvw','battleEnd','width','weaponTypes','autoBattleStart','setActorHome','Game_Party_removeActor','JS\x20BATTLE\x20DEFEAT','autoBattleAtStart','pop','flashDuration','AddOption','sGnYQ','_indent','_shake','_battlerContainer','angleDuration','fgQPb','changeBattlebacks','PPika','PopupPosition','StyleName','updateAttachedSprites','HHdwy','isClicked','ActionSequence','WaitForJump','portrait','StyleOFF','gITRu','AutoBattleMsg','removeBuff','ActionItemMsg','HKQwD','uiMenuStyle','_lineHeight','\x5cI[%1]%2','getNextDamagePopup','visible','ILSEX','drawText','TdvCw','isForFriendBattleCore','setupMotion','addedStateObjects','_actions','XqjqY','commandStyle','skillItemWindowRectMiddle','Parse_Notetags_Action','Game_Action_numRepeats','WvlVD','battleAnimation','SideviewSelect','ScaleUp','debuffAdd','iconIndex','etkOB','Window_BattleLog_update','BGPrf','requestMotion','PartyCmd','removeState','AnchorY','Scene_Battle_startPartyCommandSelection','PostRegenerateJS','_growY','1:1','414460ePoLHv','spriteId','rhqlI','process_VisuMZ_BattleCore_Action_Notetags','_skewDuration','PerformAction','Window_BattleLog_performMiss','appPf','_battleCoreBattleStartEvent','commandStyleCheck','_flashColor','svAnchorY','GYKCB','ShowCritical','canGuardBattleCore','createAnimationContainer','hpAffected','reduce','hitRate','XPActorDefaultHeight','ActSeq_Mechanics_EtbAction','fxfCB','_index','ActSeq_Impact_MotionBlurTarget','lnorr','index','ActSeq_Mechanics_CtbSpeed','loadPicture','yrtCN','_canLose','head','FaceAway','createContents','softDamageCap','initialize','_forcedHomeX','battleCameraData','occasion','action','setBattlerBattleCore','isAffectedByBreakShield','displayCurrentState','onOpacityEnd','height','gmwpl','MawTL','processBorderActor','_commonEventKey','PostStartActionJS','BattleManager_endBattle','AutoBattle','qHhlT','BOpsp','createAllWindows','Game_Battler_startTpbTurn','updateAngleCalculations','traitObjects','_animationCount','addBuff','base','ActSeq_Movement_Spin','VisuMZ_2_PartySystem','OIGjn','turnOrderChangeOTB','getFullActionsPTB','MmDSi','isTpbCharged','list','randomTargets','hpDamageFmt','isTeamBased','getAttackMotion','displayBattleCoreTransitionErrorMsg','alterChange','isAlwaysVisible','startMotion','hGclq','sliceMax','CreateActionSequenceTargets','_weaponSprite','uPixb','getDefeatedEnemies','EdyKz','format','scDEj','isTpb','XWyrp','isAnyoneChangingOpacity','VisuMZ_2_BattleSystemOTB','updateBossCollapse','RZZxL','initMembersBattleCore','XJUMa','createMiss','Filename','isChangingOpacity','logActionList','MpGaugeOffsetY','frameCount','Window_BattleLog_performRecovery','needsActorInputCancel','getBattlePortraitOffsetY','drawItemStatusXPStyle','createTargetsJS','AddHpGaugeOption','isBattleTest','_tpbSceneChangeCacheActor','inBattle','VpbzE','battleFloat','EscapeSuccessJS','YRXcB','removeActor','aliveMembers','Actor-%1-%2','battleLayoutStyle','setHandler','wholeActionSet','_displayBattleCoreTransitionErrorMsg','isCertainHit','applyCritical','rowSpacing','pushBaseLine','_colorType','autoBattleUseSkills','criticalHitRate','motionIdle','finishActorInput','_allTargets','frameVisible','cIFwV','isBattleSys','StatusWindowAttachmentFront','ARRAYFUNC','isSceneChanging','performTpbActiveCheckSwitch','ForceExploiter','applyFreezeMotionFrames','setCommonEvent','VTHoY','isMeleeMultiTargetAction','adjustPosition_1for1','inputting','removedBuffs','4ZWPEfB','zDZWX','makeTargetsBattleCore','loUrP','CmdIconAutoBattle','initBattlePortrait','push','isDead','MAT','performMoveToTargets','_weaponImageId','#%1','kzfUi','pointY','_customDamageFormula','initBattleCore','param','Scene_Battle_createActorCommandWindow','ShowAddedDebuff','refreshStatusWindow','CounterPlayback','Weapon-%1-%2','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','pslIn','alive\x20enemies\x20not\x20target','updateLink','isOpen','LECKu','BattleCore','name','VisuMZ_4_CombatLog','clearElementChanges','effects','updateGrow','Name','_actorCommandWindow','fRzPP','padding','result','isMVAnimation','showAnimation','ZsEeR','NUM','alphabetic','CriticalDmgFlat','Sprite_Battler_initMembers','equips','Post','selectPreviousCommand','ActionCount','PostStartTurnJS','DefeatEvent','Pre','Scene_Boot_onDatabaseLoaded','endAnimation','jkMkP','battleCommandIcon','gbrmY','NameOffsetY','isBypassDamageCap','_targetGrowX','drawItem','isCancelled','ZGDjQ','getHalfActionsPTB','updateEffectsContainer','_uiContainer','freezeMotion','value1','_animationContainer','ActSeq_Motion_ClearFreezeFrame','displayFailure','checkShowHideBattleNotetags','addOnceParallelInterpreter','mEXRJ','ActSeq_BattleLog_PopBaseLine','onSelectAction','opponentsUnit','movement','createEnemyNames','ActSeq_Movement_Opacity','VGrhi','ActSeq_Animation_AttackAnimation2','_battleCoreNoElement','_lines','isEnemy','removeHorrorEffect','_lastEnemy','_enemyWindow','RegExp','battleJump','isNextSceneBattleTransitionable','updateJump','globalAlpha','statusWindowRectBorderStyle','_dimmerSprite','Window_BattleLog_performEvasion','attachSpritesToDistortionSprite','adjustFlippedBattlefield','Window_BattleLog_displayCritical','MotionType','drawItemStyleIcon','dryWy','status','jxIZF','ActSeq_Weapon_SetActiveWeapon','itemLineRect','_createEffectsContainer','_cacheTextWidth','Scene_Map_updateCallMenu','Sprite_Actor_update','registerCommand','_stateSprite','FzJNR','getNextSubjectFromPool','FaceDirection','frontviewSpriteY','ActSeq_Movement_Float','dawng','PostEndTurnJS','OffsetY','refreshRequest','removeImmortal','UYvNL','becomeSTBExploited','displaySubstitute','createWeather','statusWindowRectDefaultStyle','placeTimeGauge','refresh','command283','addChildToUiContainer','svBattlerName','JSIru','BattleManager_processVictory','isActing','floatBattler','wYcEc','jMSEz','ActSeq_Movement_Skew','clearFreezeMotionForWeapons','_actionBattlers','process_VisuMZ_BattleCore_BaseTroops','_freezeMotionData','stepForward','requestPointAnimation','ActSeq_Movement_HomeMoveToTarget','_target','Mechanics','isFlipped','DualWield','ShowAddedBuff','Game_Action_isForFriend','Scene_Map_initializeAfter','trrAW','NDKLu','cameraDuration','Window_BattleLog_performReflection','BattleManager_initMembers','DefaultSoftScaler','cancel','left','DefaultHardCap','isActiveTpb','isCommandEnabled','%1StartActionJS','Window_BattleLog_performSubstitute','create','mpHealingFmt','_battleLayoutStyle','uMsrf','partyCommandWindowRectXPStyle','_homeX','note','_svBattlerSprite','Game_Battler_onBattleEnd','PostEndBattleJS','iOolM','_mainSprite','CoreEngine','Game_Action_itemEffectAddNormalState','icon','ZAfvC','requestAnimation','TCWmG','onEnemyOk','Game_Interpreter_command283','onTurnEnd','position','isDisplayEmergedEnemies','_cache','drawItemImage','addState','reverse','UoOAa','GVPhv','ConvertActionSequenceTarget','ActSeq_Horror_TVCreate','adjustWeaponSpriteOffset','BattleEndEvent','placeGauge','createDistortionSprite','repeats','battleback1Name','process_VisuMZ_BattleCore_CreateRegExp','eiHnR','zbDBU','alive\x20opponents\x20not\x20target','ShowEnemyGauge','createActorCommandWindow','addAutoBattleCommand','_handlers','damageOffsetY','terminate','NGffs','currentValue','QXAjP','text','opacity','trueRandomTarget','TAvPk','1082125TryLMK','DamageFlat','KfCDf','preparePartyRefresh','transform','_linkedSprite','ParseItemNotetags','Defeat','setSvBattlerSprite','centerFrontViewSprite','extraPositionX','isWaiting','CombatLogIcon','swapEnemyIDs','ActSeq_Mechanics_DeathBreak','updateCallMenu','_onceParallelInterpreters','animationId','BoostPoints','hyfRg','STYPES','VTIPq','Scene_Battle_terminate','onHomeMoveEnd','_floatHeight','_regionBattleback1','alive\x20friends\x20not\x20target','ActSeq_Impact_ShockwaveEachTargets','setupZoomBlurImpactFilter','getDualWieldTimes','_motionCount','actions','hqrCn','mainSpriteScaleY','BattleManager_isTpbMainPhase','wUbHe','toString','GDokS','battlerSprites','ShowHpDmg','mainSpriteScaleX','isAnyProjectilePresent','isForRandomBattleCore','ActSeq_Mechanics_CtbOrder','AsUser','substitute','checkSceneBattleTransitionable','Window_BattleLog_refresh','kMbnH','BattleVictoryJS','activate','displayStartMessages','eraseState','makeBattleCommand','remove','createString','autoSelect','addShowHpGaugeCommand','JS\x20ESCAPE\x20FAILURE','rbDBk','setupWeaponAnimation','timeScale','turnCount','visibilityState','gainFullActionsPTB','bitmapHeight','NpdxZ','makeSuccess','equipSlots','text\x20target','PreStartActionJS','FIvyg','criticalDmgFlat','_svBattlerData','ActSeq_Target_RandTarget','noSimilarSTypes','speed','Duration','hwKui','uwPle','SvMotionIdleMass-%1-%2','Scene_Battle_selectNextCommand','AdczF','visualHpGauge','_battleCoreForcedElements','updateHomeMove','isForFriend','isBattleRefreshRequested','lqklY','isFastForward','_interpreter','battleCoreResumeLaunchBattle','OverallFormulaJS','collapseType','ShowRemovedState','chantStyle','buffRemove','Game_Enemy_setup','SvWeaponSolo-%1-%2','fwAlH','setupTextPopup','setupBattleCoreData','_homeY','BravePoints','process_VisuMZ_BattleCore_TraitObject_Notetags','fight','ChargeRate','Game_Battler_forceAction','ZtXtY','pweRb','HpGaugeOffsetX','Scene_Battle_stop','PvTjI','thrust','ActSeq_Movement_MoveToTarget','bind','tPDkP','PostEndActionJS','scale','changeInputWindow','Angle','isAtbCastingState','members','isPartyTpbInputtable','Window_BattleLog_performActionEnd','yjCkd','updateOnceParallelInterpreters','power','_growEasing','tUody','createActors','options','createCommandVisibleJS','FullActions','BreakShields','PnRkm','itemTextAlign','zKHZf','alive\x20friends','arRedFlat','WWkQT','BattleManager_checkSubstitute','battleStatusWindowAnimationContainer','BattleManager_onEscapeFailure','_escapeRatio','TpGaugeOffsetX','_autoBattle','BattleManager_makeActionOrders','_enemies','startTurn','Game_Battler_makeSpeed','ceil','isBuffAffected','NameAlwaysVisible','Shadow','Game_BattlerBase_eraseState','callOkHandler','isBorderStylePortraitShown','ActSeq_Animation_PlayAtCoordinate','ShowTpDmg','ofSmd','notFocusValid','ScaleToFit','HpGauge','battleUIOffsetY','PopupDuration','wvbvA','sortDamageSprites','setupFont','pgUDc','mCxhe','cHCzB','lUZzm','guard','BatcQ','setHue','svBattlerShadowVisible','default','getBattlePortraitOffsetX','clearWeaponAnimation','dataId','Nnvtu','isCustomActionSequence','battlelog','kAfnw','VisuMZ_1_SkillsStatesCore','_battlePortrait','updateWeather','length','ARRAYNUM','setCustomDamageFormula','AllowRandomSpeed','cameraClamp','addPartyCommand','zOTWR','startActorCommandSelection','VisuMZ_2_BattleSystemCTB','isBusy','_cursorSprite','setHalfActionsPTB','LXCJf','FJdKE','BaseTroopIDs','applyGlobalCommonEventNotetags','PreStartTurnJS','moveBattlerHomeToPoint','DEF','coreEngineRepositionEnemies','ArRedRate'];_0x4b9d=function(){return _0xada8c5;};return _0x4b9d();}var label=_0x16d1ef(0x8c3),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x16d1ef(0x787)](function(_0x1b70dc){const _0x308fd4=_0x16d1ef;return _0x1b70dc[_0x308fd4(0x90e)]&&_0x1b70dc[_0x308fd4(0x248)]['includes']('['+label+']');})[0x0];VisuMZ[label][_0x16d1ef(0x58d)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x16d1ef(0x5ea)]=function(_0x530373,_0x19ce08){const _0x5e34b5=_0x16d1ef;for(const _0x2362a6 in _0x19ce08){if(_0x2362a6[_0x5e34b5(0xaf1)](/(.*):(.*)/i)){if(_0x5e34b5(0x951)!=='WkHzO'){const _0x2b2388=String(RegExp['$1']),_0x3d4db=String(RegExp['$2'])[_0x5e34b5(0xaff)]()['trim']();let _0x169982,_0x47cfbb,_0x569f10;switch(_0x3d4db){case _0x5e34b5(0x8d1):_0x169982=_0x19ce08[_0x2362a6]!==''?Number(_0x19ce08[_0x2362a6]):0x0;break;case _0x5e34b5(0xa41):_0x47cfbb=_0x19ce08[_0x2362a6]!==''?JSON[_0x5e34b5(0x5d3)](_0x19ce08[_0x2362a6]):[],_0x169982=_0x47cfbb['map'](_0x351afc=>Number(_0x351afc));break;case'EVAL':_0x169982=_0x19ce08[_0x2362a6]!==''?eval(_0x19ce08[_0x2362a6]):null;break;case _0x5e34b5(0xbc8):_0x47cfbb=_0x19ce08[_0x2362a6]!==''?JSON['parse'](_0x19ce08[_0x2362a6]):[],_0x169982=_0x47cfbb[_0x5e34b5(0x526)](_0xdaaea2=>eval(_0xdaaea2));break;case _0x5e34b5(0x5c0):_0x169982=_0x19ce08[_0x2362a6]!==''?JSON[_0x5e34b5(0x5d3)](_0x19ce08[_0x2362a6]):'';break;case'ARRAYJSON':_0x47cfbb=_0x19ce08[_0x2362a6]!==''?JSON[_0x5e34b5(0x5d3)](_0x19ce08[_0x2362a6]):[],_0x169982=_0x47cfbb['map'](_0x57bf3e=>JSON[_0x5e34b5(0x5d3)](_0x57bf3e));break;case'FUNC':_0x169982=_0x19ce08[_0x2362a6]!==''?new Function(JSON['parse'](_0x19ce08[_0x2362a6])):new Function('return\x200');break;case _0x5e34b5(0x89c):_0x47cfbb=_0x19ce08[_0x2362a6]!==''?JSON[_0x5e34b5(0x5d3)](_0x19ce08[_0x2362a6]):[],_0x169982=_0x47cfbb[_0x5e34b5(0x526)](_0x2f3640=>new Function(JSON['parse'](_0x2f3640)));break;case'STR':_0x169982=_0x19ce08[_0x2362a6]!==''?String(_0x19ce08[_0x2362a6]):'';break;case _0x5e34b5(0x471):_0x47cfbb=_0x19ce08[_0x2362a6]!==''?JSON['parse'](_0x19ce08[_0x2362a6]):[],_0x169982=_0x47cfbb[_0x5e34b5(0x526)](_0xdade31=>String(_0xdade31));break;case _0x5e34b5(0x4c0):_0x569f10=_0x19ce08[_0x2362a6]!==''?JSON[_0x5e34b5(0x5d3)](_0x19ce08[_0x2362a6]):{},_0x530373[_0x2b2388]={},VisuMZ[_0x5e34b5(0x5ea)](_0x530373[_0x2b2388],_0x569f10);continue;case _0x5e34b5(0x495):_0x47cfbb=_0x19ce08[_0x2362a6]!==''?JSON[_0x5e34b5(0x5d3)](_0x19ce08[_0x2362a6]):[],_0x169982=_0x47cfbb[_0x5e34b5(0x526)](_0x184c56=>VisuMZ[_0x5e34b5(0x5ea)]({},JSON[_0x5e34b5(0x5d3)](_0x184c56)));break;default:continue;}_0x530373[_0x2b2388]=_0x169982;}else return this['isForOpponentBattleCore']();}}return _0x530373;},(_0x4c8f3b=>{const _0x5f2947=_0x16d1ef,_0x5a3bd6=_0x4c8f3b['name'];for(const _0x2e80e1 of dependencies){if(_0x5f2947(0xa46)===_0x5f2947(0xa46)){if(!Imported[_0x2e80e1]){alert(_0x5f2947(0x235)[_0x5f2947(0x86a)](_0x5a3bd6,_0x2e80e1)),SceneManager[_0x5f2947(0x141)]();break;}}else _0x4334ec['setActiveWeaponSlot'](_0x999d17);}const _0x1b65f6=_0x4c8f3b[_0x5f2947(0x248)];if(_0x1b65f6[_0x5f2947(0xaf1)](/\[Version[ ](.*?)\]/i)){const _0x2c6ada=Number(RegExp['$1']);if(_0x2c6ada!==VisuMZ[label][_0x5f2947(0x1fe)]){if('kwhRy'!==_0x5f2947(0x806))alert(_0x5f2947(0xaf0)['format'](_0x5a3bd6,_0x2c6ada)),SceneManager['exit']();else return'icon';}}if(_0x1b65f6['match'](/\[Tier[ ](\d+)\]/i)){const _0x3b2bc8=Number(RegExp['$1']);_0x3b2bc8<tier?'SlAXt'===_0x5f2947(0x2f0)?(_0xf2be43=this[_0x5f2947(0xa74)]['_forcedHomeX']??_0x4fe0aa,_0x5ea592=this['_battler']['_forcedHomeY']??_0x2a80f3):(alert(_0x5f2947(0x8bd)[_0x5f2947(0x86a)](_0x5a3bd6,_0x3b2bc8,tier)),SceneManager[_0x5f2947(0x141)]()):tier=Math['max'](_0x3b2bc8,tier);}VisuMZ[_0x5f2947(0x5ea)](VisuMZ[label][_0x5f2947(0x58d)],_0x4c8f3b[_0x5f2947(0x2b8)]);})(pluginData),VisuMZ[_0x16d1ef(0x865)]=function(_0x4e9012){const _0x34ac13=_0x16d1ef;let _0x3cef37=[];for(const _0x4cbb8f of _0x4e9012){if(_0x34ac13(0x1cc)===_0x34ac13(0x1cc))_0x3cef37=_0x3cef37[_0x34ac13(0x468)](VisuMZ[_0x34ac13(0x96b)](_0x4cbb8f));else return this[_0x34ac13(0x730)]()['match'](/\$/i);}return _0x3cef37[_0x34ac13(0x787)](_0x3f71c8=>_0x3f71c8);},VisuMZ[_0x16d1ef(0x96b)]=function(_0x4dcacb){const _0x2f40f2=_0x16d1ef,_0x2fdc1a=BattleManager[_0x2f40f2(0x174)]()[_0x2f40f2(0x787)](_0x4725c8=>_0x4725c8&&_0x4725c8[_0x2f40f2(0x363)]()),_0x1b1c6b=BattleManager[_0x2f40f2(0x515)],_0x3a26fa=BattleManager[_0x2f40f2(0x93a)],_0x2bed41=BattleManager[_0x2f40f2(0x897)]?BattleManager[_0x2f40f2(0x897)][_0x2f40f2(0x777)](0x0):_0x2fdc1a;_0x4dcacb=_0x4dcacb['toLowerCase']()[_0x2f40f2(0x699)]();if(_0x4dcacb===_0x2f40f2(0x5a6))return[_0x1b1c6b];else{if(_0x4dcacb==='current\x20target')return[_0x3a26fa];else{if(_0x4dcacb===_0x2f40f2(0x5c8)){if(_0x2f40f2(0x4bd)!==_0x2f40f2(0x4bd))this[_0x2f40f2(0x88a)]()===_0x2f40f2(0x6a0)?this['_cancelButton']['x']=0x8:this['_cancelButton']['x']=-this['_cancelButton']['width']-0x4;else{if(_0x3a26fa){const _0x5ce9a5=_0x2bed41[_0x2f40f2(0x6f3)](_0x3a26fa);return _0x5ce9a5>=0x0?[_0x2bed41[_0x5ce9a5-0x1]||_0x3a26fa]:[_0x3a26fa];}}}else{if(_0x4dcacb===_0x2f40f2(0x9c9)){if(_0x3a26fa){if(_0x2f40f2(0x6d5)===_0x2f40f2(0x390)){const _0x44a3b8=_0x2261b9['x']+_0x484a7a[_0x2f40f2(0x481)]((_0x30162c[_0x2f40f2(0x7d5)]-_0x2b28df)/0x2);this[_0x2f40f2(0x1c2)](_0x33228d,_0x44a3b8,_0x3a79f0['y'],_0x21959f);}else{const _0x4288f5=_0x2bed41['indexOf'](_0x3a26fa);return _0x4288f5>=0x0?[_0x2bed41[_0x4288f5+0x1]||_0x3a26fa]:[_0x3a26fa];}}}else{if(_0x4dcacb==='all\x20targets'){if('xwanW'==='xwanW')return _0x2bed41;else this[_0x2f40f2(0x2a0)](_0x564876[_0x2f40f2(0xacc)]);}else{if(_0x4dcacb==='focus')return[_0x1b1c6b][_0x2f40f2(0x468)](_0x2bed41);else{if(_0x4dcacb===_0x2f40f2(0x507))return _0x2fdc1a[_0x2f40f2(0x787)](_0x4747e7=>_0x4747e7!==_0x1b1c6b&&!_0x2bed41[_0x2f40f2(0x4f8)](_0x4747e7)&&_0x4747e7[_0x2f40f2(0xa25)]());}}}}}}if(_0x1b1c6b){if(_0x4dcacb===_0x2f40f2(0xa0e))return _0x1b1c6b[_0x2f40f2(0xadb)]()['aliveMembers']();else{if(_0x4dcacb===_0x2f40f2(0xbde))return _0x1b1c6b[_0x2f40f2(0xadb)]()['aliveMembers']()['filter'](_0x14096c=>_0x14096c!==_0x1b1c6b);else{if(_0x4dcacb===_0x2f40f2(0x99e))return _0x1b1c6b['friendsUnit']()[_0x2f40f2(0x888)]()[_0x2f40f2(0x787)](_0x39af3f=>_0x39af3f!==_0x3a26fa);else{if(_0x4dcacb===_0x2f40f2(0x768))return _0x1b1c6b[_0x2f40f2(0xadb)]()[_0x2f40f2(0xb06)]();else{if(_0x4dcacb[_0x2f40f2(0xaf1)](/FRIEND INDEX (\d+)/i)){if(_0x2f40f2(0xb89)!==_0x2f40f2(0xb89))this[_0x2f40f2(0x6c8)]();else{const _0x54e941=Number(RegExp['$1']);return[_0x1b1c6b[_0x2f40f2(0xadb)]()[_0x2f40f2(0x9fe)]()[_0x54e941]];}}}}}}if(_0x4dcacb===_0x2f40f2(0x68f)){if(_0x2f40f2(0x56a)===_0x2f40f2(0x56a))return _0x1b1c6b[_0x2f40f2(0x8f4)]()['aliveMembers']();else this[_0x2f40f2(0x664)]();}else{if(_0x4dcacb===_0x2f40f2(0x976)){if('thqpT'!=='DdcwI')return _0x1b1c6b[_0x2f40f2(0x8f4)]()[_0x2f40f2(0x888)]()[_0x2f40f2(0x787)](_0x5ec405=>_0x5ec405!==_0x3a26fa);else{if(this[_0x2f40f2(0x3c1)]<=0x0)return;if(!this[_0x2f40f2(0x156)])return;const _0x655e30=this['_growDuration'],_0x3a5df5=this['_growWholeDuration'],_0x49ac8d=this[_0x2f40f2(0xa04)];_0x127e67[_0x2f40f2(0x6ce)]?(this[_0x2f40f2(0x305)]=this[_0x2f40f2(0x592)](this[_0x2f40f2(0x305)],this['_targetGrowX'],_0x655e30,_0x3a5df5,_0x49ac8d),this[_0x2f40f2(0x815)]=this[_0x2f40f2(0x592)](this['_growY'],this[_0x2f40f2(0xaad)],_0x655e30,_0x3a5df5,_0x49ac8d)):(this['_growX']=(this[_0x2f40f2(0x305)]*(_0x655e30-0x1)+this[_0x2f40f2(0x8e3)])/_0x655e30,this[_0x2f40f2(0x815)]=(this['_growY']*(_0x655e30-0x1)+this['_targetGrowY'])/_0x655e30);this[_0x2f40f2(0x3c1)]--;if(this[_0x2f40f2(0x3c1)]<=0x0)this[_0x2f40f2(0x5a1)]();}}else{if(_0x4dcacb===_0x2f40f2(0xbb6))return _0x1b1c6b[_0x2f40f2(0x8f4)]()[_0x2f40f2(0xb06)]();else{if(_0x4dcacb[_0x2f40f2(0xaf1)](/OPPONENT INDEX (\d+)/i)){const _0x46d181=Number(RegExp['$1']);return[_0x1b1c6b[_0x2f40f2(0x8f4)]()[_0x2f40f2(0x9fe)]()[_0x46d181]];}}}}}if(_0x4dcacb===_0x2f40f2(0x266)){if(_0x2f40f2(0x8b3)===_0x2f40f2(0x668)){if(!_0x331744['isSceneBattle']())return;if(!_0x557cfb['VisuMZ_2_BattleSystemPTB'])return;if(!_0x55f605[_0x2f40f2(0xa9c)]())return;_0x25ce92['ConvertParams'](_0x3b8a5e,_0x38fea6);const _0x27ea1a=_0x488fea[_0x2f40f2(0x515)][_0x2f40f2(0xadb)](),_0x1a99fc=_0x33750a[_0x2f40f2(0x790)],_0x415d1d=_0x4695fb[_0x2f40f2(0x860)]||'unchanged',_0x1df6d8=_0x1253e8[_0x2f40f2(0x408)]||_0x2f40f2(0x2c9),_0x4a351f=_0x41f1f3['alterCost']||0x0,_0x1a9d0a=_0x5a4f7e[_0x2f40f2(0x4ff)]||0x0;(_0x27ea1a[_0x2f40f2(0x6f8)]()||_0x1a99fc)&&(_0x1a99fc&&(_0x27ea1a[_0x2f40f2(0x6f4)]=_0x27ea1a['_ptbActionCost']||{},_0x27ea1a['_ptbActionCost'][_0x2f40f2(0x7aa)]=0x0),_0x27ea1a[_0x2f40f2(0x2e3)](_0x415d1d,_0x1df6d8,_0x4a351f,_0x1a9d0a));}else return $gameParty[_0x2f40f2(0x888)]();}else{if(_0x4dcacb==='alive\x20actors\x20not\x20user'){if(_0x2f40f2(0x869)===_0x2f40f2(0x869))return $gameParty[_0x2f40f2(0x888)]()[_0x2f40f2(0x787)](_0x4da7b8=>_0x4da7b8!==_0x1b1c6b);else this[_0x2f40f2(0x862)](_0x2f40f2(0xa31));}else{if(_0x4dcacb==='alive\x20actors\x20not\x20target'){if(_0x2f40f2(0x5cc)==='GRsgx')return $gameParty[_0x2f40f2(0x888)]()['filter'](_0x26c0f6=>_0x26c0f6!==_0x3a26fa);else{const _0x318b74=this[_0x2f40f2(0x959)]['bitmap'];_0x318b74&&(this[_0x2f40f2(0xb74)]=new _0x471fab(_0x318b74[_0x2f40f2(0x7d5)],_0x318b74[_0x2f40f2(0x842)]));}}else{if(_0x4dcacb==='dead\x20actors')return $gameParty[_0x2f40f2(0xb06)]();else{if(_0x4dcacb[_0x2f40f2(0xaf1)](/ACTOR INDEX (\d+)/i)){const _0x3a4690=Number(RegExp['$1']);return[$gameParty[_0x2f40f2(0x9fe)]()[_0x3a4690]];}else{if(_0x4dcacb[_0x2f40f2(0xaf1)](/ACTOR ID (\d+)/i)){const _0x1a5534=Number(RegExp['$1']);return[$gameActors[_0x2f40f2(0x509)](_0x1a5534)];}}}}}}if(_0x4dcacb===_0x2f40f2(0xb9a))return $gameTroop[_0x2f40f2(0x888)]();else{if(_0x4dcacb==='alive\x20enemies\x20not\x20user'){if('UOlYN'!==_0x2f40f2(0x4d0))return $gameTroop['aliveMembers']()['filter'](_0x1985bb=>_0x1985bb!==_0x1b1c6b);else{const _0x3d0d63=_0x2677d7(_0x5a7a14['$1'])['trim'](),_0x39a573=_0x7233a(_0xcbba65['$2']);_0x4f408f[_0x3d0d63]=_0x39a573,_0x1c0baa+=_0x39a573;}}else{if(_0x4dcacb===_0x2f40f2(0x8bf))return _0x2f40f2(0x270)===_0x2f40f2(0x557)?_0x2dfa65['filter'](_0x40ef66=>_0x40ef66!==_0x599b0e&&!_0x1f795b['includes'](_0x40ef66)&&_0x40ef66[_0x2f40f2(0xa25)]()):$gameTroop[_0x2f40f2(0x888)]()['filter'](_0x39c7b2=>_0x39c7b2!==_0x3a26fa);else{if(_0x4dcacb==='dead\x20enemies'){if(_0x2f40f2(0x4cc)===_0x2f40f2(0xa0b))_0x25baf4[_0x2f40f2(0x8c3)][_0x2f40f2(0x1d9)]&&_0x4d3a19['BattleCore'][_0x2f40f2(0x1d9)][_0x2f40f2(0x2c7)](this,_0x107690),_0x46637c[_0x2f40f2(0x8c3)][_0x2f40f2(0x7bc)](_0x5b4f7c);else return $gameTroop[_0x2f40f2(0xb06)]();}else{if(_0x4dcacb['match'](/ENEMY INDEX (\d+)/i)){const _0xb07986=Number(RegExp['$1']);return[$gameTroop[_0x2f40f2(0x9fe)]()[_0xb07986]];}else{if(_0x4dcacb[_0x2f40f2(0xaf1)](/ENEMY ID (\d+)/i)){const _0x2ed33f=Number(RegExp['$1']);return $gameTroop[_0x2f40f2(0x888)]()[_0x2f40f2(0x787)](_0x286acb=>_0x286acb['enemyId']()===_0x2ed33f);}}}}}}if(_0x4dcacb==='alive\x20battlers')return _0x2fdc1a[_0x2f40f2(0x787)](_0x44934d=>_0x44934d[_0x2f40f2(0x341)]());else{if(_0x4dcacb===_0x2f40f2(0x6c3))return _0x2fdc1a[_0x2f40f2(0x787)](_0x31e79c=>_0x31e79c[_0x2f40f2(0x341)]()&&_0x31e79c!==_0x1b1c6b);else{if(_0x4dcacb===_0x2f40f2(0xaa8)){if(_0x2f40f2(0xbb2)===_0x2f40f2(0x660))_0x4236c5[_0x2f40f2(0x3e8)]()&&_0x52c334[_0x2f40f2(0x71d)]()&&this[_0x2f40f2(0x8ad)](_0x2f40f2(0x726),_0x4161bf,_0x2f18a5),this['wholeActionSet'](_0x32a2a4,_0x22e3a6,_0xe93251);else return _0x2fdc1a['filter'](_0x34b0ec=>_0x34b0ec[_0x2f40f2(0x341)]()&&_0x34b0ec!==_0x3a26fa);}else{if(_0x4dcacb==='dead\x20battlers')return _0x2fdc1a[_0x2f40f2(0x787)](_0x2ffd69=>_0x2ffd69[_0x2f40f2(0x8ae)]());}}}return[];},PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x467),_0x2b6651=>{const _0x3fe34c=_0x16d1ef;if(!SceneManager[_0x3fe34c(0x37d)]())return;VisuMZ[_0x3fe34c(0x5ea)](_0x2b6651,_0x2b6651);const _0x49bd4e=$gameTemp[_0x3fe34c(0xb38)](),_0xbbf1cc=BattleManager['_action'],_0x533844=BattleManager[_0x3fe34c(0x515)],_0xdccfcb=BattleManager[_0x3fe34c(0x897)]?BattleManager[_0x3fe34c(0x897)][_0x3fe34c(0x777)](0x0):[],_0x2da8c3=BattleManager[_0x3fe34c(0xb07)];if(!_0x49bd4e||!_0xbbf1cc||!_0x533844)return;if(!_0xbbf1cc[_0x3fe34c(0x74a)]())return;if(_0x2b6651[_0x3fe34c(0x1de)])_0x2da8c3[_0x3fe34c(0x1f2)](_0x533844,_0xbbf1cc[_0x3fe34c(0x74a)]());_0x2b6651[_0x3fe34c(0x5d1)]&&(_0x3fe34c(0x60e)===_0x3fe34c(0x86d)?this[_0x3fe34c(0xb46)](_0x2e14d4):_0x2da8c3[_0x3fe34c(0x8ad)](_0x3fe34c(0x1fc),_0x533844,_0xdccfcb,!![]));if(_0x2b6651['ActionStart'])_0x2da8c3[_0x3fe34c(0x8ad)](_0x3fe34c(0x75a),_0x533844,_0xbbf1cc);if(_0x2b6651[_0x3fe34c(0x4ce)])_0x2da8c3[_0x3fe34c(0x8ad)](_0x3fe34c(0xaa0));if(_0x2b6651[_0x3fe34c(0xb27)])_0x2da8c3[_0x3fe34c(0x8ad)](_0x3fe34c(0x36f),_0x533844,_0xbbf1cc);if(_0x2b6651['WaitForAnimation'])_0x2da8c3[_0x3fe34c(0x8ad)](_0x3fe34c(0x213));_0x49bd4e['setWaitMode'](_0x3fe34c(0xa3b));}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x3de),_0x23ea0c=>{const _0x340141=_0x16d1ef;if(!SceneManager[_0x340141(0x37d)]())return;VisuMZ[_0x340141(0x5ea)](_0x23ea0c,_0x23ea0c);const _0x3d8be6=$gameTemp[_0x340141(0xb38)](),_0x3d8bef=BattleManager['_action'],_0x2aa3b3=BattleManager[_0x340141(0x515)],_0x33be0b=BattleManager[_0x340141(0x897)]?BattleManager[_0x340141(0x897)][_0x340141(0x777)](0x0):[],_0x2aa552=BattleManager['_logWindow'],_0x4678cf=_0x23ea0c[_0x340141(0x93d)]??![];if(!_0x3d8be6||!_0x3d8bef||!_0x2aa3b3)return;if(!_0x3d8bef[_0x340141(0x74a)]())return;let _0x3ac6f2=_0x4678cf?_0x2aa552[_0x340141(0x9a1)](_0x2aa3b3):0x1;for(let _0x2d67de=0x0;_0x2d67de<_0x3ac6f2;_0x2d67de++){_0x4678cf&&_0x2aa3b3[_0x340141(0x71d)]()&&_0x2aa552['push'](_0x340141(0x726),_0x2aa3b3,_0x2d67de);if(_0x23ea0c[_0x340141(0x81c)])_0x2aa552[_0x340141(0x8ad)](_0x340141(0x27c),_0x2aa3b3,_0x3d8bef);if(_0x23ea0c[_0x340141(0x46e)]>0x0)_0x2aa552['push'](_0x340141(0x749),_0x23ea0c['WaitCount']);if(_0x23ea0c['ActionAnimation'])_0x2aa552[_0x340141(0x8ad)](_0x340141(0x8cf),_0x2aa3b3,_0x33be0b,_0x3d8bef[_0x340141(0x74a)]()['animationId']);if(_0x23ea0c[_0x340141(0x659)])_0x2aa552[_0x340141(0x8ad)]('waitForAnimation');for(const _0x45a147 of _0x33be0b){if(!_0x45a147)continue;if(_0x23ea0c[_0x340141(0x4f2)])_0x2aa552['push'](_0x340141(0x6db),_0x2aa3b3,_0x45a147);}}_0x4678cf&&_0x2aa3b3[_0x340141(0x71d)]()&&_0x2aa552[_0x340141(0x8ad)](_0x340141(0x61d),_0x2aa3b3);if(_0x23ea0c['ApplyImmortal'])_0x2aa552[_0x340141(0x8ad)](_0x340141(0x1fc),_0x2aa3b3,_0x33be0b,![]);_0x3d8be6[_0x340141(0x13b)]('battlelog');}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x296),_0xf98f31=>{const _0xddc4ec=_0x16d1ef;if(!SceneManager[_0xddc4ec(0x37d)]())return;VisuMZ[_0xddc4ec(0x5ea)](_0xf98f31,_0xf98f31);const _0x47c849=$gameTemp[_0xddc4ec(0xb38)](),_0xade2ce=BattleManager[_0xddc4ec(0x7c5)],_0x27d957=BattleManager['_subject'],_0x3c5b76=BattleManager[_0xddc4ec(0x897)]?BattleManager['_allTargets']['slice'](0x0):[],_0xff8180=BattleManager['_logWindow'],_0x437833=_0xf98f31[_0xddc4ec(0x93d)]??![];if(!_0x47c849||!_0xade2ce||!_0x27d957)return;if(!_0xade2ce[_0xddc4ec(0x74a)]())return;let _0x47ac67=_0x437833?_0xff8180[_0xddc4ec(0x9a1)](_0x27d957):0x1;for(let _0x325104=0x0;_0x325104<_0x47ac67;_0x325104++){if(_0xddc4ec(0x8e6)===_0xddc4ec(0x533)){let _0x26b550=_0x521037[_0xddc4ec(0x504)](_0x49158c[_0xddc4ec(0x8c3)][_0xddc4ec(0x63c)][_0xddc4ec(0x2c7)](this));return _0x43abf5[_0xddc4ec(0x8c3)][_0xddc4ec(0x7c8)](_0x26b550);}else for(const _0x292b45 of _0x3c5b76){if(!_0x292b45)continue;_0x437833&&_0x27d957[_0xddc4ec(0x71d)]()&&_0xff8180[_0xddc4ec(0x8ad)](_0xddc4ec(0x726),_0x27d957,_0x325104);if(_0xf98f31['PerformAction'])_0xff8180[_0xddc4ec(0x8ad)](_0xddc4ec(0x27c),_0x27d957,_0xade2ce);if(_0xf98f31[_0xddc4ec(0x501)]>0x0)_0xff8180['push'](_0xddc4ec(0x749),_0xf98f31[_0xddc4ec(0x501)]);if(_0xf98f31[_0xddc4ec(0xada)])_0xff8180[_0xddc4ec(0x8ad)]('showAnimation',_0x27d957,[_0x292b45],_0xade2ce['item']()[_0xddc4ec(0x995)]);if(_0xf98f31[_0xddc4ec(0x16d)]>0x0)_0xff8180[_0xddc4ec(0x8ad)](_0xddc4ec(0x749),_0xf98f31['WaitCount2']);if(_0xf98f31['ActionEffect'])_0xff8180[_0xddc4ec(0x8ad)]('actionEffect',_0x27d957,_0x292b45);}}_0x437833&&_0x27d957[_0xddc4ec(0x71d)]()&&('QEOok'===_0xddc4ec(0xa70)?_0x282042['setBattleCameraOffset'](0x0,0x0,_0x3eeb7b[_0xddc4ec(0x9d1)],_0x53902c['EasingType']):_0xff8180['push'](_0xddc4ec(0x61d),_0x27d957));if(_0xf98f31['ApplyImmortal'])_0xff8180[_0xddc4ec(0x8ad)](_0xddc4ec(0x1fc),_0x27d957,_0x3c5b76,![]);_0x47c849[_0xddc4ec(0x13b)](_0xddc4ec(0xa3b));}),PluginManager['registerCommand'](pluginData['name'],_0x16d1ef(0x3e3),_0x3399c6=>{const _0x4f7d3e=_0x16d1ef;if(!SceneManager[_0x4f7d3e(0x37d)]())return;VisuMZ['ConvertParams'](_0x3399c6,_0x3399c6);const _0x3e0d83=$gameTemp['getLastPluginCommandInterpreter'](),_0x5a648e=BattleManager['_action'],_0x5dd130=BattleManager['_subject'],_0x321672=BattleManager[_0x4f7d3e(0x897)]?BattleManager['_allTargets'][_0x4f7d3e(0x777)](0x0):[],_0x74b96c=BattleManager[_0x4f7d3e(0xb07)];if(!_0x3e0d83||!_0x5a648e||!_0x5dd130)return;if(!_0x5a648e['item']())return;if(_0x3399c6[_0x4f7d3e(0x5d1)])_0x74b96c[_0x4f7d3e(0x8ad)](_0x4f7d3e(0x1fc),_0x5dd130,_0x321672,![]);if(_0x3399c6[_0x4f7d3e(0x4cd)])_0x74b96c[_0x4f7d3e(0x8ad)](_0x4f7d3e(0xb2b));if(_0x3399c6['WaitForEffect'])_0x74b96c['push'](_0x4f7d3e(0x3c4));if(_0x3399c6[_0x4f7d3e(0x79d)])_0x74b96c[_0x4f7d3e(0x8ad)](_0x4f7d3e(0x721));if(_0x3399c6[_0x4f7d3e(0x6a5)])_0x74b96c['push']('performActionEnd',_0x5dd130);if(_0x3399c6[_0x4f7d3e(0x4ce)])_0x74b96c[_0x4f7d3e(0x8ad)](_0x4f7d3e(0xaa0));_0x3e0d83[_0x4f7d3e(0x13b)]('battlelog');}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x3f3),_0x249304=>{const _0x57cc3a=_0x16d1ef;if(!SceneManager[_0x57cc3a(0x37d)]())return;if(!Imported[_0x57cc3a(0x3b9)])return;VisuMZ[_0x57cc3a(0x5ea)](_0x249304,_0x249304);const _0x1b15f0=$gameTemp[_0x57cc3a(0xb38)](),_0x66018d=_0x249304[_0x57cc3a(0xbce)];if(!_0x1b15f0)return;$gameScreen[_0x57cc3a(0x6ba)](_0x249304[_0x57cc3a(0x9fc)],_0x249304[_0x57cc3a(0x9d1)],_0x249304[_0x57cc3a(0x43c)]);if(_0x66018d)_0x1b15f0['setWaitMode'](_0x57cc3a(0x144));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x150),_0x58504b=>{const _0x481604=_0x16d1ef;if(!SceneManager[_0x481604(0x37d)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x481604(0x5ea)](_0x58504b,_0x58504b);const _0xb67c5b=$gameTemp[_0x481604(0xb38)](),_0x47b855=_0x58504b[_0x481604(0xbce)];if(!_0xb67c5b)return;$gameScreen[_0x481604(0x6ba)](0x0,_0x58504b[_0x481604(0x9d1)],_0x58504b[_0x481604(0x43c)]);if(_0x47b855)_0xb67c5b[_0x481604(0x13b)](_0x481604(0x144));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Angle_WaitForAngle',_0x58e955=>{const _0x140ab6=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x140ab6(0x3b9)])return;const _0x312ef7=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x312ef7)return;_0x312ef7['setWaitMode']('battleAngle');}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x461),_0x247e7e=>{const _0x26c853=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x26c853(0x5ea)](_0x247e7e,_0x247e7e);const _0x4f221c=$gameTemp['getLastPluginCommandInterpreter'](),_0x28381a=BattleManager[_0x26c853(0x7c5)],_0x38384b=BattleManager[_0x26c853(0x515)],_0x4f45fa=VisuMZ[_0x26c853(0x865)](_0x247e7e[_0x26c853(0x39a)]),_0x3846e6=_0x247e7e[_0x26c853(0x72f)],_0x587740=BattleManager[_0x26c853(0xb07)];if(!_0x4f221c||!_0x28381a||!_0x38384b)return;if(!_0x28381a[_0x26c853(0x74a)]())return;let _0x44faf3=_0x28381a[_0x26c853(0x74a)]()[_0x26c853(0x995)];if(_0x44faf3<0x0)_0x44faf3=_0x38384b['attackAnimationId1']();$gameTemp[_0x26c853(0x95e)](_0x4f45fa,_0x44faf3,_0x3846e6);if(_0x247e7e['WaitForAnimation']){if(_0x26c853(0x684)===_0x26c853(0x684))_0x4f221c['setWaitMode'](_0x26c853(0x807));else{const _0x6736=this[_0x26c853(0xb65)];_0x6736['contents'][_0x26c853(0x721)]();const _0x3327ac=this[_0x26c853(0x820)](this['index']());if(_0x3327ac==='icon'&&this['maxItems']()>0x0){const _0x138c04=this[_0x26c853(0x911)](this[_0x26c853(0x830)]());let _0x58290b=this[_0x26c853(0xa6c)](this[_0x26c853(0x830)]());_0x58290b=_0x58290b[_0x26c853(0x541)](/\\I\[(\d+)\]/gi,''),_0x6736[_0x26c853(0x662)](),this[_0x26c853(0x6da)](_0x58290b,_0x138c04),this[_0x26c853(0x61a)](_0x58290b,_0x138c04),this[_0x26c853(0x183)](_0x58290b,_0x138c04);}}}}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x797),_0x20660f=>{const _0x572d80=_0x16d1ef;if(!SceneManager[_0x572d80(0x37d)]())return;VisuMZ[_0x572d80(0x5ea)](_0x20660f,_0x20660f);const _0xa443bd=$gameTemp['getLastPluginCommandInterpreter'](),_0x4ac482=BattleManager['_subject'],_0x38a1f9=VisuMZ[_0x572d80(0x865)](_0x20660f[_0x572d80(0x39a)]),_0x13a9dc=_0x20660f['Mirror'],_0x45458d=BattleManager[_0x572d80(0xb07)];if(!_0xa443bd||!_0x4ac482)return;const _0x5b307c=_0x4ac482['attackAnimationId1']();$gameTemp[_0x572d80(0x95e)](_0x38a1f9,_0x5b307c,_0x13a9dc),_0x20660f[_0x572d80(0x659)]&&(_0x572d80(0x429)===_0x572d80(0x429)?_0xa443bd['setWaitMode']('battleAnimation'):(this[_0x572d80(0xb07)]['push']('addText',_0x1b3883[_0x572d80(0x1ba)][_0x572d80(0x86a)](_0x3366a1[_0x572d80(0x8c4)]())),this[_0x572d80(0xb07)]['push'](_0x572d80(0xbc7))));}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x8f9),_0x57b872=>{const _0x1cd56b=_0x16d1ef;if(!SceneManager[_0x1cd56b(0x37d)]())return;VisuMZ[_0x1cd56b(0x5ea)](_0x57b872,_0x57b872);const _0x59c5af=_0x962d49[_0x1cd56b(0x431)](_0x57b872['Slot']);if(_0x59c5af<=0x0)return;const _0x5e454f=$gameTemp[_0x1cd56b(0xb38)](),_0x962d49=BattleManager[_0x1cd56b(0x515)],_0x2aad3d=VisuMZ[_0x1cd56b(0x865)](_0x57b872[_0x1cd56b(0x39a)]),_0x2f4329=_0x57b872[_0x1cd56b(0x72f)],_0x12f177=BattleManager['_logWindow'];if(!_0x5e454f||!_0x962d49)return;$gameTemp[_0x1cd56b(0x95e)](_0x2aad3d,_0x59c5af,_0x2f4329),_0x57b872[_0x1cd56b(0x659)]&&('KrQXf'===_0x1cd56b(0x6ae)?_0x51a6d2=_0x1be8df:_0x5e454f[_0x1cd56b(0x13b)](_0x1cd56b(0x807)));}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Animation_CastAnimation',_0x49e355=>{const _0x1074a0=_0x16d1ef;if(!SceneManager[_0x1074a0(0x37d)]())return;VisuMZ[_0x1074a0(0x5ea)](_0x49e355,_0x49e355);const _0x185005=$gameTemp['getLastPluginCommandInterpreter'](),_0x1bcfd9=BattleManager['_action'],_0x22ce9e=_0x49e355[_0x1074a0(0x72f)],_0x10662c=VisuMZ[_0x1074a0(0x865)](_0x49e355[_0x1074a0(0x39a)]);if(!_0x185005||!_0x1bcfd9)return;if(!_0x1bcfd9[_0x1074a0(0x74a)]())return;for(const _0x30da47 of _0x10662c){if('mBjsZ'!==_0x1074a0(0x192))_0x4d05ab=_0x1a4f07>=_0x5e37a5?_0x179825:_0x512a75;else{if(!_0x30da47)continue;_0x30da47[_0x1074a0(0x36f)](_0x1bcfd9,_0x22ce9e);}}if(_0x49e355['WaitForAnimation'])_0x185005[_0x1074a0(0x13b)]('battleAnimation');}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Animation_ChangeBattlePortrait',_0x1f36f4=>{const _0x415914=_0x16d1ef;VisuMZ[_0x415914(0x5ea)](_0x1f36f4,_0x1f36f4);const _0x5c17c2=$gameTemp[_0x415914(0xb38)](),_0x44b6c7=VisuMZ[_0x415914(0x865)](_0x1f36f4['Targets']),_0x1cf5a2=_0x1f36f4[_0x415914(0x875)];if(!_0x1cf5a2)return;for(const _0x50b82d of _0x44b6c7){if(!_0x50b82d)continue;if(!_0x50b82d['isActor']())continue;_0x50b82d[_0x415914(0xade)](_0x1cf5a2);}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0xa22),_0x3703fd=>{const _0x35fbdb=_0x16d1ef;if(!SceneManager['_scene'])return;if(!SceneManager[_0x35fbdb(0x438)][_0x35fbdb(0x71a)])return;if(!Imported[_0x35fbdb(0x6ce)])return;VisuMZ[_0x35fbdb(0x5ea)](_0x3703fd,_0x3703fd);const _0x3e680e=$gameTemp[_0x35fbdb(0xb38)](),_0x3defbb=Math[_0x35fbdb(0x5d9)](_0x3703fd['pointX']),_0xbe95f6=Math[_0x35fbdb(0x5d9)](_0x3703fd[_0x35fbdb(0x8b4)]);$gameTemp[_0x35fbdb(0x938)](_0x3defbb,_0xbe95f6,_0x3703fd[_0x35fbdb(0x6fc)],_0x3703fd[_0x35fbdb(0x72f)],_0x3703fd[_0x35fbdb(0x6a1)]),_0x3703fd[_0x35fbdb(0x133)]&&_0x3e680e&&(SceneManager[_0x35fbdb(0x438)]['_spriteset']['updatePointAnimations'](),_0x3e680e[_0x35fbdb(0x13b)](_0x35fbdb(0x807)));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x321),_0x1cea1e=>{const _0x2067fa=_0x16d1ef;if(!SceneManager[_0x2067fa(0x37d)]())return;VisuMZ[_0x2067fa(0x5ea)](_0x1cea1e,_0x1cea1e);const _0x410cd2=$gameTemp['getLastPluginCommandInterpreter'](),_0x569791=VisuMZ[_0x2067fa(0x865)](_0x1cea1e[_0x2067fa(0x39a)]),_0x1f32d9=_0x1cea1e['AnimationID'],_0x2e3761=_0x1cea1e['Mirror'];if(!_0x410cd2)return;$gameTemp[_0x2067fa(0x95e)](_0x569791,_0x1f32d9,_0x2e3761);if(_0x1cea1e[_0x2067fa(0x659)])_0x410cd2[_0x2067fa(0x13b)]('battleAnimation');}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x531),_0x5215e3=>{const _0x496162=_0x16d1ef;if(!SceneManager[_0x496162(0x37d)]())return;const _0x184cc2=$gameTemp[_0x496162(0xb38)]();if(!_0x184cc2)return;_0x184cc2[_0x496162(0x13b)](_0x496162(0x807));}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x23a),_0x20dd92=>{const _0x145a13=_0x16d1ef;if(!SceneManager[_0x145a13(0x37d)]())return;VisuMZ[_0x145a13(0x5ea)](_0x20dd92,_0x20dd92);const _0x18304b=BattleManager[_0x145a13(0xb07)],_0x4fba5b=_0x20dd92[_0x145a13(0xb1d)]&&Imported[_0x145a13(0x8c5)];_0x18304b[_0x145a13(0x3fb)](_0x20dd92['Text']),_0x4fba5b&&Imported[_0x145a13(0x8c5)]&&$gameSystem['addTextToCombatLog'](_0x20dd92[_0x145a13(0x168)]||'',_0x20dd92[_0x145a13(0x990)]||0x0);}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0xb75),_0x333397=>{const _0x2883b3=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;const _0x24c8ee=BattleManager[_0x2883b3(0xb07)];_0x24c8ee['clear']();}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x59b),_0x4833bb=>{const _0x38d5f9=_0x16d1ef;if(!SceneManager[_0x38d5f9(0x37d)]())return;const _0x3af2e5=$gameTemp['getLastPluginCommandInterpreter'](),_0x327ea3=BattleManager[_0x38d5f9(0x7c5)],_0x3e98f2=BattleManager['_subject'],_0x319c5d=BattleManager[_0x38d5f9(0xb07)];if(!_0x3af2e5||!_0x327ea3||!_0x3e98f2)return;if(!_0x327ea3['item']())return;_0x319c5d['displayAction'](_0x3e98f2,_0x327ea3[_0x38d5f9(0x74a)]()),_0x3af2e5[_0x38d5f9(0x13b)](_0x38d5f9(0xa3b));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x8f2),_0x38bc85=>{const _0x3f7b30=_0x16d1ef;if(!SceneManager[_0x3f7b30(0x37d)]())return;const _0x284037=BattleManager[_0x3f7b30(0xb07)];_0x284037[_0x3f7b30(0x1c4)]();}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x300),_0x21a438=>{const _0x4d2f25=_0x16d1ef;if(!SceneManager[_0x4d2f25(0x37d)]())return;const _0x547678=BattleManager[_0x4d2f25(0xb07)];_0x547678[_0x4d2f25(0x891)]();}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x79e),_0x4e03cc=>{const _0x9331d1=_0x16d1ef;if(!SceneManager[_0x9331d1(0x37d)]())return;const _0x242da3=BattleManager[_0x9331d1(0xb07)];_0x242da3[_0x9331d1(0x928)]();}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x48c),_0x5ce7b0=>{const _0x577f0e=_0x16d1ef;if(!SceneManager[_0x577f0e(0x37d)]())return;VisuMZ['ConvertParams'](_0x5ce7b0,_0x5ce7b0),SceneManager[_0x577f0e(0x438)]['setVisibleUI'](_0x5ce7b0[_0x577f0e(0x26e)]);}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x4a4),_0x5edd76=>{const _0xb2b4ef=_0x16d1ef;if(!SceneManager[_0xb2b4ef(0x37d)]())return;const _0x20b2dc=$gameTemp[_0xb2b4ef(0xb38)]();_0x20b2dc[_0xb2b4ef(0x13b)](_0xb2b4ef(0xa3b));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_BattleLog_WaitForNewLine',_0x1de4ac=>{const _0x2882ab=_0x16d1ef;if(!SceneManager[_0x2882ab(0x37d)]())return;const _0x14789e=$gameTemp[_0x2882ab(0xb38)](),_0x36ed65=BattleManager[_0x2882ab(0xb07)];_0x36ed65[_0x2882ab(0xb2b)](),_0x14789e[_0x2882ab(0x13b)]('battlelog');}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0xb13),_0x13daad=>{const _0xac40e2=_0x16d1ef;if(!SceneManager[_0xac40e2(0x37d)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0xac40e2(0x5ea)](_0x13daad,_0x13daad);const _0x5eb8ef=$gameScreen[_0xac40e2(0x83b)]();_0x5eb8ef[_0xac40e2(0xa44)]=_0x13daad['Setting'];}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Camera_FocusPoint',_0x4f3ca8=>{const _0x34b912=_0x16d1ef;if(!SceneManager[_0x34b912(0x37d)]())return;if(!Imported[_0x34b912(0x3b9)])return;VisuMZ['ConvertParams'](_0x4f3ca8,_0x4f3ca8);const _0x16db44=$gameTemp[_0x34b912(0xb38)](),_0x3e589d=_0x4f3ca8['WaitForCamera'];$gameScreen[_0x34b912(0xaeb)](_0x4f3ca8[_0x34b912(0xaf3)],_0x4f3ca8['FocusY'],_0x4f3ca8[_0x34b912(0x9d1)],_0x4f3ca8[_0x34b912(0x43c)]);if(_0x3e589d)_0x16db44['setWaitMode'](_0x34b912(0x38a));}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x74c),_0x5b0961=>{const _0x3787ae=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3787ae(0x3b9)])return;VisuMZ['ConvertParams'](_0x5b0961,_0x5b0961);const _0x342467=$gameTemp[_0x3787ae(0xb38)](),_0xd8835d=VisuMZ[_0x3787ae(0x865)](_0x5b0961[_0x3787ae(0x39a)]),_0x37b38b=_0x5b0961[_0x3787ae(0x4b0)];$gameScreen[_0x3787ae(0x136)](_0xd8835d,_0x5b0961[_0x3787ae(0x9d1)],_0x5b0961[_0x3787ae(0x43c)]);if(_0x37b38b)_0x342467[_0x3787ae(0x13b)](_0x3787ae(0x38a));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Camera_Offset',_0x29cbdd=>{const _0x21e8eb=_0x16d1ef;if(!SceneManager[_0x21e8eb(0x37d)]())return;if(!Imported[_0x21e8eb(0x3b9)])return;VisuMZ[_0x21e8eb(0x5ea)](_0x29cbdd,_0x29cbdd);const _0x32a375=$gameTemp[_0x21e8eb(0xb38)](),_0x5f4718=_0x29cbdd[_0x21e8eb(0x4b0)];$gameScreen[_0x21e8eb(0xa8f)](_0x29cbdd[_0x21e8eb(0x2ff)],_0x29cbdd[_0x21e8eb(0x91f)],_0x29cbdd[_0x21e8eb(0x9d1)],_0x29cbdd['EasingType']);if(_0x5f4718)_0x32a375[_0x21e8eb(0x13b)](_0x21e8eb(0x38a));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x47a),_0x1a352b=>{const _0x3ee49a=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3ee49a(0x3b9)])return;VisuMZ['ConvertParams'](_0x1a352b,_0x1a352b);const _0x2b4ede=$gameTemp[_0x3ee49a(0xb38)](),_0x489808=_0x1a352b['ResetFocus'],_0x9dc7f6=_0x1a352b[_0x3ee49a(0x181)],_0x2c1f47=_0x1a352b[_0x3ee49a(0x4b0)];if(_0x489808){if('ZdYyI'!==_0x3ee49a(0x5e7)){if(!_0x5ee076[_0x3ee49a(0xb9b)]())return;if(this['_flinched'])return;this[_0x3ee49a(0x7c0)]=!![];const _0x2a8eda=this[_0x3ee49a(0xb02)]();if(_0x2a8eda)_0x2a8eda['stepFlinch']();}else{const _0x306fd6=Math[_0x3ee49a(0x5d9)](Graphics[_0x3ee49a(0x7d5)]/0x2),_0x96a387=Math['round'](Graphics[_0x3ee49a(0x842)]/0x2);$gameScreen[_0x3ee49a(0xaeb)](_0x306fd6,_0x96a387,_0x1a352b[_0x3ee49a(0x9d1)],_0x1a352b[_0x3ee49a(0x43c)]);}}_0x9dc7f6&&(_0x3ee49a(0x48a)!=='HXajl'?$gameScreen[_0x3ee49a(0xa8f)](0x0,0x0,_0x1a352b[_0x3ee49a(0x9d1)],_0x1a352b[_0x3ee49a(0x43c)]):this[_0x3ee49a(0x80f)](_0x3ee49a(0x2b0)));if(_0x2c1f47)_0x2b4ede['setWaitMode']('battleCamera');}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x170),_0x1fdf9c=>{const _0x35a8c2=_0x16d1ef;if(!SceneManager[_0x35a8c2(0x37d)]())return;if(!Imported[_0x35a8c2(0x3b9)])return;const _0x4da872=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4da872)return;_0x4da872[_0x35a8c2(0x13b)](_0x35a8c2(0x38a));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x4cf),_0x445c63=>{const _0x238581=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x238581(0x5ea)](_0x445c63,_0x445c63);const _0x17bcdb=VisuMZ[_0x238581(0x865)](_0x445c63[_0x238581(0x39a)]),_0x42878d=_0x445c63[_0x238581(0x51e)][_0x238581(0x1e1)]()[_0x238581(0x699)]();for(const _0x1b7a8e of _0x17bcdb){if(!_0x1b7a8e)continue;_0x1b7a8e['requestDragonbonesAnimation'](_0x42878d);}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0xb24),_0x3c600f=>{const _0x45d8d5=_0x16d1ef;if(!SceneManager[_0x45d8d5(0x37d)]())return;if(!Imported[_0x45d8d5(0x5f3)])return;VisuMZ[_0x45d8d5(0x5ea)](_0x3c600f,_0x3c600f);const _0x536d04=VisuMZ[_0x45d8d5(0x865)](_0x3c600f[_0x45d8d5(0x39a)]),_0x22a262=_0x3c600f[_0x45d8d5(0x1ae)];for(const _0xc8651e of _0x536d04){if(!_0xc8651e)continue;_0xc8651e['dragonbonesData']()[_0x45d8d5(0x9c1)]=_0x22a262;}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x3b2),_0x3cfc55=>{const _0x4fe3ba=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4fe3ba(0x694)])return;VisuMZ['ConvertParams'](_0x3cfc55,_0x3cfc55);const _0x344c95=BattleManager[_0x4fe3ba(0x7c5)],_0x5943f9=_0x3cfc55[_0x4fe3ba(0x4b6)];if(!_0x344c95)return;_0x344c95[_0x4fe3ba(0x33c)]=_0x5943f9;}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Element_Clear',_0x330222=>{const _0x34c4d3=_0x16d1ef;if(!SceneManager[_0x34c4d3(0x37d)]())return;if(!Imported[_0x34c4d3(0x694)])return;const _0x5a964f=BattleManager[_0x34c4d3(0x7c5)];if(!_0x5a964f)return;_0x5a964f[_0x34c4d3(0x8c6)]();}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x2f8),_0x495a3b=>{const _0x401e5d=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x401e5d(0x694)])return;VisuMZ[_0x401e5d(0x5ea)](_0x495a3b,_0x495a3b);const _0x1b0545=BattleManager[_0x401e5d(0x7c5)],_0x24d677=_0x495a3b[_0x401e5d(0x4b6)];if(!_0x1b0545)return;_0x1b0545[_0x401e5d(0x9d8)]=_0x24d677;}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x564),_0x491a46=>{const _0x2e9885=_0x16d1ef;if(!SceneManager[_0x2e9885(0x37d)]())return;if(!Imported[_0x2e9885(0x694)])return;const _0x4cce00=BattleManager[_0x2e9885(0x7c5)];if(!_0x4cce00)return;_0x4cce00[_0x2e9885(0x8fa)]=!![];}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Horror_Clear',_0x5e3436=>{const _0xb5852b=_0x16d1ef;if(!Imported[_0xb5852b(0x51b)])return;if(!SceneManager[_0xb5852b(0x37d)]())return;VisuMZ[_0xb5852b(0x5ea)](_0x5e3436,_0x5e3436);const _0x2df487=VisuMZ[_0xb5852b(0x865)](_0x5e3436[_0xb5852b(0x39a)]);for(const _0x570326 of _0x2df487){if(_0xb5852b(0x244)!==_0xb5852b(0x54f)){if(!_0x570326)continue;_0x570326['removeHorrorEffect'](_0xb5852b(0x658)),_0x570326[_0xb5852b(0x8fd)]('glitch'),_0x570326[_0xb5852b(0x8fd)]('tv'),_0x570326[_0xb5852b(0x572)]();}else{this[_0xb5852b(0x157)](_0xb5852b(0x398));const _0x189fa9=this[_0xb5852b(0xa14)];_0x4014dd[_0xb5852b(0x8c3)][_0xb5852b(0xa13)][_0xb5852b(0x2c7)](this),this[_0xb5852b(0xa14)]=_0x189fa9+_0x4e5a40['BattleCore']['Settings'][_0xb5852b(0x93b)][_0xb5852b(0xb80)]['call'](this),this[_0xb5852b(0x3d4)](_0xb5852b(0x2d4));}}$gamePlayer[_0xb5852b(0x928)]();}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x131),_0x45c2a6=>{const _0xa3d623=_0x16d1ef;if(!Imported[_0xa3d623(0x51b)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x45c2a6,_0x45c2a6);const _0x3e2532=VisuMZ[_0xa3d623(0x865)](_0x45c2a6[_0xa3d623(0x39a)]),_0x11fe85=_0xa3d623(0x278);_0x45c2a6['sliceMin']=Math[_0xa3d623(0xa1b)](_0x45c2a6[_0xa3d623(0xb58)]/0x2),_0x45c2a6[_0xa3d623(0x864)]=_0x45c2a6[_0xa3d623(0xb58)],_0x45c2a6[_0xa3d623(0x920)]=!![];for(const _0x374cbf of _0x3e2532){if(!_0x374cbf)continue;_0x374cbf[_0xa3d623(0x2ec)](_0x11fe85,_0x45c2a6);}$gamePlayer[_0xa3d623(0x928)]();}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x22c),_0x2810e2=>{const _0x55fcc0=_0x16d1ef;if(!Imported[_0x55fcc0(0x51b)])return;if(!SceneManager[_0x55fcc0(0x37d)]())return;VisuMZ[_0x55fcc0(0x5ea)](_0x2810e2,_0x2810e2);const _0x8ef084=VisuMZ[_0x55fcc0(0x865)](_0x2810e2['Targets']);for(const _0x46b053 of _0x8ef084){if('jovLs'!==_0x55fcc0(0x64a)){if(!_0x46b053)continue;_0x46b053['removeHorrorEffect'](_0x55fcc0(0x278));}else _0x14a874[_0x55fcc0(0x8c3)][_0x55fcc0(0x24c)][_0x55fcc0(0x2c7)](this),this[_0x55fcc0(0xa4f)](),this[_0x55fcc0(0x2b1)]();}$gamePlayer[_0x55fcc0(0x928)]();}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Horror_NoiseCreate',_0x41061a=>{const _0x1c3d8c=_0x16d1ef;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x1c3d8c(0x37d)]())return;VisuMZ[_0x1c3d8c(0x5ea)](_0x41061a,_0x41061a);const _0x1286fe=VisuMZ[_0x1c3d8c(0x865)](_0x41061a[_0x1c3d8c(0x39a)]),_0x588424='noise';for(const _0x55f9ed of _0x1286fe){if(!_0x55f9ed)continue;_0x55f9ed['setHorrorEffectSettings'](_0x588424,_0x41061a);}$gamePlayer[_0x1c3d8c(0x928)]();}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x53e),_0x478305=>{const _0x23a9f8=_0x16d1ef;if(!Imported[_0x23a9f8(0x51b)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x23a9f8(0x5ea)](_0x478305,_0x478305);const _0x683e91=VisuMZ[_0x23a9f8(0x865)](_0x478305[_0x23a9f8(0x39a)]);for(const _0x3b6b26 of _0x683e91){if(_0x23a9f8(0x930)!=='btYzF'){if(!_0x3b6b26)continue;_0x3b6b26[_0x23a9f8(0x8fd)](_0x23a9f8(0x658));}else _0x4493f9[_0x23a9f8(0x515)][_0x23a9f8(0x598)]();}$gamePlayer['refresh']();}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x96c),_0x227eee=>{const _0x5d09e9=_0x16d1ef;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x5d09e9(0x37d)]())return;VisuMZ[_0x5d09e9(0x5ea)](_0x227eee,_0x227eee);const _0x2b3c49=VisuMZ['CreateActionSequenceTargets'](_0x227eee['Targets']),_0x18bb1d='tv';for(const _0x535d63 of _0x2b3c49){if('rbOwO'===_0x5d09e9(0x9d2)){if(!_0x44b666['isSceneBattle']())return;_0x511456[_0x5d09e9(0x5ea)](_0xa677f8,_0x5b17fa);const _0x686dec=_0x20d414[_0x5d09e9(0xb38)](),_0x1112a7=_0x3a4e17[_0x5d09e9(0xb14)],_0xbcffb=_0x5c0d0c[_0x5d09e9(0x184)];if(!_0x686dec)return;_0x3460c2[_0x5d09e9(0x723)]=_0x1112a7,_0x1b6452['_target']=_0x1e4a3e['_allTargets']?_0x1b96f8[_0x5d09e9(0x897)][_0x186dc3['_targetIndex']]||null:null,_0x409a1a['_target']&&_0xbcffb[_0x5d09e9(0xaff)]()['trim']()!=='UNTITLED'&&_0x686dec[_0x5d09e9(0x70c)]([_0xbcffb]);}else{if(!_0x535d63)continue;_0x535d63[_0x5d09e9(0x2ec)](_0x18bb1d,_0x227eee);}}$gamePlayer[_0x5d09e9(0x928)]();}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x2ea),_0x527100=>{const _0x1ce41b=_0x16d1ef;if(!Imported[_0x1ce41b(0x51b)])return;if(!SceneManager[_0x1ce41b(0x37d)]())return;VisuMZ['ConvertParams'](_0x527100,_0x527100);const _0x15f867=VisuMZ[_0x1ce41b(0x865)](_0x527100[_0x1ce41b(0x39a)]);for(const _0x170547 of _0x15f867){if(!_0x170547)continue;_0x170547['removeHorrorEffect']('tv');}$gamePlayer[_0x1ce41b(0x928)]();}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x44c),_0x49f2ab=>{const _0xddf416=_0x16d1ef;if(!SceneManager[_0xddf416(0x37d)]())return;if(!Imported[_0xddf416(0x45c)])return;const _0x311ae2=SceneManager['_scene'][_0xddf416(0x71a)];if(!_0x311ae2)return;VisuMZ[_0xddf416(0x5ea)](_0x49f2ab,_0x49f2ab);const _0x41e16b=_0x49f2ab[_0xddf416(0xad9)]||0x1,_0x20f875=_0x49f2ab['Duration']||0x1,_0x3bf755=_0x49f2ab['EasingType']||_0xddf416(0x56c);_0x311ae2[_0xddf416(0x563)](_0x41e16b,_0x20f875,_0x3bf755);}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Impact_MotionBlurScreen',_0xc936bf=>{const _0x3f8e8c=_0x16d1ef;if(!SceneManager[_0x3f8e8c(0x37d)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x106291=SceneManager[_0x3f8e8c(0x438)][_0x3f8e8c(0x71a)];if(!_0x106291)return;VisuMZ[_0x3f8e8c(0x5ea)](_0xc936bf,_0xc936bf);const _0x16e0d1=Number(_0xc936bf[_0x3f8e8c(0x9fc)])||0x0,_0x1bc4a2=Number(_0xc936bf[_0x3f8e8c(0xaef)]),_0x57e959=_0xc936bf['Duration']||0x1,_0x2f1537=_0xc936bf[_0x3f8e8c(0x43c)]||_0x3f8e8c(0x56c);_0x106291[_0x3f8e8c(0x3fc)](_0x16e0d1,_0x1bc4a2,_0x57e959,_0x2f1537);}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x82e),_0x5343e9=>{const _0x3a6fdd=_0x16d1ef;if(!SceneManager[_0x3a6fdd(0x37d)]())return;if(!Imported[_0x3a6fdd(0x45c)])return;const _0x331216=SceneManager['_scene'][_0x3a6fdd(0x71a)];if(!_0x331216)return;VisuMZ[_0x3a6fdd(0x5ea)](_0x5343e9,_0x5343e9);const _0x461a6b=Number(_0x5343e9[_0x3a6fdd(0x9fc)])||0x0,_0x12223e=Number(_0x5343e9[_0x3a6fdd(0xaef)]),_0x531b84=_0x5343e9['Duration']||0x1,_0x2fa18b=_0x5343e9[_0x3a6fdd(0x43c)]||_0x3a6fdd(0x56c),_0xb83680=VisuMZ[_0x3a6fdd(0x865)](_0x5343e9['Targets']);for(const _0x3319c2 of _0xb83680){if(!_0x3319c2)continue;if(!_0x3319c2['battler']())continue;_0x3319c2[_0x3a6fdd(0xb02)]()['setupMotionBlurImpactFilter'](_0x461a6b,_0x12223e,_0x531b84,_0x2fa18b);}}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],'ActSeq_Impact_MotionTrailCreate',_0x54f283=>{const _0x429cd8=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x429cd8(0x45c)])return;VisuMZ['ConvertParams'](_0x54f283,_0x54f283);const _0x4bd992={'delay':_0x54f283[_0x429cd8(0x53c)],'duration':_0x54f283[_0x429cd8(0x6f5)],'hue':_0x54f283['hue'],'opacityStart':_0x54f283['opacityStart'],'tone':_0x54f283['tone'],'visible':!![]},_0x2cfc05=VisuMZ[_0x429cd8(0x865)](_0x54f283['Targets']);for(const _0x5e573b of _0x2cfc05){if(_0x429cd8(0xb73)!==_0x429cd8(0xb73))this['initialize'](...arguments);else{if(!_0x5e573b)continue;_0x5e573b['setBattlerMotionTrailData'](_0x4bd992);}}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Impact_MotionTrailRemove',_0x5e59ca=>{const _0x33f460=_0x16d1ef;if(!SceneManager[_0x33f460(0x37d)]())return;if(!Imported[_0x33f460(0x45c)])return;VisuMZ[_0x33f460(0x5ea)](_0x5e59ca,_0x5e59ca);const _0x28fc38=VisuMZ[_0x33f460(0x865)](_0x5e59ca[_0x33f460(0x39a)]);for(const _0x5e6d57 of _0x28fc38){if(!_0x5e6d57)continue;_0x5e6d57[_0x33f460(0xbe1)]();}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x199),_0x1287e9=>{const _0x1b8bca=_0x16d1ef;if(!Imported[_0x1b8bca(0x45c)])return;const _0x4f10db=SceneManager['_scene'][_0x1b8bca(0x71a)];if(!_0x4f10db)return;VisuMZ['ConvertParams'](_0x1287e9,_0x1287e9);const _0x3aaf2e=_0x1287e9['X']||0x0,_0x2c4f28=_0x1287e9['Y']||0x0,_0x21f006=_0x1287e9[_0x1b8bca(0x6a4)]||0x0,_0x122de7=_0x1287e9[_0x1b8bca(0x2aa)]||0x0,_0x563db6=_0x1287e9['Duration']||0x1;_0x4f10db[_0x1b8bca(0x75f)](_0x3aaf2e,_0x2c4f28,_0x21f006,_0x122de7,_0x563db6);}),PluginManager['registerCommand'](pluginData['name'],_0x16d1ef(0x99f),_0x475308=>{const _0x3be689=_0x16d1ef;if(!SceneManager[_0x3be689(0x37d)]())return;if(!Imported[_0x3be689(0x45c)])return;const _0x3d2dfb=SceneManager[_0x3be689(0x438)][_0x3be689(0x71a)];if(!_0x3d2dfb)return;VisuMZ['ConvertParams'](_0x475308,_0x475308);const _0x476038=VisuMZ[_0x3be689(0x865)](_0x475308['Targets']),_0x183ed2=_0x475308[_0x3be689(0x736)],_0x219aca=_0x475308[_0x3be689(0x2ff)]||0x0,_0x4bffcf=_0x475308[_0x3be689(0x91f)]||0x0,_0x2c0f04=_0x475308[_0x3be689(0x6a4)]||0x0,_0x484a3d=_0x475308[_0x3be689(0x2aa)]||0x0,_0x2b85d1=_0x475308['Duration']||0x1;for(const _0x46677b of _0x476038){if(!_0x46677b)continue;if(!_0x46677b[_0x3be689(0xb02)]())continue;const _0x2720ed=_0x46677b['battler']();let _0x9ed7bb=_0x2720ed[_0x3be689(0x37a)],_0x41b7cd=_0x2720ed[_0x3be689(0xb72)];_0x9ed7bb+=(Graphics[_0x3be689(0x7d5)]-Graphics[_0x3be689(0xb26)])/0x2,_0x41b7cd+=(Graphics[_0x3be689(0x842)]-Graphics[_0x3be689(0x6be)])/0x2;if(_0x183ed2[_0x3be689(0xaf1)](/front/i))_0x3be689(0x66b)===_0x3be689(0x7fc)?_0x5cf0fa=_0x11f2e6>=_0x51d1ba?_0x2e6728:_0x5eb8df:_0x9ed7bb+=(_0x46677b[_0x3be689(0x8fc)]()?0x1:-0x1)*_0x2720ed[_0x3be689(0x753)]()/0x2;else _0x183ed2['match'](/back/i)&&(_0x9ed7bb+=(_0x46677b['isEnemy']()?-0x1:0x1)*_0x2720ed[_0x3be689(0x753)]()/0x2);if(_0x183ed2['match'](/head/i))_0x41b7cd-=_0x2720ed[_0x3be689(0x584)]();else{if(_0x183ed2[_0x3be689(0xaf1)](/center/i)){if('LDpGo'!=='lXkkN')_0x41b7cd-=_0x2720ed['mainSpriteHeight']()/0x2;else return this[_0x3be689(0x9aa)]()['some'](_0x3e5533=>_0x3e5533[_0x3be689(0x876)]());}}_0x9ed7bb+=_0x219aca,_0x41b7cd+=_0x4bffcf,_0x3d2dfb[_0x3be689(0x75f)](_0x9ed7bb,_0x41b7cd,_0x2c0f04,_0x484a3d,_0x2b85d1);}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0xbc5),_0xbfd77=>{const _0x3eb84c=_0x16d1ef;if(!SceneManager[_0x3eb84c(0x37d)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2db7f8=SceneManager['_scene'][_0x3eb84c(0x71a)];if(!_0x2db7f8)return;VisuMZ[_0x3eb84c(0x5ea)](_0xbfd77,_0xbfd77);const _0x293e85=VisuMZ['CreateActionSequenceTargets'](_0xbfd77[_0x3eb84c(0x39a)]),_0x2fedf5=_0xbfd77[_0x3eb84c(0x736)],_0x28f533=_0xbfd77[_0x3eb84c(0x2ff)]||0x0,_0x872abf=_0xbfd77[_0x3eb84c(0x91f)]||0x0,_0x38c674=_0xbfd77[_0x3eb84c(0x6a4)]||0x0,_0x1f65e3=_0xbfd77['Wave']||0x0,_0x31891a=_0xbfd77[_0x3eb84c(0x9d1)]||0x1,_0x3e7514=Math[_0x3eb84c(0x457)](..._0x293e85[_0x3eb84c(0x526)](_0x1dbbc9=>_0x1dbbc9[_0x3eb84c(0xb02)]()[_0x3eb84c(0x37a)]-_0x1dbbc9[_0x3eb84c(0xb02)]()[_0x3eb84c(0x753)]()/0x2)),_0x197248=Math['max'](..._0x293e85[_0x3eb84c(0x526)](_0xd192ad=>_0xd192ad[_0x3eb84c(0xb02)]()[_0x3eb84c(0x37a)]+_0xd192ad[_0x3eb84c(0xb02)]()[_0x3eb84c(0x753)]()/0x2)),_0x3a9e49=Math['min'](..._0x293e85['map'](_0x1d2222=>_0x1d2222['battler']()[_0x3eb84c(0xb72)]-_0x1d2222[_0x3eb84c(0xb02)]()[_0x3eb84c(0x584)]())),_0x1b2661=Math[_0x3eb84c(0x26b)](..._0x293e85[_0x3eb84c(0x526)](_0x15acf3=>_0x15acf3[_0x3eb84c(0xb02)]()['_baseY'])),_0x1c917b=_0x293e85[_0x3eb84c(0x787)](_0x2fff4b=>_0x2fff4b['isActor']())[_0x3eb84c(0xa40)],_0x3e4904=_0x293e85[_0x3eb84c(0x787)](_0x346b97=>_0x346b97[_0x3eb84c(0x8fc)]())[_0x3eb84c(0xa40)];let _0x55b958=0x0,_0x3b7dd3=0x0;if(_0x2fedf5[_0x3eb84c(0xaf1)](/front/i)){if(_0x3eb84c(0x383)===_0x3eb84c(0x5f9)){_0x2d7d6c[_0x3eb84c(0xa5b)][_0x3eb84c(0x27c)][_0x3eb84c(0x2c7)](this,_0xa13dd4);if(this[_0x3eb84c(0x649)]())this[_0x3eb84c(0x491)](_0x21bdb4);}else _0x55b958=_0x1c917b>=_0x3e4904?_0x3e7514:_0x197248;}else{if(_0x2fedf5['match'](/middle/i))_0x55b958=(_0x3e7514+_0x197248)/0x2,melee=-0x1;else{if(_0x2fedf5[_0x3eb84c(0xaf1)](/back/i)){if(_0x3eb84c(0x268)!==_0x3eb84c(0x268))return _0x325585[_0x3eb84c(0x787)](_0x6c5d04=>_0x6c5d04[_0x3eb84c(0x341)]()&&_0x6c5d04!==_0x4de12c);else _0x55b958=_0x1c917b>=_0x3e4904?_0x197248:_0x3e7514;}}}if(_0x2fedf5[_0x3eb84c(0xaf1)](/head/i))_0x3b7dd3=_0x3a9e49;else{if(_0x2fedf5[_0x3eb84c(0xaf1)](/center/i))_0x3b7dd3=(_0x3a9e49+_0x1b2661)/0x2;else _0x2fedf5[_0x3eb84c(0xaf1)](/base/i)&&(_0x3b7dd3=_0x1b2661);}_0x55b958+=(Graphics[_0x3eb84c(0x7d5)]-Graphics['boxWidth'])/0x2,_0x3b7dd3+=(Graphics[_0x3eb84c(0x842)]-Graphics[_0x3eb84c(0x6be)])/0x2,_0x55b958+=_0x28f533,_0x3b7dd3+=_0x872abf,_0x2db7f8[_0x3eb84c(0x75f)](_0x55b958,_0x3b7dd3,_0x38c674,_0x1f65e3,_0x31891a);}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x465),_0x5b0d9b=>{const _0x1e8a2f=_0x16d1ef;if(!Imported[_0x1e8a2f(0x45c)])return;const _0x530138=SceneManager[_0x1e8a2f(0x438)][_0x1e8a2f(0x71a)];if(!_0x530138)return;VisuMZ[_0x1e8a2f(0x5ea)](_0x5b0d9b,_0x5b0d9b);const _0x23c5a8=_0x5b0d9b['X']||0x0,_0x46d829=_0x5b0d9b['Y']||0x0,_0x3178d2=_0x5b0d9b['Strength']||0x0,_0x2dcdf1=_0x5b0d9b[_0x1e8a2f(0x1bf)]||0x0,_0x2ce882=_0x5b0d9b['Duration']||0x1,_0x44c144=_0x5b0d9b[_0x1e8a2f(0x43c)]||_0x1e8a2f(0x56c);_0x530138[_0x1e8a2f(0x9a0)](_0x3178d2,_0x23c5a8,_0x46d829,_0x2dcdf1,_0x2ce882,_0x44c144);}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x737),_0x2d37e5=>{const _0x172817=_0x16d1ef;if(!Imported[_0x172817(0x45c)])return;const _0x55164e=SceneManager[_0x172817(0x438)]['_spriteset'];if(!_0x55164e)return;VisuMZ['ConvertParams'](_0x2d37e5,_0x2d37e5);const _0x3dc0fe=VisuMZ[_0x172817(0x865)](_0x2d37e5['Targets']),_0x41c7e0=_0x2d37e5[_0x172817(0x736)],_0x2d1f0e=_0x2d37e5[_0x172817(0x2ff)]||0x0,_0x2ead90=_0x2d37e5['OffsetY']||0x0,_0x51afd6=_0x2d37e5[_0x172817(0x22a)]||0x0,_0x313b91=_0x2d37e5[_0x172817(0x1bf)]||0x0,_0x32c5f5=_0x2d37e5[_0x172817(0x9d1)]||0x1,_0x18271b=_0x2d37e5[_0x172817(0x43c)]||_0x172817(0x56c),_0xc98a25=Math[_0x172817(0x457)](..._0x3dc0fe['map'](_0x14d81c=>_0x14d81c['battler']()[_0x172817(0x37a)]-_0x14d81c['battler']()[_0x172817(0x753)]()/0x2)),_0x44e985=Math[_0x172817(0x26b)](..._0x3dc0fe['map'](_0xf739e0=>_0xf739e0[_0x172817(0xb02)]()['_baseX']+_0xf739e0[_0x172817(0xb02)]()['mainSpriteWidth']()/0x2)),_0x48c396=Math[_0x172817(0x457)](..._0x3dc0fe[_0x172817(0x526)](_0x211a79=>_0x211a79[_0x172817(0xb02)]()['_baseY']-_0x211a79[_0x172817(0xb02)]()['mainSpriteHeight']())),_0x3624fa=Math[_0x172817(0x26b)](..._0x3dc0fe[_0x172817(0x526)](_0x21b5b5=>_0x21b5b5['battler']()[_0x172817(0xb72)])),_0x460aa4=_0x3dc0fe[_0x172817(0x787)](_0x17650b=>_0x17650b[_0x172817(0x71d)]())[_0x172817(0xa40)],_0x2b6416=_0x3dc0fe[_0x172817(0x787)](_0x22dde4=>_0x22dde4[_0x172817(0x8fc)]())[_0x172817(0xa40)];let _0x424e5d=0x0,_0x140fc0=0x0;if(_0x41c7e0[_0x172817(0xaf1)](/front/i))_0x424e5d=_0x460aa4>=_0x2b6416?_0xc98a25:_0x44e985;else{if(_0x41c7e0['match'](/middle/i))_0x424e5d=(_0xc98a25+_0x44e985)/0x2,melee=-0x1;else _0x41c7e0[_0x172817(0xaf1)](/back/i)&&(_0x424e5d=_0x460aa4>=_0x2b6416?_0x44e985:_0xc98a25);}if(_0x41c7e0[_0x172817(0xaf1)](/head/i))_0x140fc0=_0x48c396;else{if(_0x41c7e0[_0x172817(0xaf1)](/center/i))_0x140fc0=(_0x48c396+_0x3624fa)/0x2;else _0x41c7e0[_0x172817(0xaf1)](/base/i)&&(_0x140fc0=_0x3624fa);}_0x424e5d+=(Graphics['width']-Graphics[_0x172817(0xb26)])/0x2,_0x140fc0+=(Graphics[_0x172817(0x842)]-Graphics[_0x172817(0x6be)])/0x2,_0x424e5d+=_0x2d1f0e,_0x140fc0+=_0x2ead90,_0x55164e[_0x172817(0x9a0)](_0x51afd6,_0x424e5d,_0x140fc0,_0x313b91,_0x32c5f5,_0x18271b);}),PluginManager['registerCommand'](pluginData['name'],_0x16d1ef(0x695),_0x4f1f6a=>{const _0x4e405c=_0x16d1ef;if(!SceneManager[_0x4e405c(0x37d)]())return;VisuMZ[_0x4e405c(0x5ea)](_0x4f1f6a,_0x4f1f6a);const _0x2461c1=$gameTemp[_0x4e405c(0xb38)](),_0x5db526=BattleManager[_0x4e405c(0x7c5)],_0x237007=BattleManager[_0x4e405c(0x515)],_0x854791=BattleManager['_logWindow'];if(!_0x2461c1||!_0x5db526||!_0x237007)return;if(!_0x5db526[_0x4e405c(0x74a)]())return;const _0x2aa923=VisuMZ[_0x4e405c(0x865)](_0x4f1f6a[_0x4e405c(0x39a)]);for(const _0x5af666 of _0x2aa923){if(!_0x5af666)continue;_0x854791[_0x4e405c(0x8ad)](_0x4e405c(0x6db),_0x237007,_0x5af666);}_0x2461c1[_0x4e405c(0x13b)](_0x4e405c(0xa3b));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0xb57),_0x1dac43=>{const _0x30ef6e=_0x16d1ef;if(!SceneManager[_0x30ef6e(0x37d)]())return;VisuMZ[_0x30ef6e(0x5ea)](_0x1dac43,_0x1dac43);const _0x1a166c=[_0x30ef6e(0x4dd),_0x30ef6e(0x395),'ATK',_0x30ef6e(0xa52),_0x30ef6e(0x8af),_0x30ef6e(0x628),_0x30ef6e(0xb85),_0x30ef6e(0x517)],_0x1fbe2a=_0x1dac43[_0x30ef6e(0x1e2)],_0x5c642b=_0x1dac43[_0x30ef6e(0x32c)],_0x3c7ac1=_0x1dac43[_0x30ef6e(0xb50)],_0x340c9c=VisuMZ[_0x30ef6e(0x865)](_0x1dac43['Targets']);for(const _0x5fd43a of _0x340c9c){if(!_0x5fd43a)continue;for(const _0x41483d of _0x1fbe2a){if('xILHL'===_0x30ef6e(0x97f)){const _0x3ffc99=this[_0x30ef6e(0x1e3)];if(_0x3ffc99[_0x151dc0])return _0x3ffc99[_0x3af8d3];else{const _0x34db02=new _0x4aba1c();return _0x3ffc99[_0x3824c8]=_0x34db02,this[_0x30ef6e(0xab3)](_0x34db02),this[_0x30ef6e(0xab3)](this[_0x30ef6e(0x3a5)]),_0x34db02;}}else{const _0x7e0712=_0x1a166c[_0x30ef6e(0x6f3)](_0x41483d[_0x30ef6e(0xaff)]()[_0x30ef6e(0x699)]());_0x7e0712>=0x0&&_0x7e0712<=0x7&&_0x5fd43a['addBuff'](_0x7e0712,_0x3c7ac1);}}for(const _0x491f14 of _0x5c642b){const _0x265175=_0x1a166c['indexOf'](_0x491f14[_0x30ef6e(0xaff)]()[_0x30ef6e(0x699)]());if(_0x265175>=0x0&&_0x265175<=0x7){if(_0x30ef6e(0x9f0)!=='vDmby')_0x5fd43a[_0x30ef6e(0xa58)](_0x265175,_0x3c7ac1);else{const _0x585205=_0x14b13b[_0x356a7f[_0x30ef6e(0x5fa)]],_0x586d0a=_0x585205[_0x30ef6e(0x85a)]['length']-0x2,_0x25a5f8=_0x585205['list'][_0x586d0a];if(_0x25a5f8&&_0x25a5f8[_0x30ef6e(0x5b5)]!==0xe6){const _0x5144d5={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x10f09a=_0x585205[_0x30ef6e(0x85a)][_0x30ef6e(0x7dc)]();_0x585205['list']['unshift'](_0x5144d5),_0x585205[_0x30ef6e(0x85a)][_0x30ef6e(0xaa3)](_0x10f09a);}}}}}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x2d5),_0x582222=>{const _0x40d547=_0x16d1ef;if(!SceneManager[_0x40d547(0x37d)]())return;VisuMZ[_0x40d547(0x5ea)](_0x582222,_0x582222);const _0x3d49d3=_0x582222['States'],_0x55543f=VisuMZ[_0x40d547(0x865)](_0x582222[_0x40d547(0x39a)]);for(const _0x3bfea3 of _0x55543f){if(_0x40d547(0x86b)===_0x40d547(0x47f)){const _0x599b86=_0x15d441['VisuMZ_1_SkillsStatesCore']?_0x13dcaa['SkillsStatesCore'][_0x40d547(0x58d)][_0x40d547(0x23c)]:_0x24475e['BattleCore'][_0x40d547(0x58d)][_0x40d547(0x6c1)],_0x3347ad=_0x32cce7[_0x40d547(0x218)][_0x40d547(0x4f8)](_0xffe257),_0x3e62d4=_0x3347ad?_0x599b86['IconStypeMagic']:_0x599b86[_0x40d547(0x233)];_0x592171=_0x40d547(0x7f7)['format'](_0x3e62d4,_0x1851de);}else{if(!_0x3bfea3)continue;for(const _0x1a4025 of _0x3d49d3){_0x3bfea3[_0x40d547(0x967)](_0x1a4025);}}}}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x3e7),_0x27f852=>{const _0x3dfc80=_0x16d1ef;if(!SceneManager[_0x3dfc80(0x37d)]())return;VisuMZ[_0x3dfc80(0x5ea)](_0x27f852,_0x27f852);const _0x128b03=BattleManager[_0x3dfc80(0x7c5)],_0x1c0a0a={'arPenRate':_0x27f852['ArPenRate'],'arPenFlat':_0x27f852[_0x3dfc80(0x2b4)],'arRedRate':_0x27f852[_0x3dfc80(0xa54)],'arRedFlat':_0x27f852['ArRedFlat']};_0x128b03['_armorPenetration']=_0x1c0a0a;}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x1df),_0x42b5c0=>{const _0x1427cb=_0x16d1ef;if(!SceneManager[_0x1427cb(0x37d)]())return;if(!Imported[_0x1427cb(0x5c3)])return;VisuMZ[_0x1427cb(0x5ea)](_0x42b5c0,_0x42b5c0);const _0x348da9=VisuMZ[_0x1427cb(0x865)](_0x42b5c0['Targets']),_0x894834=_0x42b5c0[_0x1427cb(0x45f)]||0x1;for(const _0xe994e7 of _0x348da9){if(!_0xe994e7)continue;if(!_0xe994e7[_0x1427cb(0x8fc)]())continue;_0xe994e7['revealNewWeaknesses'](_0x894834);}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x19d),_0x2dc383=>{const _0x2c00ce=_0x16d1ef;if(!SceneManager[_0x2c00ce(0x37d)]())return;if(!Imported[_0x2c00ce(0x276)])return;if(!BattleManager['isATB']())return;VisuMZ['ConvertParams'](_0x2dc383,_0x2dc383);const _0x25c40c=VisuMZ['CreateActionSequenceTargets'](_0x2dc383[_0x2c00ce(0x39a)]),_0x4838c3=_0x2dc383[_0x2c00ce(0x9ee)],_0x3b8563=_0x2dc383['ChargeRate'],_0x26ba15=_0x2dc383[_0x2c00ce(0xaf8)];for(const _0x14280f of _0x25c40c){if(!_0x14280f)continue;if(_0x14280f['isAtbChargingState']())_0x14280f[_0x2c00ce(0x27f)](_0x4838c3);else{if(_0x14280f[_0x2c00ce(0x9fd)]()){_0x14280f[_0x2c00ce(0x603)](_0x3b8563);if(_0x26ba15)_0x14280f[_0x2c00ce(0xad5)]();}}}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Mechanics_BoostPointsChange',_0x1002d9=>{const _0x591c61=_0x16d1ef;if(!SceneManager[_0x591c61(0x37d)]())return;if(!Imported[_0x591c61(0x191)])return;VisuMZ[_0x591c61(0x5ea)](_0x1002d9,_0x1002d9);const _0x1d37a5=VisuMZ[_0x591c61(0x865)](_0x1002d9['Targets']),_0x37a974=_0x1002d9[_0x591c61(0x996)];for(const _0x103375 of _0x1d37a5){if('fwAlH'!==_0x591c61(0x9e7)){let _0x42bce4=_0x1851ef[_0x591c61(0x8c3)][_0x591c61(0x6d3)][_0x591c61(0x2c7)](this),_0x2a9a76=_0x23d010[_0x591c61(0x8c3)][_0x591c61(0x58d)][_0x591c61(0x6c4)]['PopupOffsetX']||0x0;return _0x2f8faa[_0x591c61(0x5d9)](_0x42bce4+_0x2a9a76);}else{if(!_0x103375)continue;_0x103375[_0x591c61(0x1f3)](_0x37a974);}}}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x71f),_0x36bc03=>{const _0x2bd2af=_0x16d1ef;if(!SceneManager[_0x2bd2af(0x37d)]())return;if(!Imported[_0x2bd2af(0x191)])return;if(!BattleManager[_0x2bd2af(0x515)])return;VisuMZ[_0x2bd2af(0x5ea)](_0x36bc03,_0x36bc03);const _0x24290b=_0x36bc03['VariableID'];$gameVariables[_0x2bd2af(0x6d6)](_0x24290b,BattleManager[_0x2bd2af(0x515)]['toUseBoostPoints']());}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0xae2),_0x3ec821=>{const _0x53e802=_0x16d1ef;if(!SceneManager[_0x53e802(0x37d)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ['ConvertParams'](_0x3ec821,_0x3ec821);const _0x42416c=VisuMZ[_0x53e802(0x865)](_0x3ec821[_0x53e802(0x39a)]),_0x172ffd=_0x3ec821[_0x53e802(0xa0a)];for(const _0x56c395 of _0x42416c){if('kTTHy'==='kTTHy'){if(!_0x56c395)continue;if(_0x56c395[_0x53e802(0x29a)]())continue;if(!_0x56c395[_0x53e802(0x83f)]())continue;_0x56c395[_0x53e802(0x2f2)](_0x172ffd);}else{if(this[_0x53e802(0x965)][_0x53e802(0x822)]!==_0x275de6)return this['_cache']['svAnchorY'];return this['actor']()[_0x53e802(0x954)][_0x53e802(0xaf1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x53e802(0x388)]=_0x12009e(_0x5d3812['$1']),this[_0x53e802(0x965)][_0x53e802(0x822)]=_0x52e27c(_0x12fce1['$2'])):this['_cache'][_0x53e802(0x822)]=_0x594af7[_0x53e802(0xa5b)][_0x53e802(0x75c)][_0x53e802(0x2c7)](this),this[_0x53e802(0x965)][_0x53e802(0x822)];}}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Mechanics_BreakShieldReset',_0x3ac103=>{const _0x1498a2=_0x16d1ef;if(!SceneManager[_0x1498a2(0x37d)]())return;if(!Imported[_0x1498a2(0x446)])return;VisuMZ[_0x1498a2(0x5ea)](_0x3ac103,_0x3ac103);const _0x4c53af=VisuMZ['CreateActionSequenceTargets'](_0x3ac103[_0x1498a2(0x39a)]);for(const _0x475b0b of _0x4c53af){if(_0x1498a2(0x614)===_0x1498a2(0x82f)){if(_0x50c060===_0x20cb81['deathStateId']()){let _0x5a3a6b=_0x1c1ce5[_0x1498a2(0x8eb)];_0x5a3a6b*=_0x3915f8[_0x1498a2(0x47b)](_0x2d1edc),_0x5a3a6b*=this[_0x1498a2(0x4db)]()[_0x1498a2(0x271)](_0x171f3b),_0x5a3a6b*=this[_0x1498a2(0x56d)](_0x22331d),_0x2d2884[_0x1498a2(0x432)]()<_0x5a3a6b&&(_0x2d1b87[_0x1498a2(0x4bf)]=!![],this[_0x1498a2(0x9c7)](_0x3b6897));}}else{if(!_0x475b0b)continue;if(_0x475b0b[_0x1498a2(0x29a)]())continue;if(!_0x475b0b[_0x1498a2(0x83f)]())continue;_0x475b0b['resetBreakShield']();}}}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x433),_0x2a0c88=>{const _0x2bf813=_0x16d1ef;if(!SceneManager[_0x2bf813(0x37d)]())return;if(!Imported[_0x2bf813(0x6df)])return;if(!BattleManager[_0x2bf813(0xa7f)]())return;VisuMZ['ConvertParams'](_0x2a0c88,_0x2a0c88);const _0x24d05=VisuMZ[_0x2bf813(0x865)](_0x2a0c88[_0x2bf813(0x39a)]),_0x3db0ae=_0x2a0c88[_0x2bf813(0x9eb)];for(const _0x5d10c1 of _0x24d05){if(!_0x5d10c1)continue;_0x5d10c1[_0x2bf813(0x176)](_0x3db0ae);}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x724),_0x2fe31c=>{const _0x3a9fd0=_0x16d1ef;if(!SceneManager[_0x3a9fd0(0x37d)]())return;VisuMZ['ConvertParams'](_0x2fe31c,_0x2fe31c);const _0x472842=$gameTemp[_0x3a9fd0(0xb38)](),_0x4aeec4=BattleManager[_0x3a9fd0(0x7c5)],_0x3e1a54=BattleManager[_0x3a9fd0(0x515)];if(!_0x472842||!_0x4aeec4||!_0x3e1a54)return;if(!_0x4aeec4[_0x3a9fd0(0x74a)]())return;const _0x2a65ff=VisuMZ[_0x3a9fd0(0x865)](_0x2fe31c['Targets']);for(const _0x30b687 of _0x2a65ff){if(!_0x30b687)continue;_0x2fe31c[_0x3a9fd0(0x490)]&&(_0x30b687[_0x3a9fd0(0x921)](),_0x30b687[_0x3a9fd0(0x967)](_0x30b687[_0x3a9fd0(0x493)]())),_0x30b687[_0x3a9fd0(0x497)]()&&(_0x3a9fd0(0xa2a)===_0x3a9fd0(0xa2a)?_0x30b687[_0x3a9fd0(0x6e8)]():this[_0x3a9fd0(0x587)]());}_0x472842['setWaitMode'](_0x3a9fd0(0x7bf));}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x9af),_0xdbd591=>{const _0x544fed=_0x16d1ef;if(!SceneManager[_0x544fed(0x37d)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x544fed(0x5fb)]())return;VisuMZ[_0x544fed(0x5ea)](_0xdbd591,_0xdbd591);const _0x2837be=VisuMZ[_0x544fed(0x865)](_0xdbd591[_0x544fed(0x39a)]),_0x3dbc39=_0xdbd591['ChangeOrderBy'];for(const _0x8193e4 of _0x2837be){if(!_0x8193e4)continue;_0x8193e4[_0x544fed(0x2a1)](_0x3dbc39);}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x831),_0xc56773=>{const _0x2551b3=_0x16d1ef;if(!SceneManager[_0x2551b3(0x37d)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x2551b3(0x5fb)]())return;VisuMZ[_0x2551b3(0x5ea)](_0xc56773,_0xc56773);const _0xef6baf=VisuMZ[_0x2551b3(0x865)](_0xc56773[_0x2551b3(0x39a)]),_0x1f3578=_0xc56773['ChargeRate'],_0x3c3b0c=_0xc56773[_0x2551b3(0x9ee)];for(const _0x5ecb48 of _0xef6baf){if(!_0x5ecb48)continue;if(_0x5ecb48[_0x2551b3(0x441)]==='charging')_0x5ecb48['changeCtbChargeTime'](_0x1f3578);else _0x5ecb48[_0x2551b3(0x441)]==='casting'&&_0x5ecb48[_0x2551b3(0x5e6)](_0x3c3b0c);}}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0xbc0),_0x3c7b7d=>{const _0x114c32=_0x16d1ef;if(!SceneManager[_0x114c32(0x37d)]())return;VisuMZ[_0x114c32(0x5ea)](_0x3c7b7d,_0x3c7b7d);const _0xeb2b7e=BattleManager[_0x114c32(0x7c5)];if(!_0xeb2b7e)return;let _0x231c07=_0x3c7b7d['Formula'];_0xeb2b7e['setCustomDamageFormula'](_0x231c07);}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x480),_0xa9b0a3=>{const _0x3b3c03=_0x16d1ef;if(!SceneManager[_0x3b3c03(0x37d)]())return;VisuMZ[_0x3b3c03(0x5ea)](_0xa9b0a3,_0xa9b0a3);const _0x55a8ff=VisuMZ[_0x3b3c03(0x865)](_0xa9b0a3[_0x3b3c03(0x39a)]);for(const _0x1fb4bf of _0x55a8ff){if(!_0x1fb4bf)continue;if(_0x1fb4bf[_0x3b3c03(0x727)]())_0x1fb4bf[_0x3b3c03(0x2df)]();}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x992),_0x36a58b=>{const _0x9f2dfa=_0x16d1ef;if(!SceneManager[_0x9f2dfa(0x37d)]())return;VisuMZ[_0x9f2dfa(0x5ea)](_0x36a58b,_0x36a58b);const _0x135cb1=$gameTemp[_0x9f2dfa(0xb38)](),_0x32ea12=BattleManager[_0x9f2dfa(0x515)],_0xe79fa=_0x36a58b[_0x9f2dfa(0x184)];if(!_0x135cb1)return;if(!_0x32ea12)return;_0x32ea12&&_0x32ea12[_0x9f2dfa(0x8ae)]()&&_0xe79fa[_0x9f2dfa(0xaff)]()[_0x9f2dfa(0x699)]()!==_0x9f2dfa(0x781)&&_0x135cb1[_0x9f2dfa(0x70c)]([_0xe79fa]);}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x7a5),_0x4bc31e=>{const _0x207053=_0x16d1ef;if(!SceneManager[_0x207053(0x37d)]())return;VisuMZ['ConvertParams'](_0x4bc31e,_0x4bc31e);const _0x265b7f=VisuMZ['CreateActionSequenceTargets'](_0x4bc31e[_0x207053(0x39a)]);for(const _0x2649ad of _0x265b7f){if(_0x207053(0x2b5)!==_0x207053(0xb70)){if(!_0x2649ad)continue;if(!_0x2649ad[_0x207053(0x8fc)]())continue;_0x2649ad[_0x207053(0x77a)]();}else _0x44ec82=_0x40de7e[_0x207053(0xb02)]()[_0x207053(0x953)],_0x3e8771=_0x418122[_0x207053(0xb02)]()['_homeY'];}}),PluginManager['registerCommand'](pluginData['name'],_0x16d1ef(0x82b),_0x504dd9=>{const _0x2a2fc9=_0x16d1ef;if(!SceneManager[_0x2a2fc9(0x37d)]())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager[_0x2a2fc9(0x214)]())return;VisuMZ[_0x2a2fc9(0x5ea)](_0x504dd9,_0x504dd9);const _0x3d76c5=_0x504dd9[_0x2a2fc9(0x8d8)];BattleManager[_0x2a2fc9(0x515)]&&BattleManager[_0x2a2fc9(0x515)][_0x2a2fc9(0xadb)]()[_0x2a2fc9(0x5bc)](_0x3d76c5);}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0xa8b),_0x2e718d=>{const _0x59f75f=_0x16d1ef;if(!SceneManager[_0x59f75f(0x37d)]())return;if(!Imported[_0x59f75f(0x5ad)])return;if(!BattleManager[_0x59f75f(0x175)]())return;VisuMZ[_0x59f75f(0x5ea)](_0x2e718d,_0x2e718d);const _0x1fe2fe=_0x2e718d['ActionCount'];BattleManager[_0x59f75f(0x515)]&&BattleManager[_0x59f75f(0x515)][_0x59f75f(0xadb)]()[_0x59f75f(0x499)](_0x1fe2fe);}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Mechanics_HpMpTp',_0x479187=>{const _0x18e8ae=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x18e8ae(0x5ea)](_0x479187,_0x479187);const _0xf93cb5=VisuMZ['CreateActionSequenceTargets'](_0x479187['Targets']),_0xdefaea=_0x479187[_0x18e8ae(0x6f1)],_0x34dc52=_0x479187[_0x18e8ae(0x44b)],_0x53708d=_0x479187[_0x18e8ae(0x1a5)],_0x56d419=_0x479187[_0x18e8ae(0xb69)],_0x26d763=_0x479187[_0x18e8ae(0x6ee)],_0x6d2a9f=_0x479187['TP_Flat'],_0x6b90ac=_0x479187[_0x18e8ae(0xbd8)];for(const _0x136ad9 of _0xf93cb5){if(_0x18e8ae(0x3db)===_0x18e8ae(0x3db)){if(!_0x136ad9)continue;const _0x4773c1=_0x136ad9[_0x18e8ae(0x341)](),_0x199596=Math[_0x18e8ae(0x5d9)](_0xdefaea*_0x136ad9[_0x18e8ae(0x770)]+_0x34dc52),_0x346593=Math[_0x18e8ae(0x5d9)](_0x53708d*_0x136ad9[_0x18e8ae(0x535)]+_0x56d419),_0x47c0e1=Math[_0x18e8ae(0x5d9)](_0x26d763*_0x136ad9['maxTp']()+_0x6d2a9f);if(_0x199596!==0x0)_0x136ad9[_0x18e8ae(0x140)](_0x199596);if(_0x346593!==0x0)_0x136ad9[_0x18e8ae(0x2bd)](_0x346593);if(_0x47c0e1!==0x0)_0x136ad9[_0x18e8ae(0x182)](_0x47c0e1);if(_0x6b90ac)_0x136ad9[_0x18e8ae(0x2df)]();_0x4773c1&&_0x136ad9[_0x18e8ae(0x8ae)]()&&_0x136ad9['performCollapse']();}else{if(this[_0x18e8ae(0xb42)]())return;this[_0x18e8ae(0x96d)](),this[_0x18e8ae(0x866)][_0x18e8ae(0x706)](_0x917c4a),this[_0x18e8ae(0x316)]['clearWeaponAnimation']();}}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Mechanics_Immortal',_0x471f10=>{const _0x3cb396=_0x16d1ef;if(!SceneManager[_0x3cb396(0x37d)]())return;VisuMZ[_0x3cb396(0x5ea)](_0x471f10,_0x471f10);const _0x106b68=VisuMZ['CreateActionSequenceTargets'](_0x471f10['Targets']);for(const _0x4df6f2 of _0x106b68){if(!_0x4df6f2)continue;_0x4df6f2[_0x3cb396(0x29d)](_0x471f10[_0x3cb396(0xb0b)]);}}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x6a3),_0x9ccf6c=>{const _0x36f655=_0x16d1ef;if(!SceneManager[_0x36f655(0x37d)]())return;VisuMZ['ConvertParams'](_0x9ccf6c,_0x9ccf6c);const _0x2b6e5e=BattleManager['_action'],_0x73e2c={'criticalHitRate':_0x9ccf6c[_0x36f655(0xb25)],'criticalHitFlat':_0x9ccf6c['CriticalHitFlat'],'criticalDmgRate':_0x9ccf6c[_0x36f655(0xb52)],'criticalDmgFlat':_0x9ccf6c['CriticalDmgFlat'],'damageRate':_0x9ccf6c[_0x36f655(0x5cd)],'damageFlat':_0x9ccf6c[_0x36f655(0x985)],'hitRate':_0x9ccf6c[_0x36f655(0xbd7)],'hitFlat':_0x9ccf6c[_0x36f655(0x3a3)]};_0x2b6e5e['_multipliers']=_0x73e2c;}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x17c),_0x54480e=>{const _0xc8d4dc=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x54480e,_0x54480e);const _0x1f83c3=_0x54480e[_0xc8d4dc(0x220)];SceneManager['_scene']['playOnceParallelInterpreter'](_0x1f83c3);}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Mechanics_OtbOrder',_0x1303b0=>{const _0x35e1e5=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x35e1e5(0x86f)])return;if(!BattleManager[_0x35e1e5(0x299)]())return;VisuMZ[_0x35e1e5(0x5ea)](_0x1303b0,_0x1303b0);const _0x3ac5a6=VisuMZ[_0x35e1e5(0x865)](_0x1303b0[_0x35e1e5(0x39a)]);for(const _0x597324 of _0x3ac5a6){if('xdNJq'==='IktkL'){const _0x15195e=_0x35e1e5(0x678)[_0x35e1e5(0x86a)](_0x21d2ed);_0x4ebf04['BattleCore']['JS'][_0xb6bc8b]=new _0x592c4c(_0x15195e);}else{if(!_0x597324)continue;let _0x49202f=_0x1303b0[_0x35e1e5(0x760)],_0xecbf29=_0x1303b0[_0x35e1e5(0xb7d)],_0x3465a6=_0x1303b0[_0x35e1e5(0x566)];BattleManager[_0x35e1e5(0x934)][_0x35e1e5(0x4f8)](_0x597324)?_0x49202f+=_0x3465a6:'CniCa'!==_0x35e1e5(0x356)?_0xecbf29+=_0x3465a6:this[_0x35e1e5(0x862)](_0x35e1e5(0x21e)),BattleManager['turnOrderChangeOTB'](_0x597324,-_0x49202f,![]),BattleManager[_0x35e1e5(0x856)](_0x597324,-_0xecbf29,!![]);}}}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Mechanics_PtbAlterCost',_0x1054ba=>{const _0x50698c=_0x16d1ef;if(!SceneManager[_0x50698c(0x37d)]())return;if(!Imported[_0x50698c(0x3f7)])return;if(!BattleManager[_0x50698c(0xa9c)]())return;VisuMZ[_0x50698c(0x5ea)](_0x1054ba,_0x1054ba);const _0x1c0ed2=BattleManager[_0x50698c(0x515)][_0x50698c(0xadb)](),_0x19898b=_0x1054ba[_0x50698c(0x790)],_0x5d48f6=_0x1054ba['alterChange']||_0x50698c(0x2c9),_0x4cf94b=_0x1054ba[_0x50698c(0x408)]||_0x50698c(0x2c9),_0x443444=_0x1054ba[_0x50698c(0x46c)]||0x0,_0x37da7c=_0x1054ba['alterPriority']||0x0;(_0x1c0ed2[_0x50698c(0x6f8)]()||_0x19898b)&&(_0x19898b&&(_0x50698c(0xacb)!==_0x50698c(0xacb)?_0x3b99ab=_0x3fe623>=_0x1e627f?_0x2fc7ad:_0x1b3c46:(_0x1c0ed2['_ptbActionCost']=_0x1c0ed2[_0x50698c(0x6f4)]||{},_0x1c0ed2['_ptbActionCost'][_0x50698c(0x7aa)]=0x0)),_0x1c0ed2[_0x50698c(0x2e3)](_0x5d48f6,_0x4cf94b,_0x443444,_0x37da7c));}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],'ActSeq_Mechanics_PtbConvert',_0x220236=>{const _0x34c529=_0x16d1ef;if(!SceneManager[_0x34c529(0x37d)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x34c529(0xa9c)]())return;VisuMZ[_0x34c529(0x5ea)](_0x220236,_0x220236);const _0x1f188a=BattleManager[_0x34c529(0x515)]['friendsUnit']();let _0x5013b6=Math['max'](_0x220236[_0x34c529(0xbad)],0x0),_0xbf256a=_0x1f188a[_0x34c529(0x857)](),_0x2203d7=_0x1f188a[_0x34c529(0x8e7)]();while(_0x5013b6--){if(_0x34c529(0xb82)===_0x34c529(0xb82)){if(_0xbf256a<=0x0&&_0x2203d7<=0x0){if(_0x34c529(0x80c)!==_0x34c529(0x80c))_0x6b24fd['prototype']['performCounter'][_0x34c529(0x2c7)](this),this[_0x34c529(0x406)]();else break;}else _0xbf256a>0x0?_0x34c529(0x2b9)===_0x34c529(0x5c2)?(this[_0x34c529(0x156)][_0x34c529(0x7d0)]['x']=this[_0x34c529(0xbdd)],this[_0x34c529(0x156)][_0x34c529(0x7d0)]['y']=this[_0x34c529(0x1ff)]):(_0xbf256a--,_0x2203d7++):'xcQKG'==='xcQKG'?_0x2203d7--:_0x3d783f['startWeaponAnimation'](0x0);}else this['subject']()&&this[_0x34c529(0x4db)]()[_0x34c529(0xa8d)]()?_0x708b7d[_0x34c529(0x8c3)][_0x34c529(0x72a)][_0x34c529(0x2c7)](this):this[_0x34c529(0x721)]();}_0x1f188a[_0x34c529(0x1d0)](_0xbf256a),_0x1f188a[_0x34c529(0xa4b)](_0x2203d7);}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x355),_0x3df6cf=>{const _0xd08b33=_0x16d1ef;if(!SceneManager[_0xd08b33(0x37d)]())return;if(!Imported[_0xd08b33(0x3f7)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0xd08b33(0x5ea)](_0x3df6cf,_0x3df6cf);const _0x509eb7=BattleManager[_0xd08b33(0x515)]['friendsUnit']();let _0x52abb4=_0x3df6cf[_0xd08b33(0xa09)],_0x2c6531=_0x3df6cf[_0xd08b33(0x4e1)];_0x509eb7[_0xd08b33(0x9c4)](_0x52abb4),_0x509eb7[_0xd08b33(0xae8)](_0x2c6531);}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x606),_0xf1917b=>{const _0x56ff72=_0x16d1ef;if(!SceneManager[_0x56ff72(0x37d)]())return;VisuMZ[_0x56ff72(0x5ea)](_0xf1917b,_0xf1917b);const _0x4440a8=[_0x56ff72(0x4dd),'MAXMP','ATK',_0x56ff72(0xa52),'MAT',_0x56ff72(0x628),_0x56ff72(0xb85),_0x56ff72(0x517)],_0x19aaf4=_0xf1917b[_0x56ff72(0x1e2)],_0x4449ee=_0xf1917b[_0x56ff72(0x32c)],_0x570bd2=VisuMZ[_0x56ff72(0x865)](_0xf1917b[_0x56ff72(0x39a)]);for(const _0x3f8607 of _0x570bd2){if(!_0x3f8607)continue;for(const _0x11c0b9 of _0x19aaf4){const _0x21ba1c=_0x4440a8['indexOf'](_0x11c0b9[_0x56ff72(0xaff)]()[_0x56ff72(0x699)]());_0x21ba1c>=0x0&&_0x21ba1c<=0x7&&_0x3f8607['isBuffAffected'](_0x21ba1c)&&_0x3f8607[_0x56ff72(0x7f2)](_0x21ba1c);}for(const _0xfbefc of _0x4449ee){const _0x29b5c8=_0x4440a8['indexOf'](_0xfbefc['toUpperCase']()['trim']());_0x29b5c8>=0x0&&_0x29b5c8<=0x7&&_0x3f8607[_0x56ff72(0x537)](_0x29b5c8)&&_0x3f8607[_0x56ff72(0x7f2)](_0x29b5c8);}}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x14a),_0x2be3b6=>{const _0x577c16=_0x16d1ef;if(!SceneManager[_0x577c16(0x37d)]())return;VisuMZ[_0x577c16(0x5ea)](_0x2be3b6,_0x2be3b6);const _0x272489=_0x2be3b6[_0x577c16(0x258)],_0x59f1ca=VisuMZ[_0x577c16(0x865)](_0x2be3b6[_0x577c16(0x39a)]);for(const _0x2988d7 of _0x59f1ca){if(!_0x2988d7)continue;for(const _0x5890dc of _0x272489){_0x2988d7[_0x577c16(0x811)](_0x5890dc);}}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x67a),_0x4405a5=>{const _0x495121=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x495121(0x14d)])return;if(!BattleManager['isSTB']())return;VisuMZ['ConvertParams'](_0x4405a5,_0x4405a5);const _0x1fafd5=_0x4405a5['Exploited'],_0x16ffc9=VisuMZ[_0x495121(0x865)](_0x4405a5[_0x495121(0x39a)]),_0x12f435=_0x4405a5[_0x495121(0x2e4)],_0x1cae2b=_0x4405a5[_0x495121(0xae4)],_0xbe2877=_0x4405a5[_0x495121(0x89f)],_0x40ce64=BattleManager[_0x495121(0x7c5)];if(_0x1fafd5){if(_0x495121(0x700)==='LXuXZ')for(const _0x42b37b of _0x16ffc9){if(!_0x42b37b)continue;if(_0x42b37b===user)continue;if(_0x12f435)_0x42b37b[_0x495121(0xa8c)](![]);_0x42b37b[_0x495121(0x923)](BattleManager[_0x495121(0x515)],_0x40ce64);}else _0x1955e1--;}if(_0x1cae2b&&BattleManager[_0x495121(0x515)]){if('UEScX'!=='UEScX')return this['currentAction']()&&this[_0x495121(0x27b)]()[_0x495121(0x74a)]()&&this[_0x495121(0x27b)]()[_0x495121(0x151)]();else{if(_0xbe2877)BattleManager[_0x495121(0x515)][_0x495121(0xa8c)](![]);const _0x5980ab=_0x16ffc9[0x0];BattleManager[_0x495121(0x661)](_0x5980ab,_0x40ce64);}}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Mechanics_StbExtraAction',_0x4b4147=>{const _0x4425ad=_0x16d1ef;if(!SceneManager[_0x4425ad(0x37d)]())return;if(!Imported[_0x4425ad(0x14d)])return;if(!BattleManager[_0x4425ad(0x264)]())return;VisuMZ[_0x4425ad(0x5ea)](_0x4b4147,_0x4b4147);const _0x44c9bb=_0x4b4147[_0x4425ad(0x740)];BattleManager[_0x4425ad(0x515)]&&BattleManager[_0x4425ad(0x515)]['stbGainInstant'](_0x44c9bb);}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Mechanics_StbRemoveExcessActions',_0x4a5a48=>{const _0x4a0ed2=_0x16d1ef;if(!SceneManager[_0x4a0ed2(0x37d)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x4a0ed2(0x264)]())return;VisuMZ[_0x4a0ed2(0x5ea)](_0x4a5a48,_0x4a5a48);let _0x53fd53=_0x4a5a48[_0x4a0ed2(0x740)];if(BattleManager[_0x4a0ed2(0x515)]){BattleManager[_0x4a0ed2(0x515)][_0x4a0ed2(0x800)]=BattleManager['_subject'][_0x4a0ed2(0x800)]||[];while(_0x53fd53--){if(BattleManager[_0x4a0ed2(0x515)][_0x4a0ed2(0x800)][_0x4a0ed2(0xa40)]<=0x0)break;BattleManager[_0x4a0ed2(0x515)][_0x4a0ed2(0x800)][_0x4a0ed2(0x444)]();}}}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x690),_0x8eeb0c=>{const _0x4416b5=_0x16d1ef;if(!SceneManager[_0x4416b5(0x37d)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x4416b5(0x5ea)](_0x8eeb0c,_0x8eeb0c);const _0x187182=VisuMZ[_0x4416b5(0x865)](_0x8eeb0c[_0x4416b5(0x39a)]),_0x3307d0=_0x8eeb0c[_0x4416b5(0x5d2)];for(const _0x54033d of _0x187182){if('xjcCc'!==_0x4416b5(0xb31)){if(!_0x54033d)continue;if(!_0x54033d[_0x4416b5(0x71d)]())continue;_0x54033d[_0x4416b5(0x34e)](_0x3307d0);}else _0x3e2e84[_0x4416b5(0x8c3)][_0x4416b5(0x27e)](_0x10642b,_0x2da7fe);}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Mechanics_TextPopup',_0x5d70b7=>{const _0x46047c=_0x16d1ef;if(!SceneManager[_0x46047c(0x37d)]())return;VisuMZ[_0x46047c(0x5ea)](_0x5d70b7,_0x5d70b7);const _0x3a4f61=VisuMZ[_0x46047c(0x865)](_0x5d70b7[_0x46047c(0x39a)]),_0x43a04c=_0x5d70b7['Text'],_0x55503e={'textColor':ColorManager[_0x46047c(0x70f)](_0x5d70b7[_0x46047c(0xb94)]),'flashColor':_0x5d70b7[_0x46047c(0x7cc)],'flashDuration':_0x5d70b7[_0x46047c(0x396)]};for(const _0x464491 of _0x3a4f61){if(!_0x464491)continue;_0x464491[_0x46047c(0x9e8)](_0x43a04c,_0x55503e);}}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0xbbe),_0x20b7f1=>{const _0x5ee0bd=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5ee0bd(0x5ea)](_0x20b7f1,_0x20b7f1);const _0x29ff67=VisuMZ[_0x5ee0bd(0x865)](_0x20b7f1[_0x5ee0bd(0x39a)]);let _0x2008c5=$gameVariables[_0x5ee0bd(0x4be)](_0x20b7f1[_0x5ee0bd(0x580)]);Imported[_0x5ee0bd(0x6ce)]&&_0x20b7f1[_0x5ee0bd(0xa79)]&&(_0x2008c5=VisuMZ['GroupDigits'](_0x2008c5));const _0x2dd343=String(_0x2008c5),_0x26f991={'textColor':ColorManager[_0x5ee0bd(0x70f)](_0x20b7f1[_0x5ee0bd(0xb94)]),'flashColor':_0x20b7f1[_0x5ee0bd(0x7cc)],'flashDuration':_0x20b7f1[_0x5ee0bd(0x396)]};for(const _0x3027c3 of _0x29ff67){if(!_0x3027c3)continue;_0x3027c3[_0x5ee0bd(0x9e8)](_0x2dd343,_0x26f991);}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x4e0),_0x4ef7d9=>{const _0x59cfe3=_0x16d1ef;if(!SceneManager[_0x59cfe3(0x37d)]())return;const _0x6aaed=$gameTemp[_0x59cfe3(0xb38)]();if(!_0x6aaed)return;_0x6aaed[_0x59cfe3(0x13b)]('battleEffect');}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x8ed),_0x4dd01f=>{const _0x50aa17=_0x16d1ef;if(!SceneManager[_0x50aa17(0x37d)]())return;VisuMZ[_0x50aa17(0x5ea)](_0x4dd01f,_0x4dd01f);const _0x4c0c1c=VisuMZ[_0x50aa17(0x865)](_0x4dd01f[_0x50aa17(0x39a)]);for(const _0x5419ca of _0x4c0c1c){if(!_0x5419ca)continue;_0x5419ca[_0x50aa17(0x4e3)]();}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Motion_FreezeMotionFrame',_0x41b530=>{const _0x556b37=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x556b37(0x5ea)](_0x41b530,_0x41b530);const _0x2510ce=VisuMZ[_0x556b37(0x865)](_0x41b530[_0x556b37(0x39a)]),_0x3b5096=_0x41b530[_0x556b37(0x90b)]['toLowerCase']()['trim']();let _0x305291=_0x41b530['ShowWeapon'];const _0x1ca772=_0x41b530[_0x556b37(0xa8a)];!['attack',_0x556b37(0x9f5),_0x556b37(0x377),_0x556b37(0x484)][_0x556b37(0x4f8)](_0x3b5096)&&(_0x556b37(0x3d8)!==_0x556b37(0x3d8)?_0x172a29=_0x409c1d>=_0x2e89a4?_0x390250:_0x4faea4:_0x305291=![]);for(const _0x4f572b of _0x2510ce){if(!_0x4f572b)continue;_0x4f572b[_0x556b37(0x8ea)](_0x3b5096,_0x305291,_0x1ca772);}}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],'ActSeq_Motion_MotionType',_0x37df34=>{const _0x24d25b=_0x16d1ef;if(!SceneManager[_0x24d25b(0x37d)]())return;VisuMZ['ConvertParams'](_0x37df34,_0x37df34);const _0x2c8f17=VisuMZ[_0x24d25b(0x865)](_0x37df34[_0x24d25b(0x39a)]),_0x3ccfe=_0x37df34['MotionType']['toLowerCase']()[_0x24d25b(0x699)](),_0x112db3=_0x37df34[_0x24d25b(0x15d)];for(const _0x389783 of _0x2c8f17){if(_0x24d25b(0x855)!==_0x24d25b(0x855)){const _0x14851e=_0x53f1a0[_0x24d25b(0x657)](this[_0x24d25b(0x4f7)]),_0x1ac540=_0x12877b[_0x24d25b(0x7c3)][_0x14851e];if(!_0x1ac540)return this[_0x24d25b(0x41d)]();return _0x1ac540[_0x24d25b(0x33b)][_0x24d25b(0x2c7)](this);}else{if(!_0x389783)continue;if(_0x3ccfe[_0x24d25b(0xaf1)](/ATTACK[ ](\d+)/i))_0x389783[_0x24d25b(0x3ca)](Number(RegExp['$1']));else _0x3ccfe===_0x24d25b(0x2a9)?_0x389783[_0x24d25b(0x406)]():_0x389783[_0x24d25b(0x80f)](_0x3ccfe);if(!_0x112db3)_0x389783[_0x24d25b(0x2a0)](0x0);else{if(_0x112db3&&['thrust',_0x24d25b(0x377),_0x24d25b(0x7be)][_0x24d25b(0x4f8)](_0x3ccfe)){}}}}}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x714),_0x5d184d=>{const _0x519b5b=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x519b5b(0x5ea)](_0x5d184d,_0x5d184d);const _0x19a41d=BattleManager['_action'];if(!_0x19a41d)return;if(!_0x19a41d[_0x519b5b(0x74a)]())return;const _0x29c040=VisuMZ[_0x519b5b(0x865)](_0x5d184d[_0x519b5b(0x39a)]);for(const _0xccfee2 of _0x29c040){if(!_0xccfee2)continue;_0xccfee2[_0x519b5b(0x27c)](_0x19a41d);}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Motion_RefreshMotion',_0x205963=>{const _0x54ea00=_0x16d1ef;if(!SceneManager[_0x54ea00(0x37d)]())return;VisuMZ[_0x54ea00(0x5ea)](_0x205963,_0x205963);const _0x323fbc=VisuMZ[_0x54ea00(0x865)](_0x205963[_0x54ea00(0x39a)]);for(const _0x4ec0a4 of _0x323fbc){if(_0x54ea00(0xb35)!==_0x54ea00(0xb35)){if(this[_0x54ea00(0x1e6)]<=0x0)return;const _0x1b0b9e=this['_floatDuration'],_0x167dc0=this[_0x54ea00(0x130)],_0x55ddb4=this[_0x54ea00(0x28c)];_0x43fa6f[_0x54ea00(0x6ce)]?this[_0x54ea00(0x99c)]=this[_0x54ea00(0x592)](this[_0x54ea00(0x99c)],this[_0x54ea00(0x1d6)],_0x1b0b9e,_0x167dc0,_0x55ddb4):this[_0x54ea00(0x99c)]=(this[_0x54ea00(0x99c)]*(_0x1b0b9e-0x1)+this['_targetFloatHeight'])/_0x1b0b9e;this[_0x54ea00(0x1e6)]--;if(this[_0x54ea00(0x1e6)]<=0x0)this[_0x54ea00(0x272)]();}else{if(!_0x4ec0a4)continue;if(!_0x4ec0a4[_0x54ea00(0xb02)]())continue;_0x4ec0a4['battler']()[_0x54ea00(0x153)]();}}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x7bd),_0x39269d=>{const _0x210ee7=_0x16d1ef;if(!SceneManager[_0x210ee7(0x37d)]())return;VisuMZ[_0x210ee7(0x5ea)](_0x39269d,_0x39269d);const _0x2dec46=$gameTemp[_0x210ee7(0xb38)](),_0x2bc27d=_0x39269d[_0x210ee7(0xbb9)]*Sprite_Battler['_motionSpeed'];_0x2dec46[_0x210ee7(0xbc7)](_0x2bc27d);}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x41f),_0x5614fa=>{const _0x5cd9ee=_0x16d1ef;if(!SceneManager[_0x5cd9ee(0x37d)]())return;VisuMZ['ConvertParams'](_0x5614fa,_0x5614fa);const _0xc7e55=$gameTemp[_0x5cd9ee(0xb38)](),_0x2dbcfa=BattleManager[_0x5cd9ee(0x7c5)];if(!_0xc7e55||!_0x2dbcfa)return;if(!_0x2dbcfa[_0x5cd9ee(0x74a)]())return;const _0x5ea774=VisuMZ[_0x5cd9ee(0x865)](_0x5614fa[_0x5cd9ee(0x39a)]);for(const _0x51cfd9 of _0x5ea774){if(!_0x51cfd9)continue;_0x51cfd9[_0x5cd9ee(0x75a)](_0x2dbcfa);}if(_0x5614fa[_0x5cd9ee(0x4ce)])_0xc7e55[_0x5cd9ee(0x13b)](_0x5cd9ee(0x38b));}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x4c8),_0x4e20c6=>{const _0x33ee65=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x33ee65(0xb9b)]())return;VisuMZ[_0x33ee65(0x5ea)](_0x4e20c6,_0x4e20c6);const _0x3552cf=$gameTemp[_0x33ee65(0xb38)](),_0x31a6cf=VisuMZ[_0x33ee65(0x865)](_0x4e20c6[_0x33ee65(0x39a)]),_0x2e2435=_0x4e20c6[_0x33ee65(0x39c)],_0x178478=_0x4e20c6[_0x33ee65(0xa6d)],_0x42ec2a=_0x4e20c6['DistanceY'],_0x1b95dd=_0x4e20c6[_0x33ee65(0x9d1)],_0x3356cb=_0x4e20c6[_0x33ee65(0x91a)],_0x250a72=_0x4e20c6['EasingType'],_0x353a15=_0x4e20c6[_0x33ee65(0x90b)],_0xb19ea2=_0x4e20c6[_0x33ee65(0x4ce)];if(!_0x3552cf)return;for(const _0x809044 of _0x31a6cf){if(!_0x809044)continue;let _0x3c96ff=_0x178478,_0xb5c504=_0x42ec2a;if(_0x2e2435[_0x33ee65(0xaf1)](/horz/i))_0x3c96ff*=_0x809044[_0x33ee65(0x71d)]()?-0x1:0x1;if(_0x2e2435['match'](/vert/i))_0xb5c504*=_0x809044[_0x33ee65(0x71d)]()?-0x1:0x1;_0x809044['moveBattlerHomeDistance'](_0x3c96ff,_0xb5c504,_0x1b95dd,_0x3356cb,_0x250a72),_0x809044[_0x33ee65(0x80f)](_0x353a15);}if(_0xb19ea2)_0x3552cf[_0x33ee65(0x13b)]('battleMove');}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x47e),_0x1359f0=>{const _0x5eb0c7=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x5eb0c7(0xb9b)]())return;VisuMZ['ConvertParams'](_0x1359f0,_0x1359f0);const _0x4f6265=$gameTemp['getLastPluginCommandInterpreter'](),_0x32df16=VisuMZ[_0x5eb0c7(0x865)](_0x1359f0[_0x5eb0c7(0x39a)]),_0x1ce83c=_0x1359f0[_0x5eb0c7(0x487)],_0x4a7023=_0x1359f0[_0x5eb0c7(0x31a)],_0x31ba28=_0x1359f0[_0x5eb0c7(0x2ff)],_0x19a4ff=_0x1359f0['OffsetY'],_0x17c7e0=_0x1359f0['Duration'],_0x5458f9=_0x1359f0[_0x5eb0c7(0x91a)],_0x390107=_0x1359f0[_0x5eb0c7(0x43c)],_0x55d805=_0x1359f0[_0x5eb0c7(0x90b)],_0x1a240d=_0x1359f0[_0x5eb0c7(0x4ce)];if(!_0x4f6265)return;for(const _0x17c392 of _0x32df16){if(!_0x17c392)continue;let _0x5a6c9b=_0x17c392[_0x5eb0c7(0xb02)]()['_baseX'],_0x1a9871=_0x17c392['battler']()[_0x5eb0c7(0xb72)];if(_0x1ce83c[_0x5eb0c7(0xaf1)](/home/i))_0x5eb0c7(0x260)!=='lVVbC'?(_0x5a6c9b=_0x17c392[_0x5eb0c7(0xb02)]()[_0x5eb0c7(0x953)],_0x1a9871=_0x17c392[_0x5eb0c7(0xb02)]()[_0x5eb0c7(0x9ea)]):_0x5635c6=this[_0x5eb0c7(0x8a9)]();else{if(_0x1ce83c[_0x5eb0c7(0xaf1)](/center/i))_0x5a6c9b=Graphics[_0x5eb0c7(0xb26)]/0x2,_0x1a9871=Graphics[_0x5eb0c7(0x6be)]/0x2;else _0x1ce83c['match'](/point (\d+), (\d+)/i)&&(_0x5a6c9b=Number(RegExp['$1']),_0x1a9871=Number(RegExp['$2']));}if(_0x4a7023[_0x5eb0c7(0xaf1)](/none/i))_0x5a6c9b+=_0x31ba28,_0x1a9871+=_0x19a4ff;else{if(_0x4a7023[_0x5eb0c7(0xaf1)](/horz/i)&&_0x4a7023[_0x5eb0c7(0xaf1)](/vert/i)){if('appPf'!==_0x5eb0c7(0x81e))return _0x756300[_0x5eb0c7(0x8c3)][_0x5eb0c7(0x58d)]['BattleLog'][_0x5eb0c7(0x195)];else _0x5a6c9b+=_0x17c392['isActor']()?-_0x31ba28:_0x31ba28,_0x1a9871+=_0x17c392['isActor']()?-_0x19a4ff:_0x19a4ff;}else{if(_0x4a7023[_0x5eb0c7(0xaf1)](/horz/i)){if(_0x5eb0c7(0x1a0)!==_0x5eb0c7(0x43a))_0x5a6c9b+=_0x17c392['isActor']()?-_0x31ba28:_0x31ba28,_0x1a9871+=_0x19a4ff;else{if(this['_lastEnemy']&&this[_0x5eb0c7(0xa18)][_0x5eb0c7(0x4f8)](this[_0x5eb0c7(0x8fe)])){const _0x1b9b92=this[_0x5eb0c7(0xa18)]['indexOf'](this[_0x5eb0c7(0x8fe)]);this[_0x5eb0c7(0xa91)](_0x1b9b92);}else this[_0x5eb0c7(0x61b)]();}}else _0x4a7023[_0x5eb0c7(0xaf1)](/vert/i)&&(_0x5a6c9b+=_0x31ba28,_0x1a9871+=_0x17c392['isActor']()?-_0x19a4ff:_0x19a4ff);}}_0x17c392[_0x5eb0c7(0xa51)](_0x5a6c9b,_0x1a9871,_0x17c7e0,_0x5458f9,_0x390107,-0x1),_0x17c392['requestMotion'](_0x55d805);}if(_0x1a240d)_0x4f6265[_0x5eb0c7(0x13b)](_0x5eb0c7(0x38b));}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x939),_0x1f9df7=>{const _0x5b54ac=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x5b54ac(0xb9b)]())return;VisuMZ['ConvertParams'](_0x1f9df7,_0x1f9df7);const _0x4e3d65=$gameTemp['getLastPluginCommandInterpreter'](),_0x46723b=VisuMZ['CreateActionSequenceTargets'](_0x1f9df7[_0x5b54ac(0x64b)]),_0x4140f1=VisuMZ[_0x5b54ac(0x865)](_0x1f9df7['Targets2']),_0x540127=_0x1f9df7[_0x5b54ac(0x736)];let _0x29a5e7=_0x1f9df7[_0x5b54ac(0x242)];const _0x57ce5b=_0x1f9df7[_0x5b54ac(0x31a)],_0x53ff9b=_0x1f9df7[_0x5b54ac(0x2ff)],_0x23eab0=_0x1f9df7[_0x5b54ac(0x91f)],_0x40e9ac=_0x1f9df7['Duration'],_0x5f29db=_0x1f9df7[_0x5b54ac(0x91a)],_0x5acfcc=_0x1f9df7[_0x5b54ac(0x43c)],_0x1ff4f6=_0x1f9df7[_0x5b54ac(0x90b)],_0x2a5190=_0x1f9df7[_0x5b54ac(0x4ce)],_0x748e5a=Math[_0x5b54ac(0x457)](..._0x4140f1[_0x5b54ac(0x526)](_0x21b8f8=>_0x21b8f8[_0x5b54ac(0xb02)]()[_0x5b54ac(0x37a)]-_0x21b8f8[_0x5b54ac(0xb02)]()[_0x5b54ac(0x753)]()/0x2)),_0x1d4b0c=Math['max'](..._0x4140f1['map'](_0x171aa5=>_0x171aa5[_0x5b54ac(0xb02)]()['_baseX']+_0x171aa5[_0x5b54ac(0xb02)]()[_0x5b54ac(0x753)]()/0x2)),_0x328eea=Math['min'](..._0x4140f1[_0x5b54ac(0x526)](_0x404419=>_0x404419[_0x5b54ac(0xb02)]()[_0x5b54ac(0xb72)]-_0x404419[_0x5b54ac(0xb02)]()[_0x5b54ac(0x584)]())),_0x781524=Math[_0x5b54ac(0x26b)](..._0x4140f1['map'](_0x482f5f=>_0x482f5f[_0x5b54ac(0xb02)]()[_0x5b54ac(0xb72)])),_0x5ecc40=_0x4140f1['filter'](_0x3cf454=>_0x3cf454[_0x5b54ac(0x71d)]())['length'],_0x51ba86=_0x4140f1[_0x5b54ac(0x787)](_0x3d2909=>_0x3d2909[_0x5b54ac(0x8fc)]())['length'];let _0x987ea6=0x0,_0x2ca164=0x0;if(_0x540127['match'](/front/i)){if(_0x5b54ac(0x873)!==_0x5b54ac(0x7df))_0x987ea6=_0x5ecc40>=_0x51ba86?_0x748e5a:_0x1d4b0c;else{if(!_0x11246b)return;if(!this['_mainSprite'])return;this[_0x5b54ac(0x959)][_0x5b54ac(0x186)]['x']=this[_0x5b54ac(0x316)][_0x5b54ac(0x47d)](),this[_0x5b54ac(0x959)][_0x5b54ac(0x186)]['y']=this[_0x5b54ac(0x316)][_0x5b54ac(0x75c)](),this[_0x5b54ac(0x76c)]();}}else{if(_0x540127['match'](/middle/i))_0x5b54ac(0x2c6)!==_0x5b54ac(0x2c6)?(this[_0x5b54ac(0x19a)]['x']=this[_0x5b54ac(0x7d5)],this['_borderPortraitTargetX']=this[_0x5b54ac(0x7d5)]*0x3/0x4):(_0x987ea6=(_0x748e5a+_0x1d4b0c)/0x2,_0x29a5e7=-0x1);else{if(_0x540127[_0x5b54ac(0xaf1)](/back/i)){if(_0x5b54ac(0x2f3)===_0x5b54ac(0x1bb)){_0x28d15['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x26e0e5=_0x35b40e(_0x3c895a['$1']),_0x5c369f=_0x582ea1(_0x3ba298['$2']),_0x5cb211=_0x5c369f===0x1?this['_regionBattleback1']:this[_0x5b54ac(0x65e)],_0x5e6297=_0x4fb59e(_0x238bb2['$3']);_0x5cb211[_0x26e0e5]=_0x5e6297;}else _0x987ea6=_0x5ecc40>=_0x51ba86?_0x1d4b0c:_0x748e5a;}}}if(_0x540127[_0x5b54ac(0xaf1)](/head/i))_0x2ca164=_0x328eea;else{if(_0x540127[_0x5b54ac(0xaf1)](/center/i))_0x2ca164=(_0x328eea+_0x781524)/0x2;else _0x540127[_0x5b54ac(0xaf1)](/base/i)&&(_0x2ca164=_0x781524);}if(!_0x4e3d65)return;for(const _0x1a0243 of _0x46723b){if(!_0x1a0243)continue;let _0xb7cb8c=_0x987ea6,_0x1d6743=_0x2ca164;if(_0x57ce5b[_0x5b54ac(0xaf1)](/none/i))_0xb7cb8c+=_0x53ff9b,_0x1d6743+=_0x23eab0;else{if(_0x57ce5b[_0x5b54ac(0xaf1)](/horz/i)&&_0x57ce5b[_0x5b54ac(0xaf1)](/vert/i)){if(_0x5b54ac(0x466)!==_0x5b54ac(0xb60))_0xb7cb8c+=_0x1a0243[_0x5b54ac(0x71d)]()?-_0x53ff9b:_0x53ff9b,_0x1d6743+=_0x1a0243['isActor']()?-_0x23eab0:_0x23eab0;else{if(_0x181862[_0x5b54ac(0xa16)]&&!_0x23ffa8[_0x5b54ac(0x893)])return this[_0x5b54ac(0x4a7)]();else{return _0x51bf90[_0x5b54ac(0x8c3)][_0x5b54ac(0x369)]['call'](this);;}}}else{if(_0x57ce5b[_0x5b54ac(0xaf1)](/horz/i)){if(_0x5b54ac(0x883)===_0x5b54ac(0x883))_0xb7cb8c+=_0x1a0243[_0x5b54ac(0x71d)]()?-_0x53ff9b:_0x53ff9b,_0x1d6743+=_0x23eab0;else return _0x5611fe(_0x50b862['$1']);}else _0x57ce5b[_0x5b54ac(0xaf1)](/vert/i)&&(_0xb7cb8c+=_0x53ff9b,_0x1d6743+=_0x1a0243[_0x5b54ac(0x71d)]()?-_0x23eab0:_0x23eab0);}}_0x1a0243['moveBattlerHomeToPoint'](_0xb7cb8c,_0x1d6743,_0x40e9ac,_0x5f29db,_0x5acfcc,_0x29a5e7),_0x1a0243[_0x5b54ac(0x80f)](_0x1ff4f6);}if(_0x2a5190)_0x4e3d65[_0x5b54ac(0x13b)](_0x5b54ac(0x38b));}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0xae0),_0x4f27fb=>{const _0x3d3f12=_0x16d1ef;if(!SceneManager[_0x3d3f12(0x37d)]())return;if(!$gameSystem[_0x3d3f12(0xb9b)]())return;VisuMZ[_0x3d3f12(0x5ea)](_0x4f27fb,_0x4f27fb);const _0x31af41=VisuMZ[_0x3d3f12(0x865)](_0x4f27fb[_0x3d3f12(0x39a)]);let _0x5ac0ff=_0x4f27fb[_0x3d3f12(0x23e)][_0x3d3f12(0xaf1)](/back/i);for(const _0x4e5b7f of _0x31af41){if(!_0x4e5b7f)continue;if(_0x4f27fb[_0x3d3f12(0x23e)][_0x3d3f12(0xaf1)](/rand/i))_0x5ac0ff=Math['randomInt'](0x2);_0x4e5b7f['setBattlerFlip'](!!_0x5ac0ff);}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Movement_FacePoint',_0x45972c=>{const _0x1d1095=_0x16d1ef;if(!SceneManager[_0x1d1095(0x37d)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x45972c,_0x45972c);const _0x54e60e=VisuMZ[_0x1d1095(0x865)](_0x45972c[_0x1d1095(0x39a)]);let _0x4bb42c=_0x45972c['Point'];const _0x3463a2=_0x45972c[_0x1d1095(0x836)];for(const _0x5ef561 of _0x54e60e){if(!_0x5ef561)continue;let _0x1aee8c=_0x5ef561[_0x1d1095(0xb02)]()[_0x1d1095(0x37a)],_0x7b89b3=_0x5ef561[_0x1d1095(0xb02)]()[_0x1d1095(0xb72)];if(_0x4bb42c[_0x1d1095(0xaf1)](/home/i)){if(_0x1d1095(0x605)===_0x1d1095(0x605))_0x1aee8c=_0x5ef561[_0x1d1095(0xb02)]()[_0x1d1095(0x953)],_0x7b89b3=_0x5ef561['battler']()[_0x1d1095(0x9ea)];else{_0x820997[_0x1d1095(0xb37)](_0x21a557[0x0],_0x5e2d30[0x1],_0x1d3856[0x2]);if(_0x3c2fad[0x3])this[_0x1d1095(0xbc7)](_0x85d123[0x2]);return!![];}}else{if(_0x4bb42c[_0x1d1095(0xaf1)](/center/i)){if(_0x1d1095(0xa4c)!=='LXCJf'){if(this[_0x1d1095(0x229)]<=0x0)return;const _0xb0f4c=this['_jumpWholeDuration']-this[_0x1d1095(0x229)],_0x48a21d=this[_0x1d1095(0x3bd)]/0x2,_0x3fc5c9=this['_jumpMaxHeight'],_0x1f1d8b=-_0x3fc5c9/_0x3c409a[_0x1d1095(0x42e)](_0x48a21d,0x2);this['_jumpHeight']=_0x1f1d8b*_0x109cfc[_0x1d1095(0x42e)](_0xb0f4c-_0x48a21d,0x2)+_0x3fc5c9,this[_0x1d1095(0x229)]--;if(this['_jumpDuration']<=0x0)return this[_0x1d1095(0x3a2)]();}else _0x1aee8c=Graphics[_0x1d1095(0xb26)]/0x2,_0x7b89b3=Graphics[_0x1d1095(0x6be)]/0x2;}else _0x4bb42c[_0x1d1095(0xaf1)](/point (\d+), (\d+)/i)&&(_0x1aee8c=Number(RegExp['$1']),_0x7b89b3=Number(RegExp['$2']));}_0x5ef561['setBattlerFacePoint'](Math['round'](_0x1aee8c),Math[_0x1d1095(0x5d9)](_0x7b89b3),!!_0x3463a2);}}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Movement_FaceTarget',_0x5db065=>{const _0x5dc302=_0x16d1ef;if(!SceneManager[_0x5dc302(0x37d)]())return;if(!$gameSystem[_0x5dc302(0xb9b)]())return;VisuMZ[_0x5dc302(0x5ea)](_0x5db065,_0x5db065);const _0xb762e9=VisuMZ[_0x5dc302(0x865)](_0x5db065[_0x5dc302(0x64b)]),_0x29f143=VisuMZ[_0x5dc302(0x865)](_0x5db065[_0x5dc302(0xb71)]),_0x37063f=_0x29f143['map'](_0xa3f17a=>_0xa3f17a&&_0xa3f17a['battler']()?_0xa3f17a[_0x5dc302(0xb02)]()[_0x5dc302(0x37a)]:0x0)/(_0x29f143['length']||0x1),_0x2d0653=_0x29f143[_0x5dc302(0x526)](_0x262461=>_0x262461&&_0x262461[_0x5dc302(0xb02)]()?_0x262461[_0x5dc302(0xb02)]()[_0x5dc302(0xb72)]:0x0)/(_0x29f143[_0x5dc302(0xa40)]||0x1),_0x4beb0a=_0x5db065[_0x5dc302(0x836)];for(const _0x33d71c of _0xb762e9){if(!_0x33d71c)continue;_0x33d71c[_0x5dc302(0x453)](Math[_0x5dc302(0x5d9)](_0x37063f),Math['round'](_0x2d0653),!!_0x4beb0a);}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x91c),_0x582f22=>{const _0x53c594=_0x16d1ef;if(!SceneManager[_0x53c594(0x37d)]())return;VisuMZ[_0x53c594(0x5ea)](_0x582f22,_0x582f22);const _0x2e64f7=$gameTemp[_0x53c594(0xb38)](),_0x475881=VisuMZ[_0x53c594(0x865)](_0x582f22[_0x53c594(0x39a)]),_0x135f66=_0x582f22[_0x53c594(0x30a)],_0xdf59a7=_0x582f22[_0x53c594(0x9d1)],_0x119cd0=_0x582f22[_0x53c594(0x43c)],_0x1cf938=_0x582f22[_0x53c594(0xb19)];if(!_0x2e64f7)return;for(const _0xa9012d of _0x475881){if(!_0xa9012d)continue;_0xa9012d[_0x53c594(0x92f)](_0x135f66,_0xdf59a7,_0x119cd0);}if(_0x1cf938)_0x2e64f7[_0x53c594(0x13b)](_0x53c594(0x884));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x780),_0x49945b=>{const _0x39aa1d=_0x16d1ef;if(!SceneManager[_0x39aa1d(0x37d)]())return;VisuMZ[_0x39aa1d(0x5ea)](_0x49945b,_0x49945b);const _0x92b13f=$gameTemp[_0x39aa1d(0xb38)]();if(!_0x92b13f)return;const _0x19f8b8=VisuMZ[_0x39aa1d(0x865)](_0x49945b[_0x39aa1d(0x39a)]);for(const _0x522eba of _0x19f8b8){if(!_0x522eba)continue;_0x522eba['performActionEndMembers']();}BattleManager[_0x39aa1d(0x515)]&&BattleManager[_0x39aa1d(0x515)][_0x39aa1d(0x598)]();if(_0x49945b[_0x39aa1d(0x4ce)])_0x92b13f[_0x39aa1d(0x13b)](_0x39aa1d(0x38b));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Movement_Jump',_0x715bf0=>{const _0x48536=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x48536(0x5ea)](_0x715bf0,_0x715bf0);const _0x5a137c=$gameTemp[_0x48536(0xb38)](),_0x3f44f6=VisuMZ[_0x48536(0x865)](_0x715bf0[_0x48536(0x39a)]),_0x46e541=_0x715bf0[_0x48536(0x30a)],_0x5d8f5e=_0x715bf0[_0x48536(0x9d1)],_0xca6068=_0x715bf0[_0x48536(0x7ed)];if(!_0x5a137c)return;for(const _0x1be8a6 of _0x3f44f6){if(_0x48536(0x59c)===_0x48536(0x59c)){if(!_0x1be8a6)continue;_0x1be8a6[_0x48536(0xa95)](_0x46e541,_0x5d8f5e);}else{if(this['contentsOpacity']>0x0)this['contentsOpacity']-=0x10;}}if(_0xca6068)_0x5a137c[_0x48536(0x13b)]('battleJump');}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Movement_MoveBy',_0x38d30=>{const _0x1252c8=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x1252c8(0xb9b)]())return;VisuMZ[_0x1252c8(0x5ea)](_0x38d30,_0x38d30);const _0x556014=$gameTemp[_0x1252c8(0xb38)](),_0x1b21ea=VisuMZ[_0x1252c8(0x865)](_0x38d30[_0x1252c8(0x39a)]),_0x5dde7b=_0x38d30[_0x1252c8(0x39c)],_0xdbb02b=_0x38d30['DistanceX'],_0x1d3d16=_0x38d30[_0x1252c8(0xb4a)],_0x778926=_0x38d30[_0x1252c8(0x9d1)],_0x26a557=_0x38d30[_0x1252c8(0x91a)],_0x53ccb8=_0x38d30[_0x1252c8(0x43c)],_0x4373d3=_0x38d30[_0x1252c8(0x90b)],_0x3f8de0=_0x38d30[_0x1252c8(0x4ce)];if(!_0x556014)return;for(const _0x2931ec of _0x1b21ea){if(_0x1252c8(0x55c)!==_0x1252c8(0x55c))return 0x1;else{if(!_0x2931ec)continue;let _0x2f26ed=_0xdbb02b,_0x3e607e=_0x1d3d16;if(_0x5dde7b[_0x1252c8(0xaf1)](/horz/i))_0x2f26ed*=_0x2931ec[_0x1252c8(0x71d)]()?-0x1:0x1;if(_0x5dde7b[_0x1252c8(0xaf1)](/vert/i))_0x3e607e*=_0x2931ec[_0x1252c8(0x71d)]()?-0x1:0x1;_0x2931ec[_0x1252c8(0x25a)](_0x2f26ed,_0x3e607e,_0x778926,_0x26a557,_0x53ccb8),_0x2931ec['requestMotion'](_0x4373d3);}}if(_0x3f8de0)_0x556014[_0x1252c8(0x13b)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x1bd),_0x342280=>{const _0x4873ad=_0x16d1ef;if(!SceneManager[_0x4873ad(0x37d)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x342280,_0x342280);const _0x4a4e7a=$gameTemp[_0x4873ad(0xb38)](),_0x3cbaa6=VisuMZ[_0x4873ad(0x865)](_0x342280[_0x4873ad(0x39a)]),_0x3b04b5=_0x342280['Destination'],_0xb51b93=_0x342280[_0x4873ad(0x31a)],_0x44b2f4=_0x342280[_0x4873ad(0x2ff)],_0x359731=_0x342280[_0x4873ad(0x91f)],_0x1f533c=_0x342280['Duration'],_0xc5e77b=_0x342280[_0x4873ad(0x91a)],_0x17e710=_0x342280[_0x4873ad(0x43c)],_0x11dcdb=_0x342280[_0x4873ad(0x90b)],_0x5cfa96=_0x342280[_0x4873ad(0x4ce)];if(!_0x4a4e7a)return;for(const _0x9c3dec of _0x3cbaa6){if(!_0x9c3dec)continue;let _0x3438ce=_0x9c3dec[_0x4873ad(0xb02)]()[_0x4873ad(0x37a)],_0x45bc05=_0x9c3dec[_0x4873ad(0xb02)]()[_0x4873ad(0xb72)];if(_0x3b04b5[_0x4873ad(0xaf1)](/home/i))_0x3438ce=_0x9c3dec[_0x4873ad(0xb02)]()[_0x4873ad(0x953)],_0x45bc05=_0x9c3dec['battler']()[_0x4873ad(0x9ea)];else{if(_0x3b04b5['match'](/center/i)){if('zDZWX'!==_0x4873ad(0x8a8)){if(this['isTurnBased']())this[_0x4873ad(0x157)](_0x4873ad(0xa50));_0x3a9bfb['BattleCore'][_0x4873ad(0x581)][_0x4873ad(0x2c7)](this);if(this[_0x4873ad(0xa77)]())this[_0x4873ad(0x157)](_0x4873ad(0x8d9));}else _0x3438ce=Graphics[_0x4873ad(0xb26)]/0x2,_0x45bc05=Graphics[_0x4873ad(0x6be)]/0x2;}else _0x3b04b5[_0x4873ad(0xaf1)](/point (\d+), (\d+)/i)&&(_0x3438ce=Number(RegExp['$1']),_0x45bc05=Number(RegExp['$2']));}if(_0xb51b93[_0x4873ad(0xaf1)](/none/i))_0x3438ce+=_0x44b2f4,_0x45bc05+=_0x359731;else{if(_0xb51b93[_0x4873ad(0xaf1)](/horz/i)&&_0xb51b93[_0x4873ad(0xaf1)](/vert/i))_0x3438ce+=_0x9c3dec[_0x4873ad(0x71d)]()?-_0x44b2f4:_0x44b2f4,_0x45bc05+=_0x9c3dec['isActor']()?-_0x359731:_0x359731;else{if(_0xb51b93['match'](/horz/i))_0x3438ce+=_0x9c3dec[_0x4873ad(0x71d)]()?-_0x44b2f4:_0x44b2f4,_0x45bc05+=_0x359731;else{if(_0xb51b93[_0x4873ad(0xaf1)](/vert/i)){if(_0x4873ad(0x5d5)!==_0x4873ad(0x5d5)){const _0x182dcd=_0x4cdae2[_0x4873ad(0x8c3)][_0x4873ad(0x58d)][_0x4873ad(0x66d)];if(_0x182dcd[_0x4873ad(0xac5)]){const _0x2c372f=new _0x1f4607();_0x2c372f[_0x4873ad(0xb74)]=_0x9a1537[_0x4873ad(0x642)](_0x182dcd[_0x4873ad(0xac5)]),_0x2c372f['x']=_0x182dcd[_0x4873ad(0x31d)]||0x0,_0x2c372f['y']=_0x182dcd['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x4873ad(0xab3)](_0x2c372f),this[_0x4873ad(0x73d)]=_0x2c372f;}if(_0x182dcd['StatusWindowAttachmentFront']){const _0xc2202=new _0x1b5850();_0xc2202[_0x4873ad(0xb74)]=_0x208a89[_0x4873ad(0x642)](_0x182dcd[_0x4873ad(0x89b)]),_0xc2202['x']=_0x182dcd[_0x4873ad(0x7ba)]||0x0,_0xc2202['y']=_0x182dcd[_0x4873ad(0xae1)]||0x0,this[_0x4873ad(0x339)](_0xc2202),this[_0x4873ad(0x5da)]=_0xc2202;}}else _0x3438ce+=_0x44b2f4,_0x45bc05+=_0x9c3dec[_0x4873ad(0x71d)]()?-_0x359731:_0x359731;}}}}_0x9c3dec[_0x4873ad(0x1a4)](_0x3438ce,_0x45bc05,_0x1f533c,_0xc5e77b,_0x17e710,-0x1),_0x9c3dec[_0x4873ad(0x80f)](_0x11dcdb);}if(_0x5cfa96)_0x4a4e7a[_0x4873ad(0x13b)](_0x4873ad(0x38b));}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x9f6),_0xcc8e19=>{const _0x271802=_0x16d1ef;if(!SceneManager[_0x271802(0x37d)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x271802(0x5ea)](_0xcc8e19,_0xcc8e19);const _0x231bc2=$gameTemp[_0x271802(0xb38)](),_0x4b16c9=VisuMZ['CreateActionSequenceTargets'](_0xcc8e19[_0x271802(0x64b)]),_0xa2cffe=VisuMZ[_0x271802(0x865)](_0xcc8e19[_0x271802(0xb71)]),_0x112015=_0xcc8e19[_0x271802(0x736)];let _0x2d6430=_0xcc8e19[_0x271802(0x242)];const _0x50068f=_0xcc8e19[_0x271802(0x31a)],_0x3d8079=_0xcc8e19['OffsetX'],_0xa19954=_0xcc8e19[_0x271802(0x91f)],_0x42ed38=_0xcc8e19['Duration'],_0xc6e186=_0xcc8e19[_0x271802(0x91a)],_0x361ab8=_0xcc8e19[_0x271802(0x43c)],_0x179918=_0xcc8e19[_0x271802(0x90b)],_0x2dd4f8=_0xcc8e19['WaitForMovement'],_0x2645d2=Math[_0x271802(0x457)](..._0xa2cffe['map'](_0x5ab076=>_0x5ab076[_0x271802(0xb02)]()[_0x271802(0x37a)]-_0x5ab076[_0x271802(0xb02)]()[_0x271802(0x753)]()/0x2)),_0x4f8529=Math[_0x271802(0x26b)](..._0xa2cffe['map'](_0x5c9efd=>_0x5c9efd['battler']()['_baseX']+_0x5c9efd['battler']()[_0x271802(0x753)]()/0x2)),_0x28271d=Math[_0x271802(0x457)](..._0xa2cffe['map'](_0x53a3e6=>_0x53a3e6['battler']()[_0x271802(0xb72)]-_0x53a3e6[_0x271802(0xb02)]()[_0x271802(0x584)]())),_0x3e9d59=Math['max'](..._0xa2cffe[_0x271802(0x526)](_0x218f1e=>_0x218f1e[_0x271802(0xb02)]()[_0x271802(0xb72)])),_0x58b38a=_0xa2cffe[_0x271802(0x787)](_0x5ce562=>_0x5ce562[_0x271802(0x71d)]())['length'],_0x562cef=_0xa2cffe[_0x271802(0x787)](_0x522500=>_0x522500[_0x271802(0x8fc)]())[_0x271802(0xa40)];let _0x39642f=0x0,_0x3b0554=0x0;if(_0x112015[_0x271802(0xaf1)](/front/i)){if(_0x271802(0xb7f)===_0x271802(0xb8f))return!![];else _0x39642f=_0x58b38a>=_0x562cef?_0x2645d2:_0x4f8529;}else{if(_0x112015[_0x271802(0xaf1)](/middle/i))_0x39642f=(_0x2645d2+_0x4f8529)/0x2,_0x2d6430=-0x1;else _0x112015[_0x271802(0xaf1)](/back/i)&&(_0x271802(0xb95)!==_0x271802(0xb95)?(this[_0x271802(0x897)]=this[_0x271802(0xb67)][_0x271802(0x777)](0x0),this['_targetIndex']=0x0,this[_0x271802(0x93a)]=this['_allTargets'][0x0]||null,this[_0x271802(0x6eb)]=_0x271802(0xb8e)):_0x39642f=_0x58b38a>=_0x562cef?_0x4f8529:_0x2645d2);}if(_0x112015[_0x271802(0xaf1)](/head/i))_0x271802(0x22b)!==_0x271802(0x22b)?_0x3ef71b[_0x271802(0xb74)]=_0x4c11fe['loadPicture'](_0x2f5f3b):_0x3b0554=_0x28271d;else{if(_0x112015[_0x271802(0xaf1)](/center/i))_0x271802(0x35a)===_0x271802(0x3af)?(_0x48dd2d[_0x271802(0x8c3)][_0x271802(0x479)][_0x271802(0x2c7)](this),this[_0x271802(0x2ac)]=[]):_0x3b0554=(_0x28271d+_0x3e9d59)/0x2;else _0x112015['match'](/base/i)&&(_0x3b0554=_0x3e9d59);}if(!_0x231bc2)return;for(const _0x31f716 of _0x4b16c9){if(!_0x31f716)continue;let _0x4574e9=_0x39642f,_0x538718=_0x3b0554;if(_0x50068f[_0x271802(0xaf1)](/none/i))_0x4574e9+=_0x3d8079,_0x538718+=_0xa19954;else{if(_0x50068f[_0x271802(0xaf1)](/horz/i)&&_0x50068f[_0x271802(0xaf1)](/vert/i))_0x271802(0x997)===_0x271802(0x997)?(_0x4574e9+=_0x31f716[_0x271802(0x71d)]()?-_0x3d8079:_0x3d8079,_0x538718+=_0x31f716[_0x271802(0x71d)]()?-_0xa19954:_0xa19954):this[_0x271802(0x706)](this[_0x271802(0x989)][_0x271802(0xa74)]);else{if(_0x50068f['match'](/horz/i)){if(_0x271802(0x702)===_0x271802(0x312)){if(_0x5ef574[_0x271802(0xa74)]['isActor']()&&_0x533ab5[_0x271802(0xa74)]['isEnemy']())return 0x1;else{if(_0x476ee7[_0x271802(0xa74)][_0x271802(0x71d)]()&&_0x32e3c1[_0x271802(0xa74)][_0x271802(0x8fc)]())return-0x1;}}else _0x4574e9+=_0x31f716[_0x271802(0x71d)]()?-_0x3d8079:_0x3d8079,_0x538718+=_0xa19954;}else _0x50068f[_0x271802(0xaf1)](/vert/i)&&(_0x4574e9+=_0x3d8079,_0x538718+=_0x31f716[_0x271802(0x71d)]()?-_0xa19954:_0xa19954);}}_0x31f716[_0x271802(0x1a4)](_0x4574e9,_0x538718,_0x42ed38,_0xc6e186,_0x361ab8,_0x2d6430),_0x31f716[_0x271802(0x80f)](_0x179918);}if(_0x2dd4f8)_0x231bc2['setWaitMode'](_0x271802(0x38b));}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x8f7),_0x59cecf=>{const _0x4280cf=_0x16d1ef;if(!SceneManager[_0x4280cf(0x37d)]())return;VisuMZ[_0x4280cf(0x5ea)](_0x59cecf,_0x59cecf);const _0x1b68d3=$gameTemp[_0x4280cf(0xb38)](),_0x2e6d58=VisuMZ[_0x4280cf(0x865)](_0x59cecf[_0x4280cf(0x39a)]),_0x4d60b4=_0x59cecf[_0x4280cf(0xa5f)],_0x123470=_0x59cecf[_0x4280cf(0x9d1)],_0x2214bb=_0x59cecf[_0x4280cf(0x43c)],_0x5c11d6=_0x59cecf['WaitForOpacity'];if(!_0x1b68d3)return;for(const _0x312560 of _0x2e6d58){if(!_0x312560)continue;_0x312560[_0x4280cf(0x2f6)](_0x4d60b4,_0x123470,_0x2214bb);}if(_0x5c11d6)_0x1b68d3[_0x4280cf(0x13b)](_0x4280cf(0x20b));}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Movement_Scale',_0x27c6cc=>{const _0x544dc1=_0x16d1ef;if(!SceneManager[_0x544dc1(0x37d)]())return;VisuMZ['ConvertParams'](_0x27c6cc,_0x27c6cc);const _0x324e=$gameTemp[_0x544dc1(0xb38)](),_0x2e8fb8=VisuMZ[_0x544dc1(0x865)](_0x27c6cc['Targets']),_0x10be7d=_0x27c6cc['ScaleX'],_0x55cb2f=_0x27c6cc[_0x544dc1(0xb3e)],_0x5c61a7=_0x27c6cc[_0x544dc1(0x9d1)],_0x53e441=_0x27c6cc[_0x544dc1(0x43c)],_0x61c9bc=_0x27c6cc[_0x544dc1(0x524)];if(!_0x324e)return;for(const _0x5935cd of _0x2e8fb8){if(!_0x5935cd)continue;_0x5935cd[_0x544dc1(0x56e)](_0x10be7d,_0x55cb2f,_0x5c61a7,_0x53e441);}if(_0x61c9bc)_0x324e[_0x544dc1(0x13b)]('battleGrow');}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x932),_0x252ce8=>{const _0x44b531=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x44b531(0x5ea)](_0x252ce8,_0x252ce8);const _0x1159f2=$gameTemp[_0x44b531(0xb38)](),_0x48e82a=VisuMZ['CreateActionSequenceTargets'](_0x252ce8[_0x44b531(0x39a)]),_0xa069b6=_0x252ce8[_0x44b531(0x733)],_0x389113=_0x252ce8[_0x44b531(0x52e)],_0x290ed4=_0x252ce8[_0x44b531(0x9d1)],_0x5b3109=_0x252ce8[_0x44b531(0x43c)],_0x1ecf4a=_0x252ce8['WaitForSkew'];if(!_0x1159f2)return;for(const _0x4938c9 of _0x48e82a){if(!_0x4938c9)continue;_0x4938c9[_0x44b531(0x4f4)](_0xa069b6,_0x389113,_0x290ed4,_0x5b3109);}if(_0x1ecf4a)_0x1159f2[_0x44b531(0x13b)](_0x44b531(0xa98));}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x853),_0x6f92b6=>{const _0x1fa3e6=_0x16d1ef;if(!SceneManager[_0x1fa3e6(0x37d)]())return;VisuMZ['ConvertParams'](_0x6f92b6,_0x6f92b6);const _0x57dd01=$gameTemp[_0x1fa3e6(0xb38)](),_0xcb5a88=VisuMZ[_0x1fa3e6(0x865)](_0x6f92b6['Targets']),_0x204724=_0x6f92b6[_0x1fa3e6(0x9fc)],_0x343406=_0x6f92b6['Duration'],_0x2ca780=_0x6f92b6[_0x1fa3e6(0x43c)],_0x1c6270=_0x6f92b6[_0x1fa3e6(0x559)],_0x41e3f0=_0x6f92b6[_0x1fa3e6(0x454)];if(!_0x57dd01)return;for(const _0x4a0a50 of _0xcb5a88){if(!_0x4a0a50)continue;_0x4a0a50[_0x1fa3e6(0x74d)](_0x204724,_0x343406,_0x2ca780,_0x1c6270);}if(_0x41e3f0)_0x57dd01[_0x1fa3e6(0x13b)](_0x1fa3e6(0x2de));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x286),_0x3a7a8e=>{const _0x44671f=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;const _0x53135b=$gameTemp[_0x44671f(0xb38)]();if(!_0x53135b)return;_0x53135b[_0x44671f(0x13b)]('battleFloat');}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Movement_WaitForJump',_0x53e59a=>{const _0x154745=_0x16d1ef;if(!SceneManager[_0x154745(0x37d)]())return;const _0x1dbae8=$gameTemp[_0x154745(0xb38)]();if(!_0x1dbae8)return;_0x1dbae8['setWaitMode'](_0x154745(0x901));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0xaae),_0x341060=>{const _0x43d561=_0x16d1ef;if(!SceneManager[_0x43d561(0x37d)]())return;const _0xb19339=$gameTemp[_0x43d561(0xb38)]();if(!_0xb19339)return;_0xb19339['setWaitMode']('battleMove');}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Movement_WaitForOpacity',_0x35780f=>{const _0x131235=_0x16d1ef;if(!SceneManager[_0x131235(0x37d)]())return;const _0x27d26f=$gameTemp[_0x131235(0xb38)]();if(!_0x27d26f)return;_0x27d26f[_0x131235(0x13b)]('battleOpacity');}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Movement_WaitForScale',_0x3a7795=>{const _0x4036f8=_0x16d1ef;if(!SceneManager[_0x4036f8(0x37d)]())return;const _0x4eabb7=$gameTemp[_0x4036f8(0xb38)]();if(!_0x4eabb7)return;_0x4eabb7[_0x4036f8(0x13b)](_0x4036f8(0x6ef));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x748),_0x110893=>{const _0x3c62e7=_0x16d1ef;if(!SceneManager[_0x3c62e7(0x37d)]())return;const _0x3a6be8=$gameTemp[_0x3c62e7(0xb38)]();if(!_0x3a6be8)return;_0x3a6be8[_0x3c62e7(0x13b)](_0x3c62e7(0xa98));}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0x203),_0x160c90=>{const _0x267827=_0x16d1ef;if(!SceneManager[_0x267827(0x37d)]())return;const _0x4bc018=$gameTemp[_0x267827(0xb38)]();if(!_0x4bc018)return;_0x4bc018['setWaitMode']('battleSpin');}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x147),_0x407979=>{const _0x1facf5=_0x16d1ef;if(!SceneManager[_0x1facf5(0x37d)]())return;if(!Imported[_0x1facf5(0x1c5)])return;VisuMZ[_0x1facf5(0x5ea)](_0x407979,_0x407979);const _0x19911b=$gameTemp[_0x1facf5(0xb38)](),_0x260298=_0x407979['WaitForProjectile'];if(!_0x19911b)return;const _0xb2cc48=BattleManager[_0x1facf5(0x71a)];if(!_0xb2cc48)return;_0xb2cc48[_0x1facf5(0x571)](_0x407979);if(_0x260298)_0x19911b[_0x1facf5(0x13b)](_0x1facf5(0x40d));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x75e),_0x3b3018=>{const _0x5d6e10=_0x16d1ef;if(!SceneManager[_0x5d6e10(0x37d)]())return;if(!Imported[_0x5d6e10(0x1c5)])return;VisuMZ[_0x5d6e10(0x5ea)](_0x3b3018,_0x3b3018);const _0xcb1e7f=$gameTemp[_0x5d6e10(0xb38)](),_0x41a5bd=_0x3b3018[_0x5d6e10(0x7b2)];if(!_0xcb1e7f)return;const _0x1df9ee=BattleManager['_spriteset'];if(!_0x1df9ee)return;_0x1df9ee[_0x5d6e10(0x571)](_0x3b3018);if(_0x41a5bd)_0xcb1e7f[_0x5d6e10(0x13b)](_0x5d6e10(0x40d));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Projectile_Picture',_0x45bf5b=>{const _0x518760=_0x16d1ef;if(!SceneManager[_0x518760(0x37d)]())return;if(!Imported[_0x518760(0x1c5)])return;VisuMZ['ConvertParams'](_0x45bf5b,_0x45bf5b);const _0x107a9a=$gameTemp[_0x518760(0xb38)](),_0x279dcf=_0x45bf5b['WaitForProjectile'];if(!_0x107a9a)return;const _0x2d02b5=BattleManager[_0x518760(0x71a)];if(!_0x2d02b5)return;_0x2d02b5[_0x518760(0x571)](_0x45bf5b);if(_0x279dcf)_0x107a9a[_0x518760(0x13b)](_0x518760(0x40d));}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],'ActSeq_ChangeSkew',_0xbcacd4=>{const _0x3fa1fe=_0x16d1ef;if(!SceneManager[_0x3fa1fe(0x37d)]())return;if(!Imported[_0x3fa1fe(0x3b9)])return;VisuMZ[_0x3fa1fe(0x5ea)](_0xbcacd4,_0xbcacd4);const _0x5b52d4=$gameTemp[_0x3fa1fe(0xb38)](),_0x3187f7=_0xbcacd4[_0x3fa1fe(0x5c6)];if(!_0x5b52d4)return;$gameScreen[_0x3fa1fe(0x139)](_0xbcacd4[_0x3fa1fe(0x733)],_0xbcacd4['SkewY'],_0xbcacd4[_0x3fa1fe(0x9d1)],_0xbcacd4['EasingType']);if(_0x3187f7)_0x5b52d4[_0x3fa1fe(0x13b)](_0x3fa1fe(0x3d6));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x5f5),_0x3ffcb0=>{const _0x2106dc=_0x16d1ef;if(!SceneManager[_0x2106dc(0x37d)]())return;if(!Imported[_0x2106dc(0x3b9)])return;VisuMZ[_0x2106dc(0x5ea)](_0x3ffcb0,_0x3ffcb0);const _0x3dafc2=$gameTemp[_0x2106dc(0xb38)](),_0x4df549=_0x3ffcb0[_0x2106dc(0x5c6)];if(!_0x3dafc2)return;$gameScreen[_0x2106dc(0x139)](0x0,0x0,_0x3ffcb0['Duration'],_0x3ffcb0[_0x2106dc(0x43c)]);if(_0x4df549)_0x3dafc2[_0x2106dc(0x13b)](_0x2106dc(0x3d6));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x2dd),_0xe2cb95=>{const _0x5eaf6c=_0x16d1ef;if(!SceneManager[_0x5eaf6c(0x37d)]())return;if(!Imported[_0x5eaf6c(0x3b9)])return;const _0x35038e=$gameTemp[_0x5eaf6c(0xb38)]();if(!_0x35038e)return;_0x35038e['setWaitMode'](_0x5eaf6c(0x3d6));}),PluginManager['registerCommand'](pluginData['name'],_0x16d1ef(0x6ff),_0x5d320b=>{const _0x3bc097=_0x16d1ef;if(!SceneManager[_0x3bc097(0x37d)]())return;VisuMZ[_0x3bc097(0x5ea)](_0x5d320b,_0x5d320b);const _0x57eda8=$gameTemp[_0x3bc097(0xb38)](),_0x26d0e9=_0x5d320b[_0x3bc097(0xb14)],_0x3393fe=_0x5d320b[_0x3bc097(0x184)];if(!_0x57eda8)return;BattleManager[_0x3bc097(0x723)]=_0x26d0e9,BattleManager[_0x3bc097(0x93a)]=BattleManager['_allTargets']?BattleManager['_allTargets'][BattleManager[_0x3bc097(0x723)]]||null:null;if(BattleManager[_0x3bc097(0x93a)]&&_0x3393fe['toUpperCase']()['trim']()!==_0x3bc097(0x781)){if(_0x3bc097(0x4fc)===_0x3bc097(0x4fc))_0x57eda8[_0x3bc097(0x70c)]([_0x3393fe]);else return _0x299856[_0x3bc097(0x8c3)][_0x3bc097(0x58d)][_0x3bc097(0x591)][_0x3bc097(0x351)];}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x5dc),_0x2a3e9b=>{const _0x44952d=_0x16d1ef;if(!SceneManager[_0x44952d(0x37d)]())return;VisuMZ[_0x44952d(0x5ea)](_0x2a3e9b,_0x2a3e9b);const _0x3c09fe=$gameTemp[_0x44952d(0xb38)](),_0x405ffb=_0x2a3e9b[_0x44952d(0x184)];if(!_0x3c09fe)return;BattleManager[_0x44952d(0x723)]++,BattleManager[_0x44952d(0x93a)]=BattleManager[_0x44952d(0x897)][BattleManager[_0x44952d(0x723)]]||null;if(BattleManager['_target']&&_0x405ffb[_0x44952d(0xaff)]()[_0x44952d(0x699)]()!==_0x44952d(0x781)){if('lUZzm'!==_0x44952d(0xa30)){if(!_0x15ccff['BattleCore'][_0x44952d(0x58d)]['BattleLog']['ShowTpDmg'])return;_0x181ba4[_0x44952d(0x8c3)][_0x44952d(0x364)][_0x44952d(0x2c7)](this,_0x29fbab);}else _0x3c09fe['command119']([_0x405ffb]);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Target_PrevTarget',_0x41d204=>{const _0x1cc0d3=_0x16d1ef;if(!SceneManager[_0x1cc0d3(0x37d)]())return;VisuMZ['ConvertParams'](_0x41d204,_0x41d204);const _0x51f882=$gameTemp[_0x1cc0d3(0xb38)](),_0x1b3ed0=_0x41d204['JumpToLabel'];if(!_0x51f882)return;BattleManager['_targetIndex']--,BattleManager['_target']=BattleManager[_0x1cc0d3(0x897)][BattleManager['_targetIndex']]||null,BattleManager['_target']&&_0x1b3ed0[_0x1cc0d3(0xaff)]()[_0x1cc0d3(0x699)]()!==_0x1cc0d3(0x781)&&_0x51f882[_0x1cc0d3(0x70c)]([_0x1b3ed0]);}),PluginManager['registerCommand'](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x9ce),_0x2a1726=>{const _0x2d08c4=_0x16d1ef;if(!SceneManager[_0x2d08c4(0x37d)]())return;VisuMZ['ConvertParams'](_0x2a1726,_0x2a1726);const _0x822229=$gameTemp[_0x2d08c4(0xb38)](),_0x3f0c3c=_0x2a1726[_0x2d08c4(0x5aa)],_0x6ec3aa=_0x2a1726[_0x2d08c4(0x184)];if(!_0x822229)return;const _0x58aeb2=BattleManager['_targetIndex'];for(;;){if(_0x2d08c4(0x9c6)===_0x2d08c4(0x4fa))this['_windowLayer']['x']=(_0x5be8f9[_0x2d08c4(0x7d5)]-_0x4c383b[_0x2d08c4(0xb26)])/0x2,this[_0x2d08c4(0x419)]['y']=(_0x560732[_0x2d08c4(0x842)]-_0x37ac09[_0x2d08c4(0x6be)])/0x2;else{BattleManager[_0x2d08c4(0x723)]=Math[_0x2d08c4(0x677)](BattleManager[_0x2d08c4(0x897)]['length']);if(!_0x3f0c3c)break;if(BattleManager['_targetIndex']!==_0x58aeb2)break;if(BattleManager[_0x2d08c4(0x897)][_0x2d08c4(0xa40)]<=0x1){if(_0x2d08c4(0x498)==='TOJaj'){BattleManager[_0x2d08c4(0x723)]=0x0;break;}else _0xdaf8cb+=_0x5e8327;}}}BattleManager[_0x2d08c4(0x93a)]=BattleManager[_0x2d08c4(0x897)][BattleManager[_0x2d08c4(0x723)]]||null,BattleManager['_target']&&_0x6ec3aa[_0x2d08c4(0xaff)]()[_0x2d08c4(0x699)]()!==_0x2d08c4(0x781)&&_0x822229['command119']([_0x6ec3aa]);}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],'ActSeq_Weapon_ClearActiveWeapon',_0x11cfdc=>{const _0x5898b6=_0x16d1ef;if(!SceneManager[_0x5898b6(0x37d)]())return;VisuMZ[_0x5898b6(0x5ea)](_0x11cfdc,_0x11cfdc);const _0x2b5dba=VisuMZ[_0x5898b6(0x865)](_0x11cfdc[_0x5898b6(0x39a)]);for(const _0x15093a of _0x2b5dba){if('LNoEF'==='gxubv'){_0xe3337c['BattleCore'][_0x5898b6(0x1e9)][_0x5898b6(0x2c7)](this,_0x5430bf),this['clearBattleCoreData'](),this[_0x5898b6(0x9e9)]();const _0xfa4788=this[_0x5898b6(0xb02)]();if(_0xfa4788)_0xfa4788['setBattler'](this);}else{if(!_0x15093a)continue;if(!_0x15093a[_0x5898b6(0x71d)]())continue;_0x15093a[_0x5898b6(0x4f5)]();}}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0xaf6),_0x14f653=>{const _0xe60b5d=_0x16d1ef;if(!SceneManager[_0xe60b5d(0x37d)]())return;VisuMZ[_0xe60b5d(0x5ea)](_0x14f653,_0x14f653);const _0x43b15d=$gameTemp['getLastPluginCommandInterpreter']();let _0x1bfd8d=![];const _0x88515d=_0x14f653[_0xe60b5d(0x184)],_0x287346=VisuMZ[_0xe60b5d(0x865)](_0x14f653['Targets']);for(const _0x1daf62 of _0x287346){if(!_0x1daf62)continue;if(!_0x1daf62[_0xe60b5d(0x71d)]())continue;_0x1daf62['nextActiveWeaponSlot']();if(_0x1daf62['weapons']()['length']>0x0)_0x1bfd8d=!![];else{if(_0xe60b5d(0x6f7)!==_0xe60b5d(0xbd2))_0x1daf62['clearActiveWeaponSlot']();else{if(!_0x47329f[_0xe60b5d(0x37d)]())return;if(!_0xf980ff[_0xe60b5d(0x45c)])return;const _0x44a14e=_0x2fff22[_0xe60b5d(0x438)][_0xe60b5d(0x71a)];if(!_0x44a14e)return;_0x13ae93[_0xe60b5d(0x5ea)](_0x416947,_0x146f98);const _0x29f391=_0x49c503(_0x2c7e5d[_0xe60b5d(0x9fc)])||0x0,_0xa19f38=_0x4878d2(_0x3cbc70[_0xe60b5d(0xaef)]),_0x25c1a7=_0xaffd79[_0xe60b5d(0x9d1)]||0x1,_0x168c4e=_0x2d2b11['EasingType']||'Linear';_0x44a14e['setupMotionBlurImpactFilter'](_0x29f391,_0xa19f38,_0x25c1a7,_0x168c4e);}}}_0x1bfd8d&&_0x88515d[_0xe60b5d(0xaff)]()[_0xe60b5d(0x699)]()!=='UNTITLED'&&_0x43b15d[_0xe60b5d(0x70c)]([_0x88515d]);}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x910),_0x5b9725=>{const _0x4d7cc1=_0x16d1ef;if(!SceneManager[_0x4d7cc1(0x37d)]())return;VisuMZ['ConvertParams'](_0x5b9725,_0x5b9725);let _0xac3b30=_0x5b9725[_0x4d7cc1(0x67d)];_0xac3b30--,_0xac3b30=Math['max'](_0xac3b30,0x0);const _0x27a820=VisuMZ[_0x4d7cc1(0x865)](_0x5b9725[_0x4d7cc1(0x39a)]);for(const _0xff36 of _0x27a820){if(_0x4d7cc1(0x3cc)!=='SVYGV')_0x45abde[_0x4d7cc1(0x8dd)]&&_0x2f3a56[_0x4d7cc1(0x8dd)]();else{if(!_0xff36)continue;if(!_0xff36[_0x4d7cc1(0x71d)]())continue;_0xff36[_0x4d7cc1(0x599)](_0xac3b30);}}}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],_0x16d1ef(0x1ed),_0x46f802=>{const _0x42b4f5=_0x16d1ef;if(!SceneManager[_0x42b4f5(0x37d)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x42b4f5(0x5ea)](_0x46f802,_0x46f802);const _0x5de97b=$gameTemp[_0x42b4f5(0xb38)](),_0x139c38=_0x46f802[_0x42b4f5(0x28b)];if(!_0x5de97b)return;$gameScreen[_0x42b4f5(0xb17)](_0x46f802[_0x42b4f5(0xad2)],_0x46f802[_0x42b4f5(0x9d1)],_0x46f802[_0x42b4f5(0x43c)]);if(_0x139c38)_0x5de97b[_0x42b4f5(0x13b)](_0x42b4f5(0x5fc));}),PluginManager[_0x16d1ef(0x916)](pluginData['name'],_0x16d1ef(0xa76),_0x368ffe=>{const _0x1dce2b=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1dce2b(0x3b9)])return;VisuMZ[_0x1dce2b(0x5ea)](_0x368ffe,_0x368ffe);const _0x56bcaf=$gameTemp[_0x1dce2b(0xb38)](),_0x357010=_0x368ffe['WaitForZoom'];if(!_0x56bcaf)return;$gameScreen[_0x1dce2b(0xb17)](0x1,_0x368ffe[_0x1dce2b(0x9d1)],_0x368ffe['EasingType']);if(_0x357010)_0x56bcaf['setWaitMode'](_0x1dce2b(0x5fc));}),PluginManager[_0x16d1ef(0x916)](pluginData[_0x16d1ef(0x8c4)],'ActSeq_Zoom_WaitForZoom',_0x1b84f3=>{const _0xd1557f=_0x16d1ef;if(!SceneManager[_0xd1557f(0x37d)]())return;if(!Imported[_0xd1557f(0x3b9)])return;const _0x56cc6b=$gameTemp[_0xd1557f(0xb38)]();if(!_0x56cc6b)return;_0x56cc6b[_0xd1557f(0x13b)]('battleZoom');}),VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x8dc)]=Scene_Boot[_0x16d1ef(0xa5b)][_0x16d1ef(0x745)],Scene_Boot[_0x16d1ef(0xa5b)][_0x16d1ef(0x745)]=function(){const _0x1782d7=_0x16d1ef;this['process_VisuMZ_BattleCore_Failsafes'](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x1782d7(0xb32)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ['BattleCore'][_0x1782d7(0x8dc)][_0x1782d7(0x2c7)](this),this[_0x1782d7(0xb08)](),this[_0x1782d7(0x935)](),this[_0x1782d7(0x710)](),this[_0x1782d7(0x251)]();},Scene_Boot[_0x16d1ef(0xa5b)][_0x16d1ef(0xb08)]=function(){const _0x251f58=_0x16d1ef;if(VisuMZ['ParseAllNotetags'])return;this[_0x251f58(0x81a)](),this[_0x251f58(0x9ec)](),this[_0x251f58(0x1eb)]();},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x1d1953=_0x16d1ef,_0x13d82e=$dataSystem[_0x1d1953(0x7d6)]['length'];for(let _0x3a83d7=0x0;_0x3a83d7<_0x13d82e;_0x3a83d7++){const _0x389a94=$dataSystem['attackMotions'][_0x3a83d7];if(_0x389a94)continue;$dataSystem['attackMotions'][_0x3a83d7]=JsonEx[_0x1d1953(0x504)]($dataSystem[_0x1d1953(0x3c9)][0x0]);}},Scene_Boot[_0x16d1ef(0xa5b)][_0x16d1ef(0x4d6)]=function(){const _0x5371d6=_0x16d1ef,_0x25883b=VisuMZ[_0x5371d6(0x8c3)][_0x5371d6(0x58d)];_0x25883b[_0x5371d6(0x6c4)][_0x5371d6(0x7e7)]===undefined&&(_0x5371d6(0x523)!=='Gwzia'?(_0x4780ee[_0x5371d6(0x77e)]=![],this[_0x5371d6(0x6aa)]()):_0x25883b[_0x5371d6(0x6c4)][_0x5371d6(0x7e7)]=_0x5371d6(0x852));_0x25883b[_0x5371d6(0x65f)][_0x5371d6(0x374)]===undefined&&(_0x25883b[_0x5371d6(0x65f)][_0x5371d6(0x374)]=![]);if(_0x25883b['Enemy']['SmoothImage']===undefined){if(_0x5371d6(0x867)!==_0x5371d6(0xa05))_0x25883b[_0x5371d6(0xb6b)][_0x5371d6(0x374)]=!![];else{const _0x5cefa5=_0x4a1111['actor']();if(_0x5cefa5&&_0x5cefa5[_0x5371d6(0xb02)])_0x5cefa5['battler']()[_0x5371d6(0x402)]();_0x3cb773[_0x5371d6(0x8c3)][_0x5371d6(0xbcf)]['call'](this);}}if(_0x25883b[_0x5371d6(0x65f)]['PrioritySortActive']===undefined){if(_0x5371d6(0x899)===_0x5371d6(0x618)){if(this['_motion'][_0x5371d6(0x385)])this[_0x5371d6(0x6d8)]=(this[_0x5371d6(0x6d8)]+0x1)%0x4;else this[_0x5371d6(0x6d8)]<0x2?this[_0x5371d6(0x6d8)]++:this['refreshMotion']();this[_0x5371d6(0x9a2)]=0x0;}else _0x25883b[_0x5371d6(0x65f)][_0x5371d6(0x40b)]=![];}if(_0x25883b['Actor'][_0x5371d6(0x33f)]===undefined){if(_0x5371d6(0x553)!==_0x5371d6(0x553)){if(this['battleLayoutStyle']()===_0x5371d6(0x6a0))return this[_0x5371d6(0x2f1)]();else return this[_0x5371d6(0x134)]()?this['skillItemWindowRectMiddle']():_0x4f4022[_0x5371d6(0x8c3)][_0x5371d6(0xbaf)][_0x5371d6(0x2c7)](this);}else _0x25883b[_0x5371d6(0x65f)][_0x5371d6(0x33f)]=!![];}},VisuMZ['DamageStyles']={},Scene_Boot[_0x16d1ef(0xa5b)][_0x16d1ef(0xb32)]=function(){const _0x38c292=_0x16d1ef;for(const _0x30a397 of VisuMZ[_0x38c292(0x8c3)]['Settings']['Damage'][_0x38c292(0x637)]){if(!_0x30a397)continue;const _0x35ae17=_0x30a397[_0x38c292(0x8c9)][_0x38c292(0xaff)]()[_0x38c292(0x699)]();VisuMZ[_0x38c292(0x7c3)][_0x35ae17]=_0x30a397;}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x900)]={},Scene_Boot['prototype'][_0x16d1ef(0x973)]=function(){const _0x43365b=_0x16d1ef,_0x371c01=VisuMZ['BattleCore'][_0x43365b(0x900)],_0x579483='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0xd95a36=[[_0x43365b(0x8db),_0x43365b(0xbb8)],[_0x43365b(0x8d6),_0x43365b(0xa73)]],_0x575878=[[_0x43365b(0x52b),_0x43365b(0x747)],['%1Damage%2JS',_0x43365b(0x6cb)]],_0x325587=[['',''],[_0x43365b(0x9b0),_0x43365b(0xbb4)],[_0x43365b(0xb0c),_0x43365b(0x483)]];for(const _0x490d2a of _0x575878){for(const _0x11fd50 of _0x325587){for(const _0xfa9c23 of _0xd95a36){if(_0x43365b(0xb7e)===_0x43365b(0x958))return!![];else{const _0x3d41bd=_0x490d2a[0x0][_0x43365b(0x86a)](_0xfa9c23[0x0],_0x11fd50[0x0]),_0x1dec7f=_0x490d2a[0x1]['format'](_0xfa9c23[0x1],_0x11fd50[0x1])[_0x43365b(0x699)](),_0x551fb8=new RegExp(_0x579483[_0x43365b(0x86a)](_0x1dec7f),'i');_0x371c01[_0x3d41bd]=_0x551fb8;}}}}const _0x305cb5=[[_0x43365b(0x94c),_0x43365b(0x240)],[_0x43365b(0xb1c),_0x43365b(0x16a)]];for(const _0x187375 of _0x305cb5){for(const _0x368e3a of _0xd95a36){if(_0x43365b(0xaaf)===_0x43365b(0xa10)){const _0x3d7dea=this[_0x43365b(0x919)]();if(!_0x3d7dea)return null;if(_0x3d7dea[_0x43365b(0x2e7)]()&&_0x3d7dea['isAlive']())return _0x3d7dea;}else{const _0x5be757=_0x187375[0x0][_0x43365b(0x86a)](_0x368e3a[0x0]),_0x1b11ac=_0x187375[0x1]['format'](_0x368e3a[0x1]),_0x528b47=new RegExp(_0x579483[_0x43365b(0x86a)](_0x1b11ac),'i');_0x371c01[_0x5be757]=_0x528b47;}}}const _0x2d86ad=[['%1StartBattleJS',_0x43365b(0x196)],['%1EndBattleJS',_0x43365b(0x3cd)],['BattleVictoryJS',_0x43365b(0x5b2)],[_0x43365b(0x72c),_0x43365b(0x7da)],['EscapeSuccessJS',_0x43365b(0x24a)],[_0x43365b(0x398),_0x43365b(0x9be)],[_0x43365b(0xa9d),_0x43365b(0x256)],[_0x43365b(0x588),_0x43365b(0x387)],['%1RegenerateJS',_0x43365b(0x1aa)]];for(const _0xf772ca of _0x2d86ad){for(const _0x1d4974 of _0xd95a36){const _0x2e4ce0=_0xf772ca[0x0][_0x43365b(0x86a)](_0x1d4974[0x0]),_0x35199a=_0xf772ca[0x1][_0x43365b(0x86a)](_0x1d4974[0x1]),_0x43c14d=new RegExp(_0x579483[_0x43365b(0x86a)](_0x35199a),'i');_0x371c01[_0x2e4ce0]=_0x43c14d;}}},Scene_Boot['prototype'][_0x16d1ef(0x81a)]=function(){const _0x399c79=_0x16d1ef,_0x4bf0aa=$dataSkills['concat']($dataItems);for(const _0x56fc9f of _0x4bf0aa){if(_0x399c79(0x393)!==_0x399c79(0x393)){if(this[_0x399c79(0x965)][_0x399c79(0x838)]!==_0x3224a5)return this['_cache'][_0x399c79(0x838)];let _0x5a44e0=_0x5b8557['BattleCore'][_0x399c79(0x58d)][_0x399c79(0x6c4)][_0x399c79(0x24f)];const _0x57ae11=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x5e913d=this['traitObjects']()[_0x399c79(0x526)](_0x3006ea=>_0x3006ea&&_0x3006ea[_0x399c79(0x954)][_0x399c79(0xaf1)](_0x57ae11)?_0x10f888(_0x57774d['$1'])/0x64:0x0);return _0x5a44e0=_0x5e913d[_0x399c79(0x828)]((_0x50fdde,_0x385554)=>_0x50fdde+_0x385554,_0x5a44e0),this['_cache'][_0x399c79(0x838)]=_0x5a44e0,this[_0x399c79(0x965)][_0x399c79(0x838)][_0x399c79(0x6b6)](0.01,0x1);}else{if(!_0x56fc9f)continue;VisuMZ[_0x399c79(0x8c3)][_0x399c79(0x804)](_0x56fc9f);}}},Scene_Boot[_0x16d1ef(0xa5b)]['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x1bd1e1=_0x16d1ef,_0x2ed285=$dataActors[_0x1bd1e1(0x468)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x5b9f21 of _0x2ed285){if(!_0x5b9f21)continue;VisuMZ[_0x1bd1e1(0x8c3)][_0x1bd1e1(0x7bc)](_0x5b9f21);}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x1701fd=_0x16d1ef,_0x2b1575=VisuMZ[_0x1701fd(0x8c3)][_0x1701fd(0x58d)]['Mechanics'][_0x1701fd(0xa4e)],_0x15caa3=[];for(const _0xb276d9 of _0x2b1575){if(_0x1701fd(0x384)===_0x1701fd(0x384)){const _0x1c0108=$dataTroops[_0xb276d9];if(_0x1c0108)_0x15caa3[_0x1701fd(0x8ad)](JsonEx['makeDeepCopy'](_0x1c0108));}else return!![];}for(const _0x33b287 of $dataTroops){if(!_0x33b287)continue;for(const _0x381213 of _0x15caa3){if(_0x1701fd(0x863)===_0x1701fd(0xb91)){const _0x168264=_0x525c71['BattleCore'][_0x1701fd(0x58d)][_0x1701fd(0x849)],_0x2a4f86=this[_0x1701fd(0xbb5)]('autoBattleUseSkills');return _0x2a4f86?_0x168264[_0x1701fd(0x7a0)]:_0x168264[_0x1701fd(0x7ef)];}else{if(_0x381213['id']===_0x33b287['id'])continue;_0x33b287[_0x1701fd(0x7b4)]=_0x33b287['pages'][_0x1701fd(0x468)](_0x381213[_0x1701fd(0x7b4)]);}}}},Scene_Boot[_0x16d1ef(0xa5b)][_0x16d1ef(0x710)]=function(){const _0x592921=_0x16d1ef,_0x383039=VisuMZ[_0x592921(0x8c3)][_0x592921(0x58d)][_0x592921(0x93b)];if(_0x383039[_0x592921(0x5fa)]>0x0&&$dataCommonEvents[_0x383039['BattleStartEvent']]){const _0x5eb5a5=$dataCommonEvents[_0x383039[_0x592921(0x5fa)]],_0x52823c=_0x5eb5a5[_0x592921(0x85a)][_0x592921(0xa40)]-0x2,_0x247dcc=_0x5eb5a5['list'][_0x52823c];if(_0x247dcc&&_0x247dcc[_0x592921(0x5b5)]!==0xe6){if(_0x592921(0x25f)!==_0x592921(0x28a)){const _0x20fd99={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x3ae3ab=_0x5eb5a5['list'][_0x592921(0x7dc)]();_0x5eb5a5[_0x592921(0x85a)][_0x592921(0xaa3)](_0x20fd99),_0x5eb5a5[_0x592921(0x85a)]['unshift'](_0x3ae3ab);}else{this[_0x592921(0xb3f)][_0x592921(0x706)](),this[_0x592921(0x8ca)]['close']();if(!_0x121e8d[_0x592921(0x8c3)][_0x592921(0x705)])return;if(_0x14c04e[_0x592921(0xa48)]&&_0x2d33a1[_0x592921(0x5fb)]())return;if(_0x5afc5a[_0x592921(0x3f1)]){_0x5c5ff5[_0x592921(0x3f1)][_0x592921(0x345)](_0x592921(0x4d5));const _0x19a75b=_0x130f29['_currentActor'][_0x592921(0xb02)]();if(_0x19a75b)_0x19a75b[_0x592921(0x402)]();}_0x32ac7c[_0x592921(0x3f1)]=null;}}}},Scene_Boot[_0x16d1ef(0xa5b)][_0x16d1ef(0x251)]=function(){const _0x3b1d40=_0x16d1ef;VisuMZ['BattleCore']['CreateCommonEventKeys'](),VisuMZ[_0x3b1d40(0x8c3)][_0x3b1d40(0x288)]($dataSkills),VisuMZ[_0x3b1d40(0x8c3)][_0x3b1d40(0x288)]($dataItems);},VisuMZ['BattleCore'][_0x16d1ef(0x421)]=function(){const _0x3e5738=_0x16d1ef;VisuMZ[_0x3e5738(0x8c3)][_0x3e5738(0x846)]={};for(const _0x2837d8 of $dataCommonEvents){if(!_0x2837d8)continue;if(_0x2837d8[_0x3e5738(0x8c4)][_0x3e5738(0xaf1)](/\[(.*)\]/i)){let _0x5f0287=String(RegExp['$1'])[_0x3e5738(0x541)](/,/g,'')['toUpperCase']()[_0x3e5738(0x699)]();VisuMZ[_0x3e5738(0x8c3)][_0x3e5738(0x846)][_0x5f0287]=_0x2837d8['id'];}}},VisuMZ['BattleCore'][_0x16d1ef(0x288)]=function(_0x3b2de3){const _0x250cc7=_0x16d1ef;for(const _0x72b8eb of _0x3b2de3){if(_0x250cc7(0x8f8)!=='uTcDr'){if(!_0x72b8eb)continue;VisuMZ[_0x250cc7(0x8c3)][_0x250cc7(0xa96)](_0x72b8eb);}else{if(this[_0x250cc7(0xb30)]===_0x7d0588)return;this[_0x250cc7(0x8c8)](),this[_0x250cc7(0xb4e)]();}}},VisuMZ['BattleCore'][_0x16d1ef(0xa96)]=function(_0x2ae7e6){const _0x2da21d=_0x16d1ef;if(!_0x2ae7e6)return;if(!_0x2ae7e6[_0x2da21d(0x8c7)])return;VisuMZ[_0x2da21d(0x8c3)]['_commonEventKey']=VisuMZ['BattleCore'][_0x2da21d(0x846)]||{};const _0xb79a60=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x496aea=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x3598af=[];const _0x24a9bb=_0x2ae7e6['note']['match'](_0xb79a60);if(_0x24a9bb){if('qitFc'!==_0x2da21d(0x67e)){if(this['_homeDuration']<=0x0)return;const _0x543c93=this[_0x2da21d(0x329)],_0x3605aa=this[_0x2da21d(0x70d)],_0xa3ae7c=this[_0x2da21d(0x376)];_0x4fb4d3[_0x2da21d(0x6ce)]?(this[_0x2da21d(0x953)]=this[_0x2da21d(0x592)](this[_0x2da21d(0x953)],this['_targetHomeX'],_0x543c93,_0x3605aa,_0xa3ae7c),this[_0x2da21d(0x9ea)]=this[_0x2da21d(0x592)](this[_0x2da21d(0x9ea)],this[_0x2da21d(0xb78)],_0x543c93,_0x3605aa,_0xa3ae7c)):(this[_0x2da21d(0x953)]=(this[_0x2da21d(0x953)]*(_0x543c93-0x1)+this['_targetHomeX'])/_0x543c93,this['_homeY']=(this[_0x2da21d(0x9ea)]*(_0x543c93-0x1)+this[_0x2da21d(0xb78)])/_0x543c93);this[_0x2da21d(0x329)]--;if(this[_0x2da21d(0x329)]<=0x0)this[_0x2da21d(0x99b)]();}else{for(const _0x3f84b3 of _0x24a9bb){_0x3f84b3['match'](_0xb79a60);const _0x4cc802=String(RegExp['$1'])[_0x2da21d(0x31e)](',')[_0x2da21d(0x526)](_0x437070=>String(_0x437070)[_0x2da21d(0xaff)]()[_0x2da21d(0x699)]());_0x3598af=_0x3598af[_0x2da21d(0x468)](_0x4cc802);}!_0x2ae7e6['note'][_0x2da21d(0xaf1)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x2ae7e6['note']+=_0x2da21d(0xb2a));;}}if(_0x2ae7e6[_0x2da21d(0x954)][_0x2da21d(0xaf1)](_0x496aea)){const _0x31dfbf=String(RegExp['$1'])[_0x2da21d(0x31e)](/[\r\n]+/)[_0x2da21d(0x526)](_0x2764d5=>String(_0x2764d5)['toUpperCase']()[_0x2da21d(0x699)]());_0x3598af=_0x3598af['concat'](_0x31dfbf);!_0x2ae7e6[_0x2da21d(0x954)][_0x2da21d(0xaf1)](/<CUSTOM ACTION SEQUENCE>/i)&&('UnvCm'!==_0x2da21d(0x5ce)?_0xdc295b+=_0x35acb7:_0x2ae7e6['note']+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}for(const _0x40f496 of _0x3598af){if(VisuMZ['BattleCore'][_0x2da21d(0x846)][_0x40f496]){if('zdJIw'!==_0x2da21d(0x941)){const _0x5dca65=VisuMZ[_0x2da21d(0x8c3)][_0x2da21d(0x846)][_0x40f496],_0x437bad={'code':0x2c,'dataId':_0x5dca65,'value1':0x1,'value2':0x0};_0x2ae7e6['effects'][_0x2da21d(0x8ad)](_0x437bad);}else this[_0x2da21d(0x839)](...arguments);}}},Scene_Boot[_0x16d1ef(0xa5b)][_0x16d1ef(0x1eb)]=function(){const _0x9de2cb=_0x16d1ef,_0x3bc054=$dataSkills['concat']($dataItems);for(const _0x29cf7a of _0x3bc054){if(_0x9de2cb(0x542)!=='ZRmmv'){if(this[_0x9de2cb(0x60a)]>0x0){const _0x290d97=this[_0x9de2cb(0x60a)],_0x408eae=this[_0x9de2cb(0x19a)];_0x408eae['x']=(_0x408eae['x']*(_0x290d97-0x1)+this[_0x9de2cb(0x6e7)])/_0x290d97,_0x408eae[_0x9de2cb(0x981)]=(_0x408eae[_0x9de2cb(0x981)]*(_0x290d97-0x1)+0xff)/_0x290d97,this[_0x9de2cb(0x60a)]--;}}else{if(!_0x29cf7a)continue;VisuMZ['BattleCore'][_0x9de2cb(0x5af)](_0x29cf7a);}}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x3df)]=VisuMZ['ParseActorNotetags'],VisuMZ[_0x16d1ef(0x3df)]=function(_0xe7ce5a){const _0x5d7ba4=_0x16d1ef;VisuMZ[_0x5d7ba4(0x8c3)][_0x5d7ba4(0x3df)]&&VisuMZ[_0x5d7ba4(0x8c3)][_0x5d7ba4(0x3df)][_0x5d7ba4(0x2c7)](this,_0xe7ce5a),VisuMZ[_0x5d7ba4(0x8c3)][_0x5d7ba4(0x7bc)](_0xe7ce5a);},VisuMZ['BattleCore']['ParseClassNotetags']=VisuMZ[_0x16d1ef(0x2bb)],VisuMZ[_0x16d1ef(0x2bb)]=function(_0x171e96){const _0x6e57c=_0x16d1ef;VisuMZ[_0x6e57c(0x8c3)][_0x6e57c(0x2bb)]&&VisuMZ['BattleCore'][_0x6e57c(0x2bb)]['call'](this,_0x171e96),VisuMZ[_0x6e57c(0x8c3)][_0x6e57c(0x7bc)](_0x171e96);},VisuMZ['BattleCore']['ParseSkillNotetags']=VisuMZ[_0x16d1ef(0x315)],VisuMZ[_0x16d1ef(0x315)]=function(_0x14c90c){const _0x26ea00=_0x16d1ef;VisuMZ[_0x26ea00(0x8c3)][_0x26ea00(0x315)]&&VisuMZ['BattleCore'][_0x26ea00(0x315)]['call'](this,_0x14c90c),VisuMZ[_0x26ea00(0x8c3)][_0x26ea00(0x804)](_0x14c90c),VisuMZ[_0x26ea00(0x8c3)][_0x26ea00(0x5af)](_0x14c90c);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x98a)]=VisuMZ[_0x16d1ef(0x98a)],VisuMZ[_0x16d1ef(0x98a)]=function(_0x3d8717){const _0x7744f1=_0x16d1ef;if(VisuMZ[_0x7744f1(0x8c3)][_0x7744f1(0x98a)]){if(_0x7744f1(0xba7)!==_0x7744f1(0x44e))VisuMZ[_0x7744f1(0x8c3)][_0x7744f1(0x98a)]['call'](this,_0x3d8717);else return _0x13c7cf['BattleCore'][_0x7744f1(0x58d)][_0x7744f1(0x6c4)][_0x7744f1(0x621)][_0x7744f1(0x2c7)](this,_0x215a55,_0x21a08a);}VisuMZ[_0x7744f1(0x8c3)][_0x7744f1(0x804)](_0x3d8717),VisuMZ[_0x7744f1(0x8c3)][_0x7744f1(0x5af)](_0x3d8717);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x69b)]=VisuMZ[_0x16d1ef(0x69b)],VisuMZ[_0x16d1ef(0x69b)]=function(_0x4f38ef){const _0x36315f=_0x16d1ef;VisuMZ['BattleCore'][_0x36315f(0x69b)]&&VisuMZ['BattleCore'][_0x36315f(0x69b)][_0x36315f(0x2c7)](this,_0x4f38ef),VisuMZ[_0x36315f(0x8c3)][_0x36315f(0x7bc)](_0x4f38ef);},VisuMZ[_0x16d1ef(0x8c3)]['ParseArmorNotetags']=VisuMZ['ParseArmorNotetags'],VisuMZ[_0x16d1ef(0xa82)]=function(_0x3ffa57){const _0x3500d2=_0x16d1ef;VisuMZ[_0x3500d2(0x8c3)][_0x3500d2(0xa82)]&&VisuMZ[_0x3500d2(0x8c3)][_0x3500d2(0xa82)][_0x3500d2(0x2c7)](this,_0x3ffa57),VisuMZ[_0x3500d2(0x8c3)]['Parse_Notetags_TraitObjects'](_0x3ffa57);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x1d9)]=VisuMZ[_0x16d1ef(0x1d9)],VisuMZ[_0x16d1ef(0x1d9)]=function(_0x20a9b3){const _0x4dd791=_0x16d1ef;if(VisuMZ[_0x4dd791(0x8c3)][_0x4dd791(0x1d9)]){if(_0x4dd791(0x6cc)!=='CoKcl')VisuMZ['BattleCore']['ParseEnemyNotetags']['call'](this,_0x20a9b3);else{if(!_0x821b89[_0x4dd791(0xb9b)]())return;const _0x5d976d=this[_0x4dd791(0xb02)]();if(!_0x5d976d)return;if(_0x35161c===_0x5d976d[_0x4dd791(0x37a)])return;let _0x1d1213=![];if(this['isActor']()){if(_0x5b8774>_0x5d976d[_0x4dd791(0x37a)])_0x1d1213=!![];if(_0x5ab6e1<_0x5d976d[_0x4dd791(0x37a)])_0x1d1213=![];}else{if(this[_0x4dd791(0x8fc)]()){if(_0x5f47eb>_0x5d976d['_baseX'])_0x1d1213=![];if(_0x1717d0<_0x5d976d[_0x4dd791(0x37a)])_0x1d1213=!![];}};this['setBattlerFlip'](_0x4c9f1f?!_0x1d1213:_0x1d1213),_0x5d976d[_0x4dd791(0xa59)]();}}VisuMZ[_0x4dd791(0x8c3)][_0x4dd791(0x7bc)](_0x20a9b3);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xb5e)]=VisuMZ['ParseStateNotetags'],VisuMZ[_0x16d1ef(0xb5e)]=function(_0x2d018f){const _0x43cbea=_0x16d1ef;if(VisuMZ[_0x43cbea(0x8c3)][_0x43cbea(0xb5e)]){if(_0x43cbea(0x52a)!==_0x43cbea(0x5be))VisuMZ[_0x43cbea(0x8c3)][_0x43cbea(0xb5e)]['call'](this,_0x2d018f);else return _0x3e367f['BattleCore'][_0x43cbea(0x58d)][_0x43cbea(0xb6b)][_0x43cbea(0x1c0)];}VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x2d018f);},VisuMZ[_0x16d1ef(0x8c3)]['Parse_Notetags_Action']=function(_0x5afaef){const _0x93f6fc=_0x16d1ef,_0x1175cd=[_0x93f6fc(0x204),_0x93f6fc(0x445),_0x93f6fc(0xb77),_0x93f6fc(0xbd1),_0x93f6fc(0x9ca),_0x93f6fc(0x847),_0x93f6fc(0x287),_0x93f6fc(0x9f9)];for(const _0x573280 of _0x1175cd){if('Mmaee'!==_0x93f6fc(0xb4b))VisuMZ[_0x93f6fc(0x8c3)][_0x93f6fc(0x27e)](_0x5afaef,_0x573280);else{if(!_0x1d2cba[_0x93f6fc(0x37d)]())return;if(!_0x33b785['VisuMZ_3_ActSeqCamera'])return;_0x52069d[_0x93f6fc(0x5ea)](_0x11b7e,_0x31d626);const _0x5de06e=_0x40bf8c[_0x93f6fc(0xb38)](),_0x52b4e6=_0x3b51fb[_0x93f6fc(0xbce)];if(!_0x5de06e)return;_0x543e4e[_0x93f6fc(0x6ba)](_0x3cf763[_0x93f6fc(0x9fc)],_0x4e45be['Duration'],_0x1bfc59[_0x93f6fc(0x43c)]);if(_0x52b4e6)_0x5de06e[_0x93f6fc(0x13b)](_0x93f6fc(0x144));}}const _0x5f63e0=_0x5afaef[_0x93f6fc(0x954)];_0x5f63e0['match'](/<ALWAYS CRITICAL/i)&&(_0x93f6fc(0x652)!==_0x93f6fc(0x652)?this[_0x93f6fc(0x959)]['bitmap']['smooth']!==this['_battler']['battlerSmoothImage']()&&(this[_0x93f6fc(0x959)][_0x93f6fc(0xb74)][_0x93f6fc(0x185)]=this[_0x93f6fc(0xa74)][_0x93f6fc(0x7a1)]()):_0x5afaef['damage']['critical']=!![]),_0x5f63e0['match'](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x5afaef['repeats']=Math[_0x93f6fc(0x26b)](0x1,Number(RegExp['$1']))),_0x5f63e0['match'](/<TARGET:[ ](.*)>/i)&&(_0x5afaef[_0x93f6fc(0x482)]=String(RegExp['$1'])['toUpperCase']()['trim']());},VisuMZ[_0x16d1ef(0x8c3)]['Parse_Notetags_TraitObjects']=function(_0x2b6f52){const _0x37efc4=_0x16d1ef,_0x234dd5=[_0x37efc4(0x560),_0x37efc4(0x4de),_0x37efc4(0x215),_0x37efc4(0x1f5),'PreApplyAsTargetJS',_0x37efc4(0x3d1),'PreDamageAsTargetJS',_0x37efc4(0x381),_0x37efc4(0x9ca),_0x37efc4(0x847),'PreEndActionJS','PostEndActionJS',_0x37efc4(0x6bb),'PostStartBattleJS','PreEndBattleJS',_0x37efc4(0x957),_0x37efc4(0x9b5),_0x37efc4(0x72c),_0x37efc4(0x885),_0x37efc4(0x398),_0x37efc4(0xa50),'PostStartTurnJS','PreEndTurnJS',_0x37efc4(0x91e),_0x37efc4(0x6fe),_0x37efc4(0x814)];for(const _0x1c0a3b of _0x234dd5){if('LuJcv'==='LuJcv')VisuMZ[_0x37efc4(0x8c3)]['createJS'](_0x2b6f52,_0x1c0a3b);else{if(!_0x47f80c)return 0x0;let _0x381677=0x0;const _0x488028=_0x261cc3[_0x37efc4(0x954)];return _0x488028[_0x37efc4(0xaf1)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x381677+=_0x31fc2c(_0x13c7bb['$1'])),_0x488028[_0x37efc4(0xaf1)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x381677+=_0x1eac65(_0x33d351['$2'])),_0x381677;}}},VisuMZ[_0x16d1ef(0x8c3)]['Parse_Notetags_Targets']=function(_0xedb42c){const _0x342a06=_0x16d1ef,_0x13afd4=_0xedb42c['note'];if(_0x13afd4[_0x342a06(0xaf1)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){if(_0x342a06(0x5b3)!==_0x342a06(0xbcb)){const _0x5edcba=String(RegExp['$1']),_0x567d63=VisuMZ[_0x342a06(0x8c3)][_0x342a06(0x6d9)](_0xedb42c,'Targets');VisuMZ['BattleCore'][_0x342a06(0x87e)](_0x5edcba,_0x567d63);}else this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x342a06(0x4d6)](),this[_0x342a06(0xb32)](),this[_0x342a06(0x973)](),_0x3c1fdd[_0x342a06(0x8c3)][_0x342a06(0x8dc)]['call'](this),this[_0x342a06(0xb08)](),this[_0x342a06(0x935)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this['process_VisuMZ_BattleCore_CommonEventKeys']();}if(_0x13afd4[_0x342a06(0xaf1)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if(_0x342a06(0x4e6)===_0x342a06(0x4e6)){const _0x463cab=String(RegExp['$1']),_0x4ea662=VisuMZ['BattleCore']['createKeyJS'](_0xedb42c,_0x342a06(0x292));VisuMZ[_0x342a06(0x8c3)][_0x342a06(0xa08)](_0x463cab,_0x4ea662);}else{_0x107d4c[_0x342a06(0xa5b)][_0x342a06(0x70e)][_0x342a06(0x2c7)](this);const _0x2e0ca8=this[_0x342a06(0x316)][_0x342a06(0x92b)]();this[_0x342a06(0x772)]!==_0x2e0ca8&&(this['_battlerName']=_0x2e0ca8,this[_0x342a06(0x959)][_0x342a06(0xb74)]=_0x1fdc65[_0x342a06(0x55b)](_0x2e0ca8)),this[_0x342a06(0x959)]&&this[_0x342a06(0x959)]['bitmap']&&this[_0x342a06(0xa74)]&&(this[_0x342a06(0x959)]['bitmap'][_0x342a06(0x185)]!==this['_battler'][_0x342a06(0x7a1)]()&&(this[_0x342a06(0x959)]['bitmap'][_0x342a06(0x185)]=this[_0x342a06(0xa74)][_0x342a06(0x7a1)]()));}}},VisuMZ[_0x16d1ef(0x8c3)]['JS']={},VisuMZ[_0x16d1ef(0x8c3)]['createJS']=function(_0x3f9612,_0xf31bd9){const _0x11902b=_0x16d1ef,_0x4861a9=_0x3f9612[_0x11902b(0x954)];if(_0x4861a9[_0x11902b(0xaf1)](VisuMZ[_0x11902b(0x8c3)][_0x11902b(0x900)][_0xf31bd9])){const _0x409695=RegExp['$1'],_0x32f5ae=_0x11902b(0x570)[_0x11902b(0x86a)](_0x409695),_0x316589=VisuMZ['BattleCore'][_0x11902b(0x6d9)](_0x3f9612,_0xf31bd9);VisuMZ['BattleCore']['JS'][_0x316589]=new Function(_0x32f5ae);}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x6d9)]=function(_0x870971,_0x431dc6){const _0xc0779c=_0x16d1ef;let _0x1d6250='';if($dataActors['includes'](_0x870971))_0x1d6250=_0xc0779c(0x889)[_0xc0779c(0x86a)](_0x870971['id'],_0x431dc6);if($dataClasses['includes'](_0x870971))_0x1d6250=_0xc0779c(0x7a4)[_0xc0779c(0x86a)](_0x870971['id'],_0x431dc6);if($dataSkills[_0xc0779c(0x4f8)](_0x870971))_0x1d6250=_0xc0779c(0x4c1)[_0xc0779c(0x86a)](_0x870971['id'],_0x431dc6);if($dataItems[_0xc0779c(0x4f8)](_0x870971))_0x1d6250='Item-%1-%2'[_0xc0779c(0x86a)](_0x870971['id'],_0x431dc6);if($dataWeapons[_0xc0779c(0x4f8)](_0x870971))_0x1d6250='Weapon-%1-%2'[_0xc0779c(0x86a)](_0x870971['id'],_0x431dc6);if($dataArmors[_0xc0779c(0x4f8)](_0x870971))_0x1d6250=_0xc0779c(0x53d)[_0xc0779c(0x86a)](_0x870971['id'],_0x431dc6);if($dataEnemies['includes'](_0x870971))_0x1d6250=_0xc0779c(0x3cb)[_0xc0779c(0x86a)](_0x870971['id'],_0x431dc6);if($dataStates[_0xc0779c(0x4f8)](_0x870971))_0x1d6250='State-%1-%2'[_0xc0779c(0x86a)](_0x870971['id'],_0x431dc6);return _0x1d6250;},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x87e)]=function(_0x3e562a,_0x3b8d24){const _0x13ed67=_0x16d1ef,_0x4441d7=_0x13ed67(0x5ff)[_0x13ed67(0x86a)](_0x3e562a);VisuMZ['BattleCore']['JS'][_0x3b8d24]=new Function(_0x4441d7);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xa08)]=function(_0x2b2755,_0x5a7609){const _0xd320c5=_0x16d1ef,_0xe6c193=_0xd320c5(0x678)['format'](_0x2b2755);VisuMZ['BattleCore']['JS'][_0x5a7609]=new Function(_0xe6c193);},TextManager['autoBattle']=VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x58d)][_0x16d1ef(0x810)][_0x16d1ef(0xb63)],TextManager[_0x16d1ef(0x7d7)]=VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x58d)][_0x16d1ef(0x849)]['StartName'],TextManager['autoBattleStyle']=VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x58d)][_0x16d1ef(0x849)][_0x16d1ef(0x7e8)],TextManager[_0x16d1ef(0x9d7)]=VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x58d)][_0x16d1ef(0xa27)]['Name'],ColorManager[_0x16d1ef(0x70f)]=function(_0x5192f3){const _0x4e7286=_0x16d1ef;return _0x5192f3=String(_0x5192f3),_0x5192f3[_0x4e7286(0xaf1)](/#(.*)/i)?_0x4e7286(0x8b2)[_0x4e7286(0x86a)](String(RegExp['$1'])):this[_0x4e7286(0x324)](Number(_0x5192f3));},DataManager[_0x16d1ef(0x657)]=function(_0x585056){const _0x43d560=_0x16d1ef;if(_0x585056[_0x43d560(0x954)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x299275=String(RegExp['$1'])[_0x43d560(0xaff)]()['trim']();if(_0x299275===_0x43d560(0x596))return _0x43d560(0x596);if(VisuMZ[_0x43d560(0x7c3)][_0x299275])return _0x299275;}const _0x2f5723=VisuMZ['BattleCore'][_0x43d560(0x58d)][_0x43d560(0x6c4)][_0x43d560(0x30d)][_0x43d560(0xaff)]()[_0x43d560(0x699)]();if(VisuMZ[_0x43d560(0x7c3)][_0x2f5723])return _0x2f5723;return _0x43d560(0x596);},DataManager['getStypeIdWithName']=function(_0x536e11){const _0x348a1b=_0x16d1ef;_0x536e11=_0x536e11[_0x348a1b(0xaff)]()[_0x348a1b(0x699)](),this[_0x348a1b(0x5a5)]=this[_0x348a1b(0x5a5)]||{};if(this['_stypeIDs'][_0x536e11])return this[_0x348a1b(0x5a5)][_0x536e11];for(let _0x436ed3=0x1;_0x436ed3<0x64;_0x436ed3++){if(!$dataSystem[_0x348a1b(0xb6d)][_0x436ed3])continue;let _0x31f1d7=$dataSystem['skillTypes'][_0x436ed3][_0x348a1b(0xaff)]()[_0x348a1b(0x699)]();_0x31f1d7=_0x31f1d7[_0x348a1b(0x541)](/\x1I\[(\d+)\]/gi,''),_0x31f1d7=_0x31f1d7[_0x348a1b(0x541)](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x31f1d7]=_0x436ed3;}return this['_stypeIDs'][_0x536e11]||0x0;},DataManager[_0x16d1ef(0x3ae)]=function(_0x1129ea){const _0x2a0bad=_0x16d1ef;_0x1129ea=_0x1129ea[_0x2a0bad(0xaff)]()[_0x2a0bad(0x699)](),this[_0x2a0bad(0x3a4)]=this[_0x2a0bad(0x3a4)]||{};if(this[_0x2a0bad(0x3a4)][_0x1129ea])return this[_0x2a0bad(0x3a4)][_0x1129ea];for(const _0x2a44b9 of $dataSkills){if(_0x2a0bad(0x2a8)!=='IvATx')this['showHelpWindow']();else{if(!_0x2a44b9)continue;this[_0x2a0bad(0x3a4)][_0x2a44b9[_0x2a0bad(0x8c4)][_0x2a0bad(0xaff)]()[_0x2a0bad(0x699)]()]=_0x2a44b9['id'];}}return this['_skillIDs'][_0x1129ea]||0x0;},DataManager[_0x16d1ef(0x4fe)]=function(_0x4ed9be){const _0x23cfa9=_0x16d1ef;_0x4ed9be=_0x4ed9be[_0x23cfa9(0xaff)]()[_0x23cfa9(0x699)](),this[_0x23cfa9(0x28e)]=this[_0x23cfa9(0x28e)]||{};if(this[_0x23cfa9(0x28e)][_0x4ed9be])return this[_0x23cfa9(0x28e)][_0x4ed9be];for(const _0x635435 of $dataEnemies){if(!_0x635435)continue;this[_0x23cfa9(0x28e)][_0x635435[_0x23cfa9(0x8c4)][_0x23cfa9(0xaff)]()[_0x23cfa9(0x699)]()]=_0x635435['id'];}return this['_enemyIDs'][_0x4ed9be]||0x0;},DataManager[_0x16d1ef(0x6a9)]=function(_0x4e924d){const _0x3be380=_0x16d1ef;_0x4e924d=_0x4e924d[_0x3be380(0xaff)]()[_0x3be380(0x699)](),this[_0x3be380(0xa57)]=this[_0x3be380(0xa57)]||{};if(this['_wtypeIDs'][_0x4e924d])return this[_0x3be380(0xa57)][_0x4e924d];for(let _0x1de067=0x1;_0x1de067<0x64;_0x1de067++){if(!$dataSystem[_0x3be380(0x7d6)][_0x1de067])continue;let _0x437f5e=$dataSystem['weaponTypes'][_0x1de067][_0x3be380(0xaff)]()[_0x3be380(0x699)]();_0x437f5e=_0x437f5e[_0x3be380(0x541)](/\x1I\[(\d+)\]/gi,''),_0x437f5e=_0x437f5e['replace'](/\\I\[(\d+)\]/gi,''),this[_0x3be380(0xa57)][_0x437f5e]=_0x1de067;}return this[_0x3be380(0xa57)]['BARE\x20HANDS']=0x0,this['_wtypeIDs'][_0x4e924d]||0x0;},DataManager[_0x16d1ef(0xb4d)]=function(_0x41a39e){const _0x201746=_0x16d1ef,_0x1636a0='\x5cI[%1]%2';let _0x4a33be=_0x41a39e[_0x201746(0x80b)],_0x3ce334=_0x41a39e['name'];const _0x36db06=_0x41a39e[_0x201746(0x954)];return _0x36db06['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x4a33be=Number(RegExp['$1'])),_0x36db06[_0x201746(0xaf1)](/<DISPLAY TEXT: (.*)>/i)&&(_0x3ce334=String(RegExp['$1'])),_0x1636a0[_0x201746(0x86a)](_0x4a33be,_0x3ce334);},DataManager[_0x16d1ef(0x567)]=function(_0x5b3649){const _0x3b1929=_0x16d1ef;if(_0x5b3649[_0x3b1929(0x954)]['match'](/<COMMAND TEXT: (.*)>/i)){if('XCOsU'===_0x3b1929(0x420))this[_0x3b1929(0x4d8)]=new _0x5ea8af(),this[_0x3b1929(0x339)](this[_0x3b1929(0x4d8)]);else return String(RegExp['$1']);}else return _0x5b3649[_0x3b1929(0x8c4)];},DataManager[_0x16d1ef(0x8df)]=function(_0x21c071){const _0x5108ed=_0x16d1ef;if(_0x21c071['note'][_0x5108ed(0xaf1)](/<COMMAND ICON: (\d+)>/i)){if(_0x5108ed(0x50f)!=='nldPO')return Number(RegExp['$1']);else this[_0x5108ed(0x862)](_0x5108ed(0x306));}else return _0x21c071[_0x5108ed(0x80b)];},DataManager[_0x16d1ef(0x991)]=function(_0x1323bb){const _0x363b44=_0x16d1ef,_0x14f8ba=$dataEnemies[_0x1323bb];if(_0x14f8ba){if(_0x14f8ba[_0x363b44(0x954)][_0x363b44(0xaf1)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x49b553=String(RegExp['$1'])[_0x363b44(0x31e)](/[\r\n]+/)[_0x363b44(0x9ba)](''),_0xb4ce9f=this[_0x363b44(0x4ca)](_0x49b553);_0x1323bb=this[_0x363b44(0x4fe)](_0xb4ce9f)||_0x1323bb,_0x1323bb=DataManager[_0x363b44(0x991)](_0x1323bb);}}return _0x1323bb;},DataManager[_0x16d1ef(0x4ca)]=function(_0x46a259){const _0xe2533f=_0x16d1ef;let _0x16e9f8=0x0;const _0x1fb7b1={};for(const _0x1d7988 of _0x46a259){if(_0x1d7988[_0xe2533f(0xaf1)](/(.*):[ ](\d+)/i)){const _0x273ce1=String(RegExp['$1'])[_0xe2533f(0x699)](),_0x2b7edd=Number(RegExp['$2']);_0x1fb7b1[_0x273ce1]=_0x2b7edd,_0x16e9f8+=_0x2b7edd;}else{if(_0x1d7988[_0xe2533f(0xaf1)](/(.*):[ ](\d+\.?\d+)/i)){const _0x2f3f5b=String(RegExp['$1'])['trim'](),_0xc85ad0=Number(RegExp['$2']);_0x1fb7b1[_0x2f3f5b]=_0xc85ad0,_0x16e9f8+=_0xc85ad0;}else _0x1d7988!==''&&(_0x1fb7b1[_0x1d7988]=0x1,_0x16e9f8++);}}if(_0x16e9f8<=0x0)return'';let _0x1baf61=Math[_0xe2533f(0x432)]()*_0x16e9f8;for(const _0x35641b in _0x1fb7b1){_0x1baf61-=_0x1fb7b1[_0x35641b];if(_0x1baf61<=0x0)return _0x35641b;}return'';},DataManager[_0x16d1ef(0x434)]=function(_0xd7421d){const _0x2836a0=_0x16d1ef;if(!_0xd7421d)return![];if(!VisuMZ['BattleCore']['Settings'][_0x2836a0(0x7ec)][_0x2836a0(0x456)])return![];if(_0xd7421d[_0x2836a0(0x954)][_0x2836a0(0xaf1)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0xd7421d[_0x2836a0(0x954)][_0x2836a0(0xaf1)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x413c8b of _0xd7421d[_0x2836a0(0x8c7)]){if(_0x2836a0(0x1ad)===_0x2836a0(0x95f)){if(!_0x1426d5[_0x2836a0(0x8c3)][_0x2836a0(0x58d)]['Enemy'][_0x2836a0(0x696)])return;this[_0x2836a0(0x30b)]=new _0x335446(),this[_0x2836a0(0x30b)]['x']=this['_windowLayer']['x'],this['_enemyNameContainer']['y']=this[_0x2836a0(0x419)]['y'];const _0xe2f1eb=this[_0x2836a0(0x4ef)][_0x2836a0(0x6f3)](this[_0x2836a0(0x419)]);this[_0x2836a0(0x76e)](this[_0x2836a0(0x30b)],_0xe2f1eb);for(let _0x5eead8=0x0;_0x5eead8<0x8;_0x5eead8++){const _0x2d65d8=new _0x48773e(_0x5eead8);this[_0x2836a0(0x30b)]['addChild'](_0x2d65d8);}}else{if(!_0x413c8b)continue;if(_0x413c8b[_0x2836a0(0x5b5)]===Game_Action[_0x2836a0(0x313)])return!![];}}return![];},DataManager[_0x16d1ef(0x4f1)]=function(_0x1d62e2){const _0x170b62=_0x16d1ef,_0x176d4a=$dataTroops[_0x1d62e2];if(!_0x176d4a)return'';let _0x2bc9ec='';_0x2bc9ec+=_0x176d4a[_0x170b62(0x8c4)];for(const _0x5bdcb8 of _0x176d4a[_0x170b62(0x7b4)]){for(const _0x3113d4 of _0x5bdcb8['list']){[0x6c,0x198][_0x170b62(0x4f8)](_0x3113d4['code'])&&(_0x2bc9ec+='\x0a',_0x2bc9ec+=_0x3113d4['parameters'][0x0]);}}return _0x2bc9ec;},ConfigManager[_0x16d1ef(0x7db)]=ConfigManager[_0x16d1ef(0x7db)]??![],ConfigManager['autoBattleUseSkills']=ConfigManager[_0x16d1ef(0x893)]??![],ConfigManager[_0x16d1ef(0x9d7)]=ConfigManager[_0x16d1ef(0x9d7)]??!![],VisuMZ[_0x16d1ef(0x8c3)]['ConfigManager_makeData']=ConfigManager[_0x16d1ef(0x2d9)],ConfigManager[_0x16d1ef(0x2d9)]=function(){const _0x28da9f=_0x16d1ef,_0x8f8be6=VisuMZ[_0x28da9f(0x8c3)]['ConfigManager_makeData']['call'](this);return _0x8f8be6['autoBattleAtStart']=this['autoBattleAtStart'],_0x8f8be6[_0x28da9f(0x893)]=this['autoBattleUseSkills'],_0x8f8be6[_0x28da9f(0x9d7)]=this['visualHpGauge'],_0x8f8be6;},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x413)]=ConfigManager['applyData'],ConfigManager['applyData']=function(_0x59e652){const _0x429911=_0x16d1ef;VisuMZ['BattleCore'][_0x429911(0x413)][_0x429911(0x2c7)](this,_0x59e652),'autoBattleAtStart'in _0x59e652?_0x429911(0xb2f)==='lqTKr'?this['autoBattleAtStart']=_0x59e652[_0x429911(0x7db)]:this[_0x429911(0x6e6)]():this[_0x429911(0x7db)]=![],_0x429911(0x893)in _0x59e652?this['autoBattleUseSkills']=_0x59e652[_0x429911(0x893)]:this['autoBattleUseSkills']=![],_0x429911(0x9d7)in _0x59e652?this[_0x429911(0x9d7)]=_0x59e652[_0x429911(0x9d7)]:this[_0x429911(0x9d7)]=!![];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x945)]=BattleManager[_0x16d1ef(0x14c)],BattleManager['initMembers']=function(){const _0x3d4698=_0x16d1ef;VisuMZ[_0x3d4698(0x8c3)][_0x3d4698(0x945)][_0x3d4698(0x2c7)](this),this[_0x3d4698(0x35d)]=[];},BattleManager[_0x16d1ef(0x8ba)]=function(){const _0x290558=_0x16d1ef;if(!SceneManager[_0x290558(0x37d)]())return;const _0x3414db=SceneManager[_0x290558(0x438)][_0x290558(0x2f5)];if(_0x3414db)_0x3414db[_0x290558(0x3ce)]();},BattleManager['battleSys']=function(){const _0x3b8965=_0x16d1ef;if(BattleManager[_0x3b8965(0x86c)]())return'TPB';return _0x3b8965(0xbdc);},BattleManager[_0x16d1ef(0x89a)]=function(_0x227152){const _0x5d53a5=_0x16d1ef;return _0x227152=_0x227152['toUpperCase']()[_0x5d53a5(0x699)](),this['battleSys']()===_0x227152;},BattleManager[_0x16d1ef(0x3bc)]=function(){const _0x24f39b=_0x16d1ef;return this[_0x24f39b(0x89a)]('DTB');},BattleManager[_0x16d1ef(0xa77)]=function(){return this['isDTB']();},BattleManager[_0x16d1ef(0x232)]=function(){return!this['isTurnBased']();},BattleManager[_0x16d1ef(0x85d)]=function(){const _0x3614e6=_0x16d1ef;return!this[_0x3614e6(0xa77)]()&&!this[_0x3614e6(0x232)]();},BattleManager[_0x16d1ef(0x157)]=function(_0x2f452d){const _0x59d19b=_0x16d1ef;$gameParty[_0x59d19b(0x157)](_0x2f452d),$gameTroop[_0x59d19b(0x157)](_0x2f452d);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x303)]=BattleManager[_0x16d1ef(0x22d)],BattleManager['startBattle']=function(){const _0x595701=_0x16d1ef;this[_0x595701(0x784)]=![],this[_0x595701(0xa16)]=ConfigManager['autoBattleAtStart'],this[_0x595701(0x157)](_0x595701(0x6bb)),VisuMZ[_0x595701(0x8c3)][_0x595701(0x303)][_0x595701(0x2c7)](this),this[_0x595701(0x157)]('PostStartBattleJS');},BattleManager[_0x16d1ef(0x3d4)]=function(_0x326335){const _0x1af6a6=_0x16d1ef,_0x4235b3=VisuMZ[_0x1af6a6(0x8c3)][_0x1af6a6(0x58d)][_0x1af6a6(0x93b)];_0x4235b3[_0x1af6a6(0x96e)]&&VisuMZ[_0x1af6a6(0x8c3)]['CheckMapBattleEventValid'](_0x4235b3[_0x1af6a6(0x96e)])&&(_0x1af6a6(0x96a)!==_0x1af6a6(0x823)?$gameTemp[_0x1af6a6(0x5ab)](_0x4235b3['BattleEndEvent']):_0x5f4915['damage'][_0x1af6a6(0x1f7)]=!![]);const _0x24dc6d=_0x1af6a6(0x6b7)[_0x1af6a6(0x86a)](_0x326335);_0x4235b3[_0x24dc6d]&&VisuMZ[_0x1af6a6(0x8c3)][_0x1af6a6(0x282)](_0x4235b3[_0x24dc6d])&&$gameTemp[_0x1af6a6(0x5ab)](_0x4235b3[_0x24dc6d]);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x51d)]=BattleManager[_0x16d1ef(0x679)],BattleManager[_0x16d1ef(0x679)]=function(){const _0x15e214=_0x16d1ef;if(this[_0x15e214(0x6eb)]==='turn'){if($gameTemp[_0x15e214(0x3c0)]())return![];}return VisuMZ[_0x15e214(0x8c3)]['BattleManager_checkBattleEnd'][_0x15e214(0x2c7)](this);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x92d)]=BattleManager[_0x16d1ef(0x1e7)],BattleManager[_0x16d1ef(0x1e7)]=function(){const _0x1e2f2d=_0x16d1ef;this[_0x1e2f2d(0x157)]('BattleVictoryJS'),VisuMZ['BattleCore'][_0x1e2f2d(0x92d)][_0x1e2f2d(0x2c7)](this),this[_0x1e2f2d(0x3d4)](_0x1e2f2d(0x1a7));},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x40f)]=BattleManager['processDefeat'],BattleManager[_0x16d1ef(0x163)]=function(){const _0x41ff48=_0x16d1ef;this[_0x41ff48(0x157)](_0x41ff48(0x72c)),VisuMZ[_0x41ff48(0x8c3)]['BattleManager_processDefeat'][_0x41ff48(0x2c7)](this),this[_0x41ff48(0x3d4)](_0x41ff48(0x98b));},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x848)]=BattleManager['endBattle'],BattleManager['endBattle']=function(_0x4aa586){const _0x7ca97d=_0x16d1ef;this[_0x7ca97d(0x784)]=!![],this[_0x7ca97d(0xa16)]=![],this[_0x7ca97d(0x157)]('PreEndBattleJS'),VisuMZ[_0x7ca97d(0x8c3)]['BattleManager_endBattle'][_0x7ca97d(0x2c7)](this,_0x4aa586),this[_0x7ca97d(0x157)]('PostEndBattleJS');},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x581)]=BattleManager[_0x16d1ef(0xa19)],BattleManager['startTurn']=function(){const _0x4e4632=_0x16d1ef;if(this[_0x4e4632(0xa77)]())this[_0x4e4632(0x157)](_0x4e4632(0xa50));VisuMZ['BattleCore'][_0x4e4632(0x581)][_0x4e4632(0x2c7)](this);if(this['isTurnBased']())this[_0x4e4632(0x157)](_0x4e4632(0x8d9));},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x27a)]=BattleManager[_0x16d1ef(0xaca)],BattleManager[_0x16d1ef(0xaca)]=function(){const _0x262e7f=_0x16d1ef,_0x156309=this[_0x262e7f(0x515)][_0x262e7f(0x27b)](),_0x3e19b0=this[_0x262e7f(0x515)];_0x156309&&_0x156309[_0x262e7f(0x4db)]()===_0x3e19b0&&_0x156309[_0x262e7f(0xa7d)](_0x262e7f(0x9ca));VisuMZ[_0x262e7f(0x8c3)]['BattleManager_startAction'][_0x262e7f(0x2c7)](this);if(_0x156309&&_0x156309[_0x262e7f(0x4db)]()===_0x3e19b0){if(_0x262e7f(0x751)==='BNDfD'){const _0x4c2e8c=_0x5e31f7[_0x262e7f(0x6f3)](_0x3cebaf[_0x262e7f(0xaff)]()['trim']());_0x4c2e8c>=0x0&&_0x4c2e8c<=0x7&&_0x47520a[_0x262e7f(0xa1c)](_0x4c2e8c)&&_0x41a0e0[_0x262e7f(0x7f2)](_0x4c2e8c);}else _0x156309[_0x262e7f(0xa7d)](_0x262e7f(0x847));}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x411)]=BattleManager[_0x16d1ef(0x552)],BattleManager[_0x16d1ef(0x552)]=function(){const _0x32180b=_0x16d1ef,_0x34d838=this[_0x32180b(0x7c5)],_0x5bfc39=this[_0x32180b(0x515)];_0x34d838&&_0x34d838!==this[_0x32180b(0x16c)]&&_0x34d838[_0x32180b(0x4db)]()===_0x5bfc39&&_0x34d838[_0x32180b(0xa7d)](_0x32180b(0x287));VisuMZ[_0x32180b(0x8c3)][_0x32180b(0x411)][_0x32180b(0x2c7)](this);if(_0x34d838&&_0x34d838!==this['_lastAction']&&_0x34d838['subject']()===_0x5bfc39){if(_0x32180b(0xac0)!==_0x32180b(0xac0)){const _0x437002=_0x417b4f[this['_actor']['guardSkillId']()];if(!_0x437002)return;if(!this[_0x32180b(0x489)](_0x437002))return;const _0x32661c=this['commandStyle'](),_0x32f370=_0x34fb62['battleCommandName'](_0x437002),_0x10cad2=_0x4d172a['battleCommandIcon'](_0x437002),_0x275675=_0x32661c===_0x32180b(0x980)?_0x32f370:_0x32180b(0x7f7)[_0x32180b(0x86a)](_0x10cad2,_0x32f370);this[_0x32180b(0x7c7)](_0x275675,_0x32180b(0xa31),this[_0x32180b(0x316)][_0x32180b(0x1a3)]());}else _0x34d838[_0x32180b(0xa7d)](_0x32180b(0x9f9));}this[_0x32180b(0x2ad)](this['allBattleMembers']()),this['_lastAction']=this[_0x32180b(0x7c5)];},BattleManager[_0x16d1ef(0x2ad)]=function(_0x621473){const _0x74da60=_0x16d1ef;for(const _0x35fb13 of _0x621473){if(!_0x35fb13)continue;if(!_0x35fb13[_0x74da60(0xb02)]())continue;_0x35fb13['battler']()['refreshMotion']();}},BattleManager['updateAction']=function(){const _0x101c22=_0x16d1ef;!this[_0x101c22(0xb07)]['isBusy']()&&(_0x101c22(0x13f)==='sKFgS'?this[_0x101c22(0x552)]():_0x53127e[_0x101c22(0x6c4)][_0x101c22(0x7e7)]=_0x101c22(0x852));},Game_Battler['prototype']['onAllActionsEnd']=function(){const _0x20103c=_0x16d1ef;this[_0x20103c(0x604)]();if(Imported[_0x20103c(0xa3d)]){const _0x2b6631=VisuMZ[_0x20103c(0x66f)][_0x20103c(0x58d)][_0x20103c(0x258)];if(_0x2b6631&&_0x2b6631[_0x20103c(0xaa9)]===![]){if(_0x20103c(0x609)!==_0x20103c(0x609))return _0x384b1e[_0x20103c(0x8c3)][_0x20103c(0x663)][_0x20103c(0x2c7)](this);else this[_0x20103c(0x703)](0x1);}}else'lzdYm'!=='lzdYm'?_0x5aabbd['BattleCore']['Settings'][_0x20103c(0xb6b)][_0x20103c(0x667)]&&(this[_0x20103c(0x281)]=new _0xe8a430(),this[_0x20103c(0x339)](this['_stateIconSprite'])):this[_0x20103c(0x703)](0x1);this[_0x20103c(0x40e)]();},BattleManager[_0x16d1ef(0x68b)]=function(){const _0x103e3a=_0x16d1ef;this['_escapeRatio']=VisuMZ['BattleCore'][_0x103e3a(0x58d)][_0x103e3a(0x93b)][_0x103e3a(0xbd9)][_0x103e3a(0x2c7)](this);},VisuMZ[_0x16d1ef(0x8c3)]['BattleManager_onEscapeSuccess']=BattleManager['onEscapeSuccess'],BattleManager[_0x16d1ef(0x370)]=function(){const _0x56cb58=_0x16d1ef;this[_0x56cb58(0x157)](_0x56cb58(0x885)),BattleManager['_spriteset'][_0x56cb58(0x148)](),VisuMZ[_0x56cb58(0x8c3)][_0x56cb58(0xb86)]['call'](this),this[_0x56cb58(0x3d4)](_0x56cb58(0x3c7));},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xa13)]=BattleManager[_0x16d1ef(0x60c)],BattleManager['onEscapeFailure']=function(){const _0x3cc455=_0x16d1ef;this[_0x3cc455(0x157)](_0x3cc455(0x398));const _0x3ce38a=this[_0x3cc455(0xa14)];VisuMZ[_0x3cc455(0x8c3)][_0x3cc455(0xa13)][_0x3cc455(0x2c7)](this),this[_0x3cc455(0xa14)]=_0x3ce38a+VisuMZ[_0x3cc455(0x8c3)][_0x3cc455(0x58d)][_0x3cc455(0x93b)][_0x3cc455(0xb80)][_0x3cc455(0x2c7)](this),this[_0x3cc455(0x3d4)](_0x3cc455(0x2d4));},BattleManager[_0x16d1ef(0x9b7)]=function(){const _0x5b05c8=_0x16d1ef;let _0xdbecf7=![];if(this[_0x5b05c8(0x964)]())for(const _0x1d184f of $gameTroop[_0x5b05c8(0x187)]()){this[_0x5b05c8(0xb07)][_0x5b05c8(0x8ad)](_0x5b05c8(0x3fb),TextManager[_0x5b05c8(0x6b2)][_0x5b05c8(0x86a)](_0x1d184f)),this[_0x5b05c8(0xb07)][_0x5b05c8(0x8ad)](_0x5b05c8(0xbc7)),_0xdbecf7=!![];}if(this[_0x5b05c8(0x1cf)])_0x5b05c8(0x3f8)===_0x5b05c8(0x3f8)?(this[_0x5b05c8(0xb07)][_0x5b05c8(0x8ad)]('addText',TextManager[_0x5b05c8(0x425)][_0x5b05c8(0x86a)]($gameParty[_0x5b05c8(0x8c4)]())),this['_logWindow'][_0x5b05c8(0x8ad)]('wait')):(_0x4f9381[_0x5b05c8(0xa5b)][_0x5b05c8(0x3e1)][_0x5b05c8(0x2c7)](this),this[_0x5b05c8(0x8c0)](),this[_0x5b05c8(0x2a2)](),this[_0x5b05c8(0x7e9)](),this[_0x5b05c8(0xaa4)]());else this['_surprise']&&(_0x5b05c8(0x717)===_0x5b05c8(0x97d)?(this[_0x5b05c8(0x7e2)]=new _0x3ef1fa(),this['_battleField']['addChild'](this[_0x5b05c8(0x7e2)])):(this['_logWindow'][_0x5b05c8(0x8ad)](_0x5b05c8(0x3fb),TextManager['surprise'][_0x5b05c8(0x86a)]($gameParty[_0x5b05c8(0x8c4)]())),this[_0x5b05c8(0xb07)][_0x5b05c8(0x8ad)](_0x5b05c8(0xbc7))));_0xdbecf7&&(_0x5b05c8(0xb2c)===_0x5b05c8(0xb2c)?(this[_0x5b05c8(0xb07)][_0x5b05c8(0x8ad)]('wait'),this[_0x5b05c8(0xb07)][_0x5b05c8(0x8ad)](_0x5b05c8(0x721))):_0x5c636e[_0x5b05c8(0x750)]?this[_0x5b05c8(0x2e9)]=_0x5b05c8(0xafe):this['_forcedBattleLayout']=_0x5b05c8(0xa35)),this[_0x5b05c8(0x86c)]()&&this[_0x5b05c8(0x720)]()&&(this[_0x5b05c8(0x77e)]=![]);},BattleManager[_0x16d1ef(0x964)]=function(){const _0x2d35c1=_0x16d1ef;if(BattleManager[_0x2d35c1(0xa16)])return![];return VisuMZ['BattleCore'][_0x2d35c1(0x58d)][_0x2d35c1(0xb6b)]['EmergeText'];},VisuMZ[_0x16d1ef(0x8c3)]['BattleManager_startInput']=BattleManager['startInput'],BattleManager['startInput']=function(){const _0x1d41e3=_0x16d1ef;VisuMZ[_0x1d41e3(0x8c3)][_0x1d41e3(0x673)]['call'](this);if(this[_0x1d41e3(0x3bc)]()&&this[_0x1d41e3(0x720)]()&&!this[_0x1d41e3(0x327)]&&$gameParty[_0x1d41e3(0x42b)]()){if(_0x1d41e3(0x29f)===_0x1d41e3(0xbab))return this[_0x1d41e3(0x4db)]()[_0x1d41e3(0x37e)]();else this['selectNextCommand']();}},BattleManager[_0x16d1ef(0x720)]=function(){const _0x3be9fe=_0x16d1ef;return VisuMZ[_0x3be9fe(0x8c3)][_0x3be9fe(0x58d)][_0x3be9fe(0x810)][_0x3be9fe(0x2e5)];},BattleManager['checkTpbInputOpen']=function(){const _0x237118=_0x16d1ef;this[_0x237118(0x9ff)]()&&this[_0x237118(0x49e)]();},VisuMZ[_0x16d1ef(0x8c3)]['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xa47)],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xa47)]=function(){const _0x4887ac=_0x16d1ef;VisuMZ[_0x4887ac(0x8c3)][_0x4887ac(0xa5e)][_0x4887ac(0x2c7)](this),BattleManager[_0x4887ac(0x86c)]()&&BattleManager[_0x4887ac(0x77e)]&&(BattleManager[_0x4887ac(0x77e)]=![],this[_0x4887ac(0x6aa)]());},BattleManager['invokeMagicReflection']=function(_0x44b987,_0x5de79a){const _0x1fa3c2=_0x16d1ef;this['_action'][_0x1fa3c2(0x7ab)]=_0x5de79a,this[_0x1fa3c2(0xb07)][_0x1fa3c2(0x65d)](_0x5de79a),this[_0x1fa3c2(0xb07)][_0x1fa3c2(0xb6a)](_0x44b987,this[_0x1fa3c2(0x7c5)]),this[_0x1fa3c2(0x7c5)][_0x1fa3c2(0x712)](_0x44b987),this[_0x1fa3c2(0xb07)]['displayActionResults'](_0x44b987,_0x44b987);},VisuMZ['BattleCore'][_0x16d1ef(0xa17)]=BattleManager[_0x16d1ef(0xaa6)],BattleManager[_0x16d1ef(0xaa6)]=function(){const _0x46755d=_0x16d1ef;VisuMZ['BattleCore'][_0x46755d(0xa17)]['call'](this),this['_actionBattlers']=this[_0x46755d(0x934)][_0x46755d(0x787)](_0x2cdd38=>_0x2cdd38&&_0x2cdd38['isAppeared']());},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x2db)]=BattleManager[_0x16d1ef(0x70b)],BattleManager[_0x16d1ef(0x70b)]=function(_0x568791){const _0xc47be7=_0x16d1ef;if(this['_phase']===_0xc47be7(0xb8e))this[_0xc47be7(0x34f)]();else this[_0xc47be7(0x6eb)]===_0xc47be7(0x4bc)?this[_0xc47be7(0x64f)]():VisuMZ[_0xc47be7(0x8c3)]['BattleManager_updatePhase'][_0xc47be7(0x2c7)](this,_0x568791);},BattleManager[_0x16d1ef(0x19b)]=function(){const _0x3a20c0=_0x16d1ef;this[_0x3a20c0(0x897)]=this['_targets']['slice'](0x0),this[_0x3a20c0(0x723)]=0x0,this[_0x3a20c0(0x93a)]=this[_0x3a20c0(0x897)][0x0]||null,this[_0x3a20c0(0x6eb)]='custom';},BattleManager[_0x16d1ef(0x34f)]=function(){const _0x3ab119=_0x16d1ef;!this['updateEventMain']()&&!this[_0x3ab119(0xb07)][_0x3ab119(0xa49)]()&&('DUbZO'!==_0x3ab119(0x279)?this[_0x3ab119(0x9b9)](_0x5d4a7e['toUpperCase']()[_0x3ab119(0x699)]()):this['_phase']=_0x3ab119(0x83d));},BattleManager[_0x16d1ef(0x4bc)]=function(_0xb87585){const _0x2e3643=_0x16d1ef;this[_0x2e3643(0x934)][_0x2e3643(0x9ba)](_0xb87585);if(_0xb87585===this[_0x2e3643(0x515)])return;const _0x5820c4=JsonEx['makeDeepCopy'](_0xb87585[_0x2e3643(0x27b)]());this['_forcedBattlers'][_0x2e3643(0x8ad)]([_0xb87585,_0x5820c4]);},BattleManager[_0x16d1ef(0x687)]=function(){},BattleManager['updateStart']=function(){const _0x72dca5=_0x16d1ef;if(this[_0x72dca5(0x86c)]())this[_0x72dca5(0x6eb)]=_0x72dca5(0x5a0);else{if(this[_0x72dca5(0x35d)][_0x72dca5(0xa40)]>0x0){if(_0x72dca5(0x78f)!==_0x72dca5(0x92c))this[_0x72dca5(0x6eb)]=_0x72dca5(0x5a0);else{if(_0x5b19f1['note'][_0x72dca5(0xaf1)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x4db0ee=_0x4da461(_0x68433b['$1'])['split'](/[\r\n]+/)[_0x72dca5(0x9ba)](''),_0x4ba7e6=this['processRandomizedData'](_0x4db0ee);_0x279baa=this[_0x72dca5(0x4fe)](_0x4ba7e6)||_0x2f1ced,_0x1b3105=_0x44d129[_0x72dca5(0x991)](_0x4e976f);}}}else this[_0x72dca5(0x583)]();}},BattleManager[_0x16d1ef(0x437)]=function(){const _0x3fd1b5=_0x16d1ef,_0x33d97d=this[_0x3fd1b5(0x515)];_0x33d97d&&this[_0x3fd1b5(0x86c)]()&&(_0x3fd1b5(0xa9a)!==_0x3fd1b5(0xa9a)?_0x208d90[_0x3fd1b5(0xa7d)](_0x3fd1b5(0x9f9)):_0x33d97d[_0x3fd1b5(0x345)](_0x3fd1b5(0x4d5)));for(;;){const _0x5ab4a7=this[_0x3fd1b5(0x919)]();if(!_0x5ab4a7)return _0x3fd1b5(0x1dc)!==_0x3fd1b5(0x1dc)?_0x3fff02['_scene'][_0x3fd1b5(0x88a)]()===_0x3fd1b5(0x6a0)?_0x10b722[_0x3fd1b5(0x8c3)][_0x3fd1b5(0x58d)][_0x3fd1b5(0x66d)]['SkillItemBorderCols']:_0x56e8dc[_0x3fd1b5(0x8c3)][_0x3fd1b5(0x58d)]['BattleLayout'][_0x3fd1b5(0x55e)]:null;if(_0x5ab4a7[_0x3fd1b5(0x2e7)]()&&_0x5ab4a7['isAlive']())return _0x5ab4a7;}},BattleManager[_0x16d1ef(0x919)]=function(){const _0x431845=_0x16d1ef;if(this[_0x431845(0x35d)][_0x431845(0xa40)]>0x0){const _0x43ad05=this[_0x431845(0x35d)][_0x431845(0x444)](),_0x279337=_0x43ad05[0x0];return _0x279337[_0x431845(0x800)]=_0x279337['_actions']||[],_0x279337[_0x431845(0x800)][0x0]=_0x43ad05[0x1],_0x279337;}else return this[_0x431845(0x934)][_0x431845(0x444)]();},VisuMZ['BattleCore'][_0x16d1ef(0x9ef)]=Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x4bc)],Game_Battler[_0x16d1ef(0xa5b)]['forceAction']=function(_0x215cf2,_0x4e284a){const _0x1f13d7=_0x16d1ef;VisuMZ['BattleCore'][_0x1f13d7(0x9ef)][_0x1f13d7(0x2c7)](this,_0x215cf2,_0x4e284a),this[_0x1f13d7(0x800)][this['_actions'][_0x1f13d7(0xa40)]-0x1][_0x1f13d7(0x49d)]=!![];},Game_Interpreter['prototype'][_0x16d1ef(0xadd)]=function(_0x446c88){const _0x19175b=_0x16d1ef;return this[_0x19175b(0x631)](_0x446c88[0x0],_0x446c88[0x1],_0xc18f74=>{const _0x465069=_0x19175b;if('StYlm'!==_0x465069(0x405))!_0xc18f74[_0x465069(0x497)]()&&(_0xc18f74[_0x465069(0x4bc)](_0x446c88[0x2],_0x446c88[0x3]),BattleManager[_0x465069(0x4bc)](_0xc18f74));else{if(!_0x33b339[_0x465069(0x45c)])return;const _0x56eb70=_0xf1b679[_0x465069(0x438)][_0x465069(0x71a)];if(!_0x56eb70)return;_0x1cf76d[_0x465069(0x5ea)](_0x290013,_0x3619cf);const _0x1dd932=_0x331c8d['X']||0x0,_0x27887b=_0x4a8583['Y']||0x0,_0x10b74d=_0x127adf[_0x465069(0x22a)]||0x0,_0x5009f6=_0x5674c2['Radius']||0x0,_0x256285=_0x333a1a[_0x465069(0x9d1)]||0x1,_0x1a051e=_0x3b87de['EasingType']||_0x465069(0x56c);_0x56eb70['setupZoomBlurImpactFilter'](_0x10b74d,_0x1dd932,_0x27887b,_0x5009f6,_0x256285,_0x1a051e);}}),!![];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xa1a)]=Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x455)],Game_Battler['prototype'][_0x16d1ef(0x455)]=function(){const _0x43a5d5=_0x16d1ef;VisuMZ[_0x43a5d5(0x8c3)][_0x43a5d5(0xa1a)][_0x43a5d5(0x2c7)](this);if(this['_actions']['length']<=0x0){if(_0x43a5d5(0x13d)!==_0x43a5d5(0x41b))this['_speed']=Number['MIN_SAFE_INTEGER'];else return _0x497510;}},VisuMZ[_0x16d1ef(0x8c3)]['BattleManager_selectNextCommand']=BattleManager[_0x16d1ef(0x49e)],BattleManager['selectNextCommand']=function(){const _0x46d41d=_0x16d1ef;if(this[_0x46d41d(0x86c)]()){if('lXTgM'===_0x46d41d(0x346))return _0x43183a[_0x46d41d(0x438)]['_spriteset'][_0x46d41d(0x7e5)](_0x201e81[0x0],_0xa37fad[0x1]),!![];else this[_0x46d41d(0xb28)]();}else{if(_0x46d41d(0x3c3)===_0x46d41d(0x689)){const _0x23b870=this[_0x46d41d(0x85e)]();return _0x23b870?_0x23b870[_0x46d41d(0xacc)]:0x0;}else VisuMZ['BattleCore']['BattleManager_selectNextCommand']['call'](this);}},BattleManager[_0x16d1ef(0xb28)]=function(){const _0x16bc8f=_0x16d1ef;if(this[_0x16bc8f(0x3f1)]){if(this[_0x16bc8f(0x3f1)]['selectNextCommand']())return;this[_0x16bc8f(0x896)](),this[_0x16bc8f(0x4ad)](),!this[_0x16bc8f(0x515)]&&!this[_0x16bc8f(0x3f1)]&&SceneManager[_0x16bc8f(0x438)][_0x16bc8f(0xba5)]();}else{if(!this['_subject']){if('VlQFd'===_0x16bc8f(0x68e))this['selectNextActor']();else{this[_0x16bc8f(0x7d5)]=_0x13ba33['width'],this[_0x16bc8f(0x842)]=_0x49d74a[_0x16bc8f(0x842)];const _0x3acad9=_0x2bdd9f[_0x16bc8f(0x457)](0x1,this['width']/this['bitmap'][_0x16bc8f(0x7d5)]),_0x8e56ac=_0x31ab7c[_0x16bc8f(0x457)](0x1,this[_0x16bc8f(0x842)]/this[_0x16bc8f(0xb74)][_0x16bc8f(0x842)]),_0x231553=_0x38f1e9[_0x16bc8f(0x26b)](_0x3acad9,_0x8e56ac);this[_0x16bc8f(0x9fa)]['x']=_0x231553,this[_0x16bc8f(0x9fa)]['y']=_0x231553,this['x']=(_0x24a5c1[_0x16bc8f(0x7d5)]-this[_0x16bc8f(0x7d5)])/0x2,this['y']=_0x38325a['height']-this[_0x16bc8f(0x842)];}}}},BattleManager[_0x16d1ef(0x4ad)]=function(){const _0x1c4b53=_0x16d1ef;if(!this[_0x1c4b53(0x9ff)]()||this[_0x1c4b53(0x87b)]()){this[_0x1c4b53(0x881)]&&(_0x1c4b53(0x4b4)!=='RucHt'?(this[_0x1c4b53(0x419)]['x']=_0x5cd972[_0x1c4b53(0x7d5)]*0xa,this['_windowLayer']['y']=_0x3c7630['height']*0xa):!$gameParty[_0x1c4b53(0x2a7)]()[_0x1c4b53(0x4f8)](this['_tpbSceneChangeCacheActor'])&&('pjPrL'===_0x1c4b53(0x593)?(_0x321146['prototype']['resetFontSettings'][_0x1c4b53(0x2c7)](this),this['contents'][_0x1c4b53(0xad1)]=_0x2a7dbe[_0x1c4b53(0x8c3)][_0x1c4b53(0x58d)][_0x1c4b53(0xb6b)]['NameFontSize']):this[_0x1c4b53(0x881)]=null));if(!this['_tpbSceneChangeCacheActor'])_0x1c4b53(0x30f)===_0x1c4b53(0x7e6)?_0xdd55fc[_0x3b0d58]=null:(this[_0x1c4b53(0xaed)](),this['_currentActor']=null,this[_0x1c4b53(0x6f0)]=![]);else{if(_0x1c4b53(0x767)==='zLSHt'){const _0x477350=_0x1b8492[_0x1c4b53(0x439)](),_0x583a39=this['actor'](this[_0x1c4b53(0x830)]());if(!_0x477350)return!![];if(!_0x477350[_0x1c4b53(0x74a)]())return!![];const _0x47c47c=_0x477350[_0x1c4b53(0x74a)]()[_0x1c4b53(0x954)];if(_0x47c47c[_0x1c4b53(0xaf1)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x583a39===_0x82f7ef[_0x1c4b53(0x509)]())return![];}return!![];}else this[_0x1c4b53(0x36a)]();}}},BattleManager[_0x16d1ef(0x36a)]=function(){const _0x1dec86=_0x16d1ef;!$gameParty['battleMembers']()[_0x1dec86(0x4f8)](this[_0x1dec86(0x881)])&&('cmUhU'==='LccXl'?(_0x4d0d72[_0x1dec86(0x4bc)](_0x522f69[0x2],_0x492982[0x3]),_0x23fbc5[_0x1dec86(0x4bc)](_0x4deef7)):this[_0x1dec86(0x881)]=null);if(this[_0x1dec86(0x881)])this[_0x1dec86(0x3f1)]=this[_0x1dec86(0x881)],this[_0x1dec86(0x3f1)][_0x1dec86(0x441)]=_0x1dec86(0xaaa),this[_0x1dec86(0x6f0)]=!![],this['_tpbSceneChangeCacheActor']=null;else{if(_0x1dec86(0x84a)===_0x1dec86(0x84a))this[_0x1dec86(0xaed)](),this[_0x1dec86(0x3f1)]=null,this['_inputting']=![];else return-0x1;}},VisuMZ['BattleCore'][_0x16d1ef(0x9a6)]=BattleManager[_0x16d1ef(0x212)],BattleManager['isTpbMainPhase']=function(){const _0x311959=_0x16d1ef;if(this['_phase']==='custom'){if(_0x311959(0x15c)!==_0x311959(0x15c))this[_0x311959(0x4a8)]();else return this[_0x311959(0x3d2)]();}else return'VGHpH'==='mYLYd'?this['getAttackMotion']():VisuMZ[_0x311959(0x8c3)][_0x311959(0x9a6)][_0x311959(0x2c7)](this);},BattleManager['battleCoreTpbMainPhase']=function(){const _0x4e27d0=_0x16d1ef;return this[_0x4e27d0(0x94a)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x463)]=BattleManager['cancelActorInput'],BattleManager['cancelActorInput']=function(){const _0x34567f=_0x16d1ef;this[_0x34567f(0x86c)]()&&this[_0x34567f(0x6eb)]===_0x34567f(0x7d4)&&(this[_0x34567f(0x3f1)]=null),VisuMZ[_0x34567f(0x8c3)]['BattleManager_cancelActorInput'][_0x34567f(0x2c7)](this);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xaba)]=BattleManager['inputtingAction'],BattleManager['inputtingAction']=function(){const _0x1a4221=_0x16d1ef,_0x1ed530=this[_0x1a4221(0x3f1)];if(_0x1ed530&&!_0x1ed530['inputtingAction']()){const _0x459147=_0x1ed530[_0x1a4221(0x3c2)];_0x1ed530[_0x1a4221(0x800)][_0x459147]=new Game_Action(_0x1ed530);}return VisuMZ[_0x1a4221(0x8c3)][_0x1a4221(0xaba)][_0x1a4221(0x2c7)](this);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xa11)]=BattleManager['checkSubstitute'],BattleManager['checkSubstitute']=function(_0x39523c){const _0x22d5f6=_0x16d1ef;if(this[_0x22d5f6(0x7c5)][_0x22d5f6(0x9da)]())return![];return VisuMZ[_0x22d5f6(0x8c3)][_0x22d5f6(0xa11)][_0x22d5f6(0x2c7)](this,_0x39523c);},SceneManager['isSceneBattle']=function(){const _0x31b710=_0x16d1ef;return this['_scene']&&this[_0x31b710(0x438)][_0x31b710(0xb30)]===Scene_Battle;},SceneManager[_0x16d1ef(0x3a7)]=function(){const _0x2a16bf=_0x16d1ef;return Spriteset_Battle['prototype'][_0x2a16bf(0x93c)]();},SceneManager[_0x16d1ef(0x138)]=function(){const _0x44c5d8=_0x16d1ef;if(SceneManager[_0x44c5d8(0x55f)](Scene_Options))return!![];return![];},SceneManager[_0x16d1ef(0x902)]=function(){const _0x46dad1=_0x16d1ef;if(SceneManager[_0x46dad1(0x34a)](Scene_Options))return!![];return![];},SceneManager['checkSceneBattleTransitionable']=function(_0x4945bc){const _0x55c70=_0x16d1ef;if(!SceneManager[_0x55c70(0x37d)]())return!![];const _0x2a9649=[_0x55c70(0xab0),'Scene_Party'];return _0x2a9649['includes'](_0x4945bc[_0x55c70(0x8c4)]);},VisuMZ[_0x16d1ef(0x8c3)]['SceneManager_push']=SceneManager[_0x16d1ef(0x8ad)],SceneManager[_0x16d1ef(0x8ad)]=function(_0x254516){const _0x43261=_0x16d1ef;if(!SceneManager[_0x43261(0x9b2)](_0x254516))return this[_0x43261(0x85f)](_0x254516);VisuMZ[_0x43261(0x8c3)][_0x43261(0x243)][_0x43261(0x2c7)](this,_0x254516);},SceneManager[_0x16d1ef(0x85f)]=function(_0x2919c6){const _0x4c07ea=_0x16d1ef;if(!$gameTemp[_0x4c07ea(0x502)]())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0x4c07ea(0x88d)]=!![];let _0x28b352='';_0x28b352+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x28b352+=_0x4c07ea(0xa69)['format'](_0x2919c6[_0x4c07ea(0x8c4)]),alert(_0x28b352);},VisuMZ[_0x16d1ef(0x8c3)]['Game_Temp_requestAnimation']=Game_Temp['prototype'][_0x16d1ef(0x95e)],Game_Temp[_0x16d1ef(0xa5b)]['requestAnimation']=function(_0x547c76,_0x460af4,_0x1186a0){const _0x460bd2=_0x16d1ef;_0x547c76=_0x547c76['filter']((_0x103032,_0x59b714,_0x52de6c)=>_0x52de6c[_0x460bd2(0x6f3)](_0x103032)===_0x59b714),SceneManager[_0x460bd2(0x37d)]()&&SceneManager[_0x460bd2(0x3a7)]()&&(_0x1186a0=!_0x1186a0),VisuMZ[_0x460bd2(0x8c3)]['Game_Temp_requestAnimation'][_0x460bd2(0x2c7)](this,_0x547c76,_0x460af4,_0x1186a0),SceneManager['isSceneBattle']()&&BattleManager[_0x460bd2(0x71a)][_0x460bd2(0x2fa)]();},Game_Temp['prototype'][_0x16d1ef(0x217)]=function(_0x3841ec){const _0x5d51ea=_0x16d1ef;this[_0x5d51ea(0x418)]=_0x3841ec;},Game_Temp['prototype'][_0x16d1ef(0xb38)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0x16d1ef(0xa5b)][_0x16d1ef(0x586)]=function(){const _0x381e87=_0x16d1ef;this[_0x381e87(0x2e9)]=undefined;},Game_Temp[_0x16d1ef(0xa5b)][_0x16d1ef(0xa88)]=function(_0x15f05f){const _0x49a47c=_0x16d1ef;$gameMap&&$dataMap&&$dataMap[_0x49a47c(0x954)]&&(_0x49a47c(0x5eb)===_0x49a47c(0x6ab)?this['visualHpGauge']=_0x2b031a['visualHpGauge']:this[_0x49a47c(0x31f)]($dataMap[_0x49a47c(0x954)]));const _0x19a751=$dataTroops[_0x15f05f];if(_0x19a751){let _0xa69d4=DataManager[_0x49a47c(0x4f1)](_0x19a751['id']);this[_0x49a47c(0x31f)](_0xa69d4);}},Game_Temp[_0x16d1ef(0xa5b)]['parseForcedGameTroopSettingsBattleCore']=function(_0x35e80a){const _0x383390=_0x16d1ef;if(!_0x35e80a)return;if(_0x35e80a['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0xa40407=String(RegExp['$1']);if(_0xa40407[_0x383390(0xaf1)](/DEFAULT/i))_0x383390(0xbe6)!==_0x383390(0xbe6)?(this[_0x383390(0x6f6)]=![],this[_0x383390(0x928)](),this['updateAttachmentSprites']()):this[_0x383390(0x2e9)]=_0x383390(0xa35);else{if(_0xa40407['match'](/LIST/i)){if('ZAfvC'!==_0x383390(0x95d)){if(!_0x41b24f[_0x383390(0x37d)]())return;if(!_0x5a1cc5[_0x383390(0x3b9)])return;_0x517f07['ConvertParams'](_0x48766f,_0x7aa6ec);const _0x38e990=_0x210b41['getLastPluginCommandInterpreter'](),_0x76e110=_0x2e3827[_0x383390(0x5c6)];if(!_0x38e990)return;_0x2201d4[_0x383390(0x139)](0x0,0x0,_0x5087b3[_0x383390(0x9d1)],_0x168e0f[_0x383390(0x43c)]);if(_0x76e110)_0x38e990[_0x383390(0x13b)](_0x383390(0x3d6));}else this[_0x383390(0x2e9)]=_0x383390(0x85a);}else{if(_0xa40407['match'](/XP/i)){if('povHd'==='povHd')this['_forcedBattleLayout']='xp';else return _0x4aa23b[_0x383390(0x8f4)]()[_0x383390(0xb06)]();}else{if(_0xa40407['match'](/PORTRAIT/i))this['_forcedBattleLayout']=_0x383390(0x7ee);else{if(_0xa40407['match'](/BORDER/i)){if('lBPpc'!=='gZExb')this[_0x383390(0x2e9)]=_0x383390(0x6a0);else return _0x34a96a[_0x383390(0x95a)]['Settings']['QoL'][_0x383390(0x238)];}else{if(_0xa40407['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported['VisuMZ_3_SideviewBattleUI'])'lweCT'!==_0x383390(0x39f)?this[_0x383390(0x2e9)]=_0x383390(0xafe):_0x2e8dbc[_0x383390(0x8ad)](_0x45874a(_0x114a25['$1']));else{if('UoOAa'===_0x383390(0x969))this['_forcedBattleLayout']='default';else{if(!_0x56f9e5[_0x383390(0xa16)])return;(_0x506dd9['isTriggered']('ok')||_0x287235['isTriggered']('cancel')||_0x3ba1dc[_0x383390(0x7eb)]()||_0x21b872[_0x383390(0x8e5)]())&&(_0x29a980[_0x383390(0x6a7)](),_0x441959[_0x383390(0xa16)]=![],_0x20eafe['clear'](),_0x278ec4['clear']());}}}}}}}}}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x21d)]=Game_System[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)],Game_System[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)]=function(){const _0x38c6e6=_0x16d1ef;VisuMZ[_0x38c6e6(0x8c3)]['Game_System_initialize']['call'](this),this[_0x38c6e6(0x8b6)]();},Game_System[_0x16d1ef(0xa5b)][_0x16d1ef(0x8b6)]=function(){const _0x1fbd69=_0x16d1ef;this[_0x1fbd69(0x3b5)]=this[_0x1fbd69(0x3b5)]||[];},Game_System[_0x16d1ef(0xa5b)][_0x16d1ef(0x868)]=function(){const _0x471462=_0x16d1ef;if(this[_0x471462(0x3b5)]===undefined)this[_0x471462(0x8b6)]();return this[_0x471462(0x3b5)];},Game_System[_0x16d1ef(0xa5b)][_0x16d1ef(0x2f4)]=function(_0xa2d154){const _0x2588c3=_0x16d1ef;if(this[_0x2588c3(0x3b5)]===undefined)this[_0x2588c3(0x8b6)]();if(!_0xa2d154)return;if(this[_0x2588c3(0x3b5)][_0x2588c3(0x4f8)](_0xa2d154))return;this[_0x2588c3(0x3b5)][_0x2588c3(0x8ad)](_0xa2d154),this[_0x2588c3(0x3b5)][_0x2588c3(0x2fb)]((_0x292950,_0x328729)=>_0x292950-_0x328729);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x142)]=Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x5ec)],Game_BattlerBase[_0x16d1ef(0xa5b)]['addNewState']=function(_0x3083e4){const _0xccac31=_0x16d1ef,_0x238384=this[_0xccac31(0x341)](),_0x3aa8d0=this[_0xccac31(0x3da)]();VisuMZ['BattleCore'][_0xccac31(0x142)][_0xccac31(0x2c7)](this,_0x3083e4),this[_0xccac31(0x8fc)]()&&_0x238384&&this[_0xccac31(0x8ae)]()&&(this['_visualHpGauge_JustDied']=!this[_0xccac31(0xb22)](),$gameSystem[_0xccac31(0x2f4)](this[_0xccac31(0x1d5)]())),SceneManager[_0xccac31(0x37d)]()&&_0x3aa8d0!==this['stateMotionIndex']()&&(this[_0xccac31(0xb02)]()&&(_0xccac31(0x404)!==_0xccac31(0x404)?(_0x2e19d6[_0xccac31(0x8c3)][_0xccac31(0xa82)]&&_0x7e6fb8[_0xccac31(0x8c3)]['ParseArmorNotetags'][_0xccac31(0x2c7)](this,_0xa9b217),_0x485c10['BattleCore'][_0xccac31(0x7bc)](_0x33952a)):this['battler']()[_0xccac31(0x153)]()));},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0xb22)]=function(){const _0x228fde=_0x16d1ef;return $gameSystem[_0x228fde(0x868)]()['includes'](this[_0x228fde(0x257)]);},VisuMZ['BattleCore']['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x16d1ef(0xa5b)]['eraseState'],Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x9b8)]=function(_0x32ee5f){const _0x20ede8=_0x16d1ef;VisuMZ['BattleCore'][_0x20ede8(0xa1f)][_0x20ede8(0x2c7)](this,_0x32ee5f);this[_0x20ede8(0x8fc)]()&&_0x32ee5f===this[_0x20ede8(0x493)]()&&this[_0x20ede8(0x341)]()&&(_0x20ede8(0x513)===_0x20ede8(0x8be)?this[_0x20ede8(0x80f)](_0x20ede8(0x377)):this[_0x20ede8(0x154)]=![]);if(!this[_0x20ede8(0x65a)]&&!this[_0x20ede8(0x76d)]&&SceneManager[_0x20ede8(0x37d)]()){if(_0x20ede8(0xb6f)!==_0x20ede8(0x7a3))this[_0x20ede8(0x5ae)]();else{if(!_0x120a13)return;for(const _0x4feded of _0x536b85[_0x20ede8(0x85a)]){if([0x6c,0x198][_0x20ede8(0x4f8)](_0x4feded[_0x20ede8(0x5b5)])){const _0x3866ab=_0x4feded[_0x20ede8(0x2b8)][0x0];if(_0x3866ab['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];}}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x16b)]=Game_Action[_0x16d1ef(0xa5b)]['clear'],Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x721)]=function(){const _0x1bf94a=_0x16d1ef;VisuMZ[_0x1bf94a(0x8c3)][_0x1bf94a(0x16b)][_0x1bf94a(0x2c7)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x1bf94a(0xba3)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x1bf94a(0x8b5)]=_0x1bf94a(0xa35);},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x1dd)]=function(_0xc200d1,_0x34aa16){const _0x10c3d4=_0x16d1ef;return VisuMZ[_0x10c3d4(0x8c3)]['Settings']['Damage'][_0x10c3d4(0x9e0)]['call'](this,_0xc200d1,_0x34aa16);},Game_Action[_0x16d1ef(0xa5b)]['applyVariance']=function(_0x30bbcc,_0x44075c){const _0xccd515=_0x16d1ef;return VisuMZ['BattleCore']['Settings'][_0xccd515(0x6c4)][_0xccd515(0x728)][_0xccd515(0x2c7)](this,_0x30bbcc,_0x44075c);},Game_Action['prototype'][_0x16d1ef(0x602)]=function(_0x378878,_0x40f23b){const _0x35150d=_0x16d1ef;return VisuMZ[_0x35150d(0x8c3)][_0x35150d(0x58d)][_0x35150d(0x6c4)]['GuardFormulaJS']['call'](this,_0x378878,_0x40f23b);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x759)]=Game_Action['prototype']['itemHit'],Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x161)]=function(_0x18076f){const _0x23940e=_0x16d1ef,_0xee4dc4=this[_0x23940e(0x74a)]()[_0x23940e(0x954)];if(_0xee4dc4['match'](/<ALWAYS HIT>/i)){if(_0x23940e(0x3b0)!=='ZjRWF')return 0x1;else{this[_0x23940e(0x19a)]=new _0x41a679();const _0x310e48=_0x33c5d2['_scene'],_0x7492c2=_0x310e48[_0x23940e(0x4ef)][_0x23940e(0x6f3)](_0x310e48['_windowLayer']);_0x310e48[_0x23940e(0x76e)](this[_0x23940e(0x19a)],_0x7492c2),this['_borderPortraitSprite'][_0x23940e(0x186)]['x']=0.5,this['_borderPortraitSprite']['anchor']['y']=0x1;const _0x910e44=_0x2cfd18[_0x23940e(0x8c3)][_0x23940e(0x58d)]['BattleLayout'][_0x23940e(0x241)];this[_0x23940e(0x19a)][_0x23940e(0x9fa)]['x']=_0x910e44,this[_0x23940e(0x19a)][_0x23940e(0x9fa)]['y']=_0x910e44,this[_0x23940e(0x19a)]['y']=this['y']+this[_0x23940e(0x842)],this[_0x23940e(0x60a)]=0x0;}}else{if(_0xee4dc4[_0x23940e(0xaf1)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x189e5d=VisuMZ[_0x23940e(0x8c3)]['Game_Action_itemHit'][_0x23940e(0x2c7)](this,_0x18076f);return _0x189e5d=this[_0x23940e(0xba3)][_0x23940e(0x829)]*_0x189e5d+this['_multipliers'][_0x23940e(0x2ee)],_0x189e5d;}}},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x707)]=function(_0x1f0212){const _0x30327f=_0x16d1ef;if(!this[_0x30327f(0x74a)]()[_0x30327f(0x7a8)][_0x30327f(0x1f7)])return 0x0;let _0x1369fa=VisuMZ[_0x30327f(0x8c3)][_0x30327f(0x58d)]['Damage'][_0x30327f(0x5ef)][_0x30327f(0x2c7)](this,_0x1f0212);return _0x1369fa=this['_multipliers'][_0x30327f(0x894)]*_0x1369fa+this['_multipliers']['criticalHitFlat'],_0x1369fa;},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x88f)]=function(_0x4abbcb){const _0x486548=_0x16d1ef;return _0x4abbcb=VisuMZ[_0x486548(0x8c3)][_0x486548(0x58d)][_0x486548(0x6c4)][_0x486548(0x301)][_0x486548(0x2c7)](this,_0x4abbcb),_0x4abbcb=this['_multipliers'][_0x486548(0x691)]*_0x4abbcb+this[_0x486548(0xba3)][_0x486548(0x9cc)],_0x4abbcb;},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x4c3)]=Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x52c)],Game_Action[_0x16d1ef(0xa5b)]['evalDamageFormula']=function(_0x3cbad5){const _0x2b7522=_0x16d1ef;if(this[_0x2b7522(0x8b5)]!==_0x2b7522(0xa35))return this[_0x2b7522(0xb11)](_0x3cbad5);else{if(DataManager['getDamageStyle'](this[_0x2b7522(0x74a)]())===_0x2b7522(0x596))return VisuMZ[_0x2b7522(0x8c3)][_0x2b7522(0x4c3)][_0x2b7522(0x2c7)](this,_0x3cbad5);else{if(_0x2b7522(0x7ad)===_0x2b7522(0x7ad))return this['evalDamageFormulaBattleCore'](_0x3cbad5);else{let _0x3ba101=_0x427845[_0x2b7522(0x4be)](_0xca1d2d[_0x2b7522(0x1d3)]);_0xd5792b[_0x2b7522(0x5a4)]<0x0&&(_0x3ba101+=_0x197bb3[_0x2b7522(0xaf4)](_0x3cf11c['hpDamage'])),_0x1c150e[_0x2b7522(0x6d6)](_0x5d3773[_0x2b7522(0x1d3)],_0x3ba101);}}}},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0xa42)]=function(_0x16ad13){const _0x194d0d=_0x16d1ef;this[_0x194d0d(0x8b5)]=_0x16ad13;},Game_Action[_0x16d1ef(0xa5b)]['customDamageFormula']=function(_0x5269e9){const _0xcf0112=_0x16d1ef,_0x352429=this[_0xcf0112(0x74a)](),_0x277b52=_0x352429['damage'][_0xcf0112(0x2e6)];_0x352429[_0xcf0112(0x7a8)]['formula']=this[_0xcf0112(0x8b5)];let _0x54752b=VisuMZ['BattleCore']['Game_Action_evalDamageFormula']['call'](this,_0x5269e9);return _0x352429[_0xcf0112(0x7a8)][_0xcf0112(0x2e6)]=_0x277b52,_0x54752b;},Game_Action[_0x16d1ef(0xa5b)]['damageStyle']=function(){const _0x31824a=_0x16d1ef;if(this[_0x31824a(0x74a)]()[_0x31824a(0x954)][_0x31824a(0xaf1)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x1b6913=String(RegExp['$1'])[_0x31824a(0xaff)]()[_0x31824a(0x699)]();return _0x1b6913;}return'MANUAL';},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x6d4)]=function(_0x563099){const _0x36cd69=_0x16d1ef,_0x2fbb53=DataManager[_0x36cd69(0x657)](this[_0x36cd69(0x74a)]()),_0x134148=VisuMZ[_0x36cd69(0x7c3)][_0x2fbb53];try{return _0x134148[_0x36cd69(0x13a)][_0x36cd69(0x2c7)](this,_0x563099);}catch(_0x3529f0){if($gameTemp[_0x36cd69(0x502)]())console[_0x36cd69(0xb03)](_0x3529f0);return VisuMZ[_0x36cd69(0x8c3)]['Game_Action_evalDamageFormula'][_0x36cd69(0x2c7)](this);}},Game_Action['prototype'][_0x16d1ef(0xb05)]=function(_0x3a826f,_0x2c828b){const _0x1a8d6e=_0x16d1ef;if(this[_0x1a8d6e(0x88e)]())return _0x2c828b;const _0xf771db=this['subject'](),_0x404838=_0x3a826f;let _0x4e25f3=[],_0x46ca36=[];_0x4e25f3[_0x1a8d6e(0x8ad)](this[_0x1a8d6e(0x4a1)]['arPenFlat'],this['_armorPenetration'][_0x1a8d6e(0xa0f)]),_0x46ca36[_0x1a8d6e(0x8ad)](this['_armorPenetration']['arPenRate'],this[_0x1a8d6e(0x4a1)][_0x1a8d6e(0x67f)]);const _0x508e8b=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5fe958=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x5d4519=this[_0x1a8d6e(0x5e4)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x34b939=this[_0x1a8d6e(0x5e4)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x4e25f3=_0x4e25f3[_0x1a8d6e(0x468)](_0x404838[_0x1a8d6e(0x84f)]()['map'](_0x24c1fd=>_0x24c1fd&&_0x24c1fd[_0x1a8d6e(0x954)][_0x1a8d6e(0xaf1)](_0x508e8b)?Number(RegExp['$1']):0x0)),_0x46ca36=_0x46ca36[_0x1a8d6e(0x468)](_0x404838[_0x1a8d6e(0x84f)]()[_0x1a8d6e(0x526)](_0xe80d84=>_0xe80d84&&_0xe80d84[_0x1a8d6e(0x954)][_0x1a8d6e(0xaf1)](_0x5fe958)?Number(RegExp['$1'])/0x64:0x0)),_0x4e25f3=_0x4e25f3['concat'](_0xf771db['traitObjects']()[_0x1a8d6e(0x526)](_0x8fbf04=>_0x8fbf04&&_0x8fbf04['note'][_0x1a8d6e(0xaf1)](_0x5d4519)?Number(RegExp['$1']):0x0)),_0x46ca36=_0x46ca36['concat'](_0xf771db['traitObjects']()[_0x1a8d6e(0x526)](_0xd50d08=>_0xd50d08&&_0xd50d08['note']['match'](_0x34b939)?Number(RegExp['$1'])/0x64:0x0)),this[_0x1a8d6e(0x74a)]()['note'][_0x1a8d6e(0xaf1)](_0x5d4519)&&_0x4e25f3[_0x1a8d6e(0x8ad)](Number(RegExp['$1'])),this['item']()['note'][_0x1a8d6e(0xaf1)](_0x34b939)&&_0x46ca36['push'](Number(RegExp['$1'])),_0x2c828b=_0x4e25f3[_0x1a8d6e(0x828)]((_0x451ccb,_0x1bb760)=>_0x451ccb-_0x1bb760,_0x2c828b),_0x2c828b>0x0&&(_0x2c828b=_0x46ca36['reduce']((_0x23a39b,_0x19b63e)=>_0x23a39b*(0x1-_0x19b63e),_0x2c828b)),_0x2c828b;},VisuMZ[_0x16d1ef(0x8c3)]['Game_Action_executeDamage']=Game_Action[_0x16d1ef(0xa5b)]['executeDamage'],Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x57c)]=function(_0x4feb5f,_0x14c1ea){const _0x1be502=_0x16d1ef;_0x14c1ea=_0x14c1ea*this[_0x1be502(0xba3)][_0x1be502(0x6ed)],_0x14c1ea+=this['_multipliers'][_0x1be502(0x732)]*(_0x14c1ea>=0x0?0x1:-0x1),_0x14c1ea=this[_0x1be502(0x600)]('PreDamage%1JS',_0x4feb5f,_0x14c1ea,![]),_0x14c1ea=this[_0x1be502(0x5fd)](_0x14c1ea),_0x14c1ea=Math['round'](_0x14c1ea),this['_executedValue']=_0x14c1ea,this['_totalValue']=this[_0x1be502(0x626)]||0x0,this[_0x1be502(0x626)]+=_0x14c1ea,VisuMZ[_0x1be502(0x8c3)][_0x1be502(0xa9b)]['call'](this,_0x4feb5f,_0x14c1ea),this[_0x1be502(0x600)](_0x1be502(0x651),_0x4feb5f,_0x14c1ea,!![]);},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x5fd)]=function(_0x5ae5b0){const _0x31fa54=_0x16d1ef;if(this['isBypassDamageCap']())return _0x5ae5b0;return _0x5ae5b0=this['applySoftDamageCap'](_0x5ae5b0),_0x5ae5b0=this[_0x31fa54(0x426)](_0x5ae5b0),_0x5ae5b0;},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x8e2)]=function(){const _0x56b4fe=_0x16d1ef,_0x262deb=/<BYPASS DAMAGE CAP>/i;if(this[_0x56b4fe(0x74a)]()['note'][_0x56b4fe(0xaf1)](_0x262deb))return!![];if(this[_0x56b4fe(0x4db)]()[_0x56b4fe(0x84f)]()[_0x56b4fe(0xba9)](_0x4c2c67=>_0x4c2c67&&_0x4c2c67[_0x56b4fe(0x954)]['match'](_0x262deb)))return!![];return!VisuMZ[_0x56b4fe(0x8c3)]['Settings']['Damage'][_0x56b4fe(0x6bc)];},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0xbd0)]=function(_0x4b4cc7){const _0x492784=_0x16d1ef;if(!VisuMZ['BattleCore']['Settings'][_0x492784(0x6c4)][_0x492784(0x77c)])return _0x4b4cc7;const _0x4d6eff=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x492784(0x74a)]()[_0x492784(0x954)][_0x492784(0xaf1)](_0x4d6eff))return!![];if(this[_0x492784(0x4db)]()[_0x492784(0x84f)]()[_0x492784(0xba9)](_0x374891=>_0x374891&&_0x374891['note'][_0x492784(0xaf1)](_0x4d6eff)))return!![];const _0x29459f=_0x4b4cc7<0x0?-0x1:0x1;_0x4b4cc7=Math['abs'](_0x4b4cc7);let _0x4a4052=this['subject']()[_0x492784(0x6dd)]();this[_0x492784(0x74a)]()[_0x492784(0x954)][_0x492784(0xaf1)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x4a4052+=Number(RegExp['$1'])/0x64);_0x4a4052=_0x4a4052[_0x492784(0x6b6)](0.01,0x1);const _0x639b12=this[_0x492784(0x38c)](),_0x5f3f6c=_0x4a4052*_0x639b12;if(_0x4b4cc7>_0x5f3f6c&&_0x639b12>_0x5f3f6c){if(_0x492784(0x3fe)===_0x492784(0x1ce)){const _0x4d4408=_0x42b326['floor'](_0x2fbae8[_0x492784(0x7d5)]/0x3),_0x4a251d=this[_0x492784(0x49c)]()?(_0x4b05e2['width']+_0xa9e60d[_0x492784(0xb26)])/0x2-_0x4d4408:(_0x3c91e1[_0x492784(0x7d5)]-_0x5cc6a2[_0x492784(0xb26)])/-0x2,_0x2909c4=this[_0x492784(0x7a9)](),_0x16a70f=_0x2909c4['y']+_0x2909c4[_0x492784(0x842)],_0x4f766f=this['statusWindowRectBorderStyle'](),_0x2f20e8=_0x4f766f['y']-_0x16a70f;return new _0x2523bd(_0x4a251d,_0x16a70f,_0x4d4408,_0x2f20e8);}else{_0x4b4cc7-=_0x5f3f6c;const _0x53ec5d=VisuMZ[_0x492784(0x8c3)][_0x492784(0x58d)]['Damage']['DefaultSoftScaler'],_0x5ccb0c=Math[_0x492784(0x26b)](0x1-_0x4b4cc7/((_0x639b12-_0x5f3f6c)*_0x53ec5d+_0x4b4cc7),0.01);_0x4b4cc7*=_0x5ccb0c,_0x4b4cc7+=_0x5f3f6c;}}return _0x4b4cc7*_0x29459f;},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x38c)]=function(){const _0x413f85=_0x16d1ef;if(this[_0x413f85(0x74a)]()[_0x413f85(0x954)][_0x413f85(0xaf1)](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0x413f85(0x3ac)===_0x413f85(0x34d)){const _0x3c760e=_0x34111e[_0x413f85(0x677)](0x2)===0x0?this['opponentsUnit']():this[_0x413f85(0xadb)]();_0x238233[_0x413f85(0x8ad)](_0x3c760e[_0x413f85(0x982)]());}else return Number(RegExp['$1']);}else return _0x413f85(0xb92)===_0x413f85(0xb92)?this[_0x413f85(0x4db)]()[_0x413f85(0x37e)]():_0x4bbdff['friendsUnit']()['aliveMembers']()[_0x413f85(0x787)](_0x38da21=>_0x38da21!==_0x4e341e);},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x426)]=function(_0x22e662){let _0x5d51a9=this['getHardDamageCap']();return _0x22e662['clamp'](-_0x5d51a9,_0x5d51a9);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x21c)]=Game_Action[_0x16d1ef(0xa5b)]['apply'],Game_Action['prototype'][_0x16d1ef(0x712)]=function(_0x526d1b){const _0xf5cb4d=_0x16d1ef;this['applyBattleCoreJS'](_0xf5cb4d(0x725),_0x526d1b,0x0,!![]),VisuMZ[_0xf5cb4d(0x8c3)][_0xf5cb4d(0x21c)][_0xf5cb4d(0x2c7)](this,_0x526d1b),this['applyBattleCoreJS'](_0xf5cb4d(0x761),_0x526d1b,this['_executedValue']||0x0,!![]),this[_0xf5cb4d(0x17b)](_0x526d1b);},Game_Action['prototype'][_0x16d1ef(0x600)]=function(_0x2a31d5,_0x44169e,_0x377aa8,_0x578b6e){const _0x1ec998=_0x16d1ef;if(this[_0x1ec998(0x76d)]||this[_0x1ec998(0x65a)])return;_0x377aa8=_0x377aa8||0x0;const _0x67de6b=_0x377aa8,_0x22b51d=VisuMZ[_0x1ec998(0x8c3)][_0x1ec998(0x58d)][_0x1ec998(0x93b)],_0x4f019d=_0x2a31d5[_0x1ec998(0x86a)]('');if(_0x22b51d[_0x4f019d]){_0x377aa8=_0x22b51d[_0x4f019d][_0x1ec998(0x2c7)](this,_0x377aa8,_0x44169e);if(_0x578b6e)_0x377aa8=_0x67de6b;}let _0x2845b7=VisuMZ['BattleCore']['createKeyJS'](this[_0x1ec998(0x74a)](),_0x2a31d5['format'](''));if(VisuMZ[_0x1ec998(0x8c3)]['JS'][_0x2845b7]){_0x377aa8=VisuMZ[_0x1ec998(0x8c3)]['JS'][_0x2845b7][_0x1ec998(0x2c7)](this,this[_0x1ec998(0x4db)](),_0x44169e,this['item'](),_0x377aa8);if(_0x578b6e)_0x377aa8=_0x67de6b;}for(const _0x52f00f of this['subject']()[_0x1ec998(0x84f)]()){if(!_0x52f00f)continue;_0x2845b7=VisuMZ[_0x1ec998(0x8c3)][_0x1ec998(0x6d9)](_0x52f00f,_0x2a31d5[_0x1ec998(0x86a)](_0x1ec998(0x9b0)));if(VisuMZ[_0x1ec998(0x8c3)]['JS'][_0x2845b7]){_0x377aa8=VisuMZ[_0x1ec998(0x8c3)]['JS'][_0x2845b7][_0x1ec998(0x2c7)](this,this[_0x1ec998(0x4db)](),_0x44169e,_0x52f00f,_0x377aa8);if(_0x578b6e)_0x377aa8=_0x67de6b;}}for(const _0x1d1bde of _0x44169e[_0x1ec998(0x84f)]()){if(!_0x1d1bde)continue;_0x2845b7=VisuMZ['BattleCore'][_0x1ec998(0x6d9)](_0x1d1bde,_0x2a31d5['format'](_0x1ec998(0xb0c)));if(VisuMZ['BattleCore']['JS'][_0x2845b7]){if(_0x1ec998(0x871)!=='QpNcP'){_0x377aa8=VisuMZ[_0x1ec998(0x8c3)]['JS'][_0x2845b7][_0x1ec998(0x2c7)](this,this['subject'](),_0x44169e,_0x1d1bde,_0x377aa8);if(_0x578b6e)_0x377aa8=_0x67de6b;}else return this['attackAnimationId1']();}}return _0x377aa8;},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0xa7d)]=function(_0x197827){const _0x5a5610=_0x16d1ef,_0x29a557=this[_0x5a5610(0x626)]||0x0,_0x48ca11=VisuMZ['BattleCore'][_0x5a5610(0x58d)][_0x5a5610(0x93b)],_0x55a8ce=_0x197827[_0x5a5610(0x86a)]('');if(_0x48ca11[_0x55a8ce]){if(_0x5a5610(0x208)===_0x5a5610(0x975)){return _0x2c09b2[_0x5a5610(0xa5b)][_0x5a5610(0x49c)][_0x5a5610(0x2c7)](this);;}else _0x48ca11[_0x55a8ce]['call'](this,_0x29a557);}let _0x3a6646=VisuMZ[_0x5a5610(0x8c3)][_0x5a5610(0x6d9)](this[_0x5a5610(0x74a)](),_0x197827);VisuMZ[_0x5a5610(0x8c3)]['JS'][_0x3a6646]&&VisuMZ['BattleCore']['JS'][_0x3a6646]['call'](this,this[_0x5a5610(0x4db)](),this[_0x5a5610(0x4db)](),this[_0x5a5610(0x74a)](),_0x29a557);for(const _0x161336 of this['subject']()[_0x5a5610(0x84f)]()){if(!_0x161336)continue;_0x3a6646=VisuMZ[_0x5a5610(0x8c3)][_0x5a5610(0x6d9)](_0x161336,_0x197827),VisuMZ[_0x5a5610(0x8c3)]['JS'][_0x3a6646]&&VisuMZ[_0x5a5610(0x8c3)]['JS'][_0x3a6646][_0x5a5610(0x2c7)](this,this[_0x5a5610(0x4db)](),this[_0x5a5610(0x4db)](),_0x161336,_0x29a557);}},Game_Action['prototype'][_0x16d1ef(0x9d0)]=function(){const _0x3ed54d=_0x16d1ef;return VisuMZ[_0x3ed54d(0x8c3)][_0x3ed54d(0x58d)]['Mechanics'][_0x3ed54d(0xaa2)][_0x3ed54d(0x2c7)](this);},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x38d)]=function(){const _0x1274f2=_0x16d1ef;return VisuMZ[_0x1274f2(0x8c3)][_0x1274f2(0x58d)][_0x1274f2(0x93b)][_0x1274f2(0xa43)];},Game_Action['prototype'][_0x16d1ef(0x436)]=function(){const _0x53d5de=_0x16d1ef;return this[_0x53d5de(0x74a)]()['note'][_0x53d5de(0xaf1)](/<JS TARGETS>/i);},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x35b)]=function(){const _0x3b9702=_0x16d1ef;if(!this[_0x3b9702(0xb79)]&&this[_0x3b9702(0x4db)]()[_0x3b9702(0x46d)]())return![];if(this[_0x3b9702(0x436)]())return!![];return typeof this[_0x3b9702(0x74a)]()[_0x3b9702(0x482)]==='string';},VisuMZ['BattleCore'][_0x16d1ef(0x3ed)]=Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x6bd)],Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x6bd)]=function(){const _0x4484cc=_0x16d1ef;if(this['isBattleCoreTargetScope']()&&!this[_0x4484cc(0x436)]()){if(_0x4484cc(0xbb7)===_0x4484cc(0x6e5))this[_0x4484cc(0x41c)]['close'](),this[_0x4484cc(0x1c7)][_0x4484cc(0x1fb)]();else return this['isForOpponentBattleCore']();}else return VisuMZ['BattleCore'][_0x4484cc(0x3ed)][_0x4484cc(0x2c7)](this);},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0xa75)]=function(){const _0x1d4a08=_0x16d1ef,_0xd54459=this[_0x1d4a08(0x74a)]()[_0x1d4a08(0x482)];return _0xd54459[_0x1d4a08(0xaf1)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x93f)]=Game_Action['prototype'][_0x16d1ef(0x9da)],Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x9da)]=function(){const _0x338803=_0x16d1ef;return this[_0x338803(0x35b)]()&&!this[_0x338803(0x436)]()?this[_0x338803(0x7fd)]():VisuMZ[_0x338803(0x8c3)]['Game_Action_isForFriend'][_0x338803(0x2c7)](this);},Game_Action['prototype'][_0x16d1ef(0x7fd)]=function(){const _0x27768a=_0x16d1ef,_0x123d3e=this['item']()[_0x27768a(0x482)];return _0x123d3e[_0x27768a(0xaf1)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ['BattleCore'][_0x16d1ef(0x73b)]=Game_Action[_0x16d1ef(0xa5b)]['isForRandom'],Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0xb6e)]=function(){const _0x1bc9aa=_0x16d1ef;return this[_0x1bc9aa(0x35b)]()&&!this['isCustomBattleScope']()?this[_0x1bc9aa(0x9ae)]():VisuMZ[_0x1bc9aa(0x8c3)][_0x1bc9aa(0x73b)][_0x1bc9aa(0x2c7)](this);},Game_Action['prototype'][_0x16d1ef(0x9ae)]=function(){const _0x451b75=_0x16d1ef,_0x3bc348=this[_0x451b75(0x74a)]()[_0x451b75(0x482)];return _0x3bc348[_0x451b75(0xaf1)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x48f)]=Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0xb62)],Game_Action[_0x16d1ef(0xa5b)]['needsSelection']=function(){const _0xdb1f38=_0x16d1ef;return this[_0xdb1f38(0x35b)]()&&!this[_0xdb1f38(0x436)]()?this[_0xdb1f38(0x7a7)]():VisuMZ[_0xdb1f38(0x8c3)]['Game_Action_needsSelection'][_0xdb1f38(0x2c7)](this);},Game_Action[_0x16d1ef(0xa5b)]['needsSelectionBattleCore']=function(){const _0x4a5ea3=_0x16d1ef,_0x12080a=this[_0x4a5ea3(0x74a)]()['scope'];if(_0x12080a[_0x4a5ea3(0xaf1)](/RANDOM/i))return![];if(_0x12080a[_0x4a5ea3(0xaf1)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x12080a['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ['BattleCore'][_0x4a5ea3(0x48f)][_0x4a5ea3(0x2c7)](this);},VisuMZ['BattleCore'][_0x16d1ef(0x5dd)]=Game_Action[_0x16d1ef(0xa5b)]['makeTargets'],Game_Action[_0x16d1ef(0xa5b)]['makeTargets']=function(){const _0x545a1d=_0x16d1ef;let _0x183331=[];return this['isBattleCoreTargetScope']()?_0x183331=this[_0x545a1d(0x8a9)]():_0x183331=VisuMZ[_0x545a1d(0x8c3)][_0x545a1d(0x5dd)][_0x545a1d(0x2c7)](this),_0x183331=this[_0x545a1d(0xabc)](_0x183331),_0x183331;},Game_Action['prototype'][_0x16d1ef(0x8a9)]=function(){const _0x58d613=_0x16d1ef;let _0x2f1cd1=[];const _0x5c22eb=String(this[_0x58d613(0x74a)]()[_0x58d613(0x482)]),_0x199b19=VisuMZ[_0x58d613(0x8c3)][_0x58d613(0x6d9)](this[_0x58d613(0x74a)](),_0x58d613(0x39a));if(VisuMZ[_0x58d613(0x8c3)]['JS'][_0x199b19]){if(_0x58d613(0x520)!==_0x58d613(0x520)){if(!_0x1cce63[_0x58d613(0x37d)]())return;const _0x1f53df=_0x2910fd[_0x58d613(0xb38)]();if(!_0x1f53df)return;_0x1f53df[_0x58d613(0x13b)]('battleEffect');}else{_0x2f1cd1=VisuMZ[_0x58d613(0x8c3)][_0x58d613(0x5dd)][_0x58d613(0x2c7)](this);const _0xbdab14=VisuMZ['BattleCore'][_0x58d613(0x6d9)](this[_0x58d613(0x74a)](),'Targets');return _0x2f1cd1=VisuMZ['BattleCore']['JS'][_0xbdab14][_0x58d613(0x2c7)](this,this['subject'](),_0x2f1cd1),this[_0x58d613(0x24e)](_0x2f1cd1);}}if(_0x5c22eb[_0x58d613(0xaf1)](/(\d+) RANDOM ANY/i)){if(_0x58d613(0x833)===_0x58d613(0x833)){let _0x1c6722=Number(RegExp['$1']);while(_0x1c6722--){if('XCYrF'===_0x58d613(0xaf5)){const _0x4990d9=this[_0x58d613(0x74a)]()['scope'];return _0x4990d9[_0x58d613(0xaf1)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);}else{const _0x31bf6c=Math[_0x58d613(0x677)](0x2)===0x0?this[_0x58d613(0x8f4)]():this[_0x58d613(0xadb)]();_0x2f1cd1[_0x58d613(0x8ad)](_0x31bf6c[_0x58d613(0x982)]());}}return this[_0x58d613(0x24e)](_0x2f1cd1);}else{if(!_0x17ecd1['isSceneBattle']())return;const _0x447fd5=_0x11d066[_0x58d613(0xb38)]();if(!_0x447fd5)return;_0x447fd5[_0x58d613(0x13b)]('battleMove');}}if(_0x5c22eb[_0x58d613(0xaf1)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x9d5aca=Number(RegExp['$1']);while(_0x9d5aca--){_0x2f1cd1[_0x58d613(0x8ad)](this[_0x58d613(0x8f4)]()[_0x58d613(0x982)]());}return this[_0x58d613(0x24e)](_0x2f1cd1);}if(_0x5c22eb['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x58d613(0x44f)===_0x58d613(0x44f)){let _0x50f066=Number(RegExp['$1']);while(_0x50f066--){_0x2f1cd1[_0x58d613(0x8ad)](this[_0x58d613(0xadb)]()[_0x58d613(0x982)]());}return this[_0x58d613(0x24e)](_0x2f1cd1);}else this[_0x58d613(0x706)](_0x240de1['list'],0x0);}if(_0x5c22eb[_0x58d613(0xaf1)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x2f1cd1['push'](...this['friendsUnit']()[_0x58d613(0x888)]()[_0x58d613(0x787)](_0x122c23=>_0x122c23!==this[_0x58d613(0x4db)]())),this[_0x58d613(0x24e)](_0x2f1cd1);return VisuMZ[_0x58d613(0x8c3)][_0x58d613(0x5dd)][_0x58d613(0x2c7)](this);},Game_Action['prototype'][_0x16d1ef(0x85b)]=function(_0x407ee5){const _0x52c14b=_0x16d1ef,_0x3b3b0f=[];for(let _0xe01f5=0x0;_0xe01f5<this[_0x52c14b(0x1b4)]();_0xe01f5++){_0x52c14b(0xba0)!==_0x52c14b(0x5ed)?_0x3b3b0f['push'](_0x407ee5[_0x52c14b(0x982)]()):_0x16f30e[_0x52c14b(0xa5b)][_0x52c14b(0x4b8)][_0x52c14b(0x2c7)](this);}return _0x3b3b0f;},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0xabc)]=function(_0x2263c4){const _0x19bffd=_0x16d1ef;if(!this[_0x19bffd(0x74a)]())return _0x2263c4;const _0x366180=this[_0x19bffd(0x74a)]()[_0x19bffd(0x954)];return _0x366180[_0x19bffd(0xaf1)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&(_0x19bffd(0x4df)!==_0x19bffd(0x4df)?this['isPartyCommandWindowDisabled']()?this[_0x19bffd(0x664)]():_0x2413b9[_0x19bffd(0x8c3)][_0x19bffd(0x813)][_0x19bffd(0x2c7)](this):_0x2263c4[_0x19bffd(0x9ba)](this['subject']())),_0x2263c4;},VisuMZ['BattleCore'][_0x16d1ef(0x778)]=Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x4e2)],Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x4e2)]=function(_0x408a7a,_0x288aa5){const _0x2a77bd=_0x16d1ef;VisuMZ[_0x2a77bd(0x8c3)]['Game_Action_itemEffectAddAttackState'][_0x2a77bd(0x2c7)](this,_0x408a7a,_0x288aa5);if(!_0x408a7a[_0x2a77bd(0x4bb)]())return;for(const _0xe6ee66 of this[_0x2a77bd(0x4db)]()['attackStates']()){if(_0xe6ee66===_0x408a7a[_0x2a77bd(0x493)]()){let _0x274901=_0x288aa5['value1'];_0x274901*=_0x408a7a['stateRate'](_0xe6ee66),_0x274901*=this['subject']()[_0x2a77bd(0x271)](_0xe6ee66),_0x274901*=this['lukEffectRate'](_0x408a7a),Math['random']()<_0x274901&&(_0x408a7a[_0x2a77bd(0x4bf)]=!![],this['makeSuccess'](_0x408a7a));}}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x95b)]=Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x6ec)],Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x6ec)]=function(_0x464603,_0x261a97){const _0x39ec79=_0x16d1ef;VisuMZ[_0x39ec79(0x8c3)][_0x39ec79(0x95b)][_0x39ec79(0x2c7)](this,_0x464603,_0x261a97);if(!_0x464603[_0x39ec79(0x4bb)]())return;if(_0x261a97[_0x39ec79(0xa38)]!==_0x464603[_0x39ec79(0x493)]())return;let _0x32cf91=_0x261a97[_0x39ec79(0x8eb)];!this[_0x39ec79(0x88e)]()&&(_0x32cf91*=_0x464603[_0x39ec79(0x47b)](_0x261a97[_0x39ec79(0xa38)]),_0x32cf91*=this[_0x39ec79(0x56d)](_0x464603)),Math['random']()<_0x32cf91&&(_0x464603[_0x39ec79(0x4bf)]=!![],this[_0x39ec79(0x9c7)](_0x464603));},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x24c)]=Game_Action['prototype'][_0x16d1ef(0x63e)],Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x63e)]=function(){const _0x2740f1=_0x16d1ef;VisuMZ[_0x2740f1(0x8c3)][_0x2740f1(0x24c)][_0x2740f1(0x2c7)](this),this['applyGlobalCommonEventNotetags'](),this[_0x2740f1(0x2b1)]();},Game_Action['prototype'][_0x16d1ef(0xa4f)]=function(){const _0x22044c=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;const _0x18ed14=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x59310c=this[_0x22044c(0x74a)]()['note']['match'](_0x18ed14);if(_0x59310c)for(const _0xace42c of _0x59310c){if(!_0xace42c)continue;_0xace42c[_0x22044c(0xaf1)](_0x18ed14);const _0x501f53=String(RegExp['$1'])['split'](',')[_0x22044c(0x526)](_0x15cdf0=>String(_0x15cdf0)[_0x22044c(0x699)]()),_0x1473bf=_0x501f53[_0x22044c(0x526)](_0x13d9ab=>DataManager['getCommonEventIdWithName'](_0x13d9ab));for(const _0xd36040 of _0x1473bf){if(_0x22044c(0x611)!==_0x22044c(0x221)){const _0xca7375=$dataCommonEvents[_0xd36040];_0xca7375&&$gameTemp[_0x22044c(0x5ab)](_0xd36040);}else{if(_0x306b7d['_baseX']>_0x9b549c)_0x32718f+=_0x3a1570[_0x22044c(0x7d5)]/0x2+_0x5c2052;if(_0x564c22[_0x22044c(0x37a)]<_0x169e21)_0x202f66-=_0x2c55d5[_0x22044c(0x7d5)]/0x2+_0x2a234b;}}}},DataManager['getCommonEventIdWithName']=function(_0x2bf94f){const _0x32a907=_0x16d1ef;_0x2bf94f=_0x2bf94f['toUpperCase']()[_0x32a907(0x699)](),this[_0x32a907(0xa9e)]=this[_0x32a907(0xa9e)]||{};if(this[_0x32a907(0xa9e)][_0x2bf94f])return this[_0x32a907(0xa9e)][_0x2bf94f];for(const _0x5eb7db of $dataCommonEvents){if(!_0x5eb7db)continue;let _0x3a26c3=_0x5eb7db[_0x32a907(0x8c4)];_0x3a26c3=_0x3a26c3[_0x32a907(0x541)](/\x1I\[(\d+)\]/gi,''),_0x3a26c3=_0x3a26c3[_0x32a907(0x541)](/\\I\[(\d+)\]/gi,''),this[_0x32a907(0xa9e)][_0x3a26c3[_0x32a907(0xaff)]()['trim']()]=_0x5eb7db['id'];}return this['_commonEventIDs'][_0x2bf94f]||0x0;},Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x2b1)]=function(){const _0x1c27bc=_0x16d1ef;if(!SceneManager[_0x1c27bc(0x37d)]())return;const _0xb7f27c=VisuMZ[_0x1c27bc(0x8c3)][_0x1c27bc(0x58d)]['Mechanics'];_0xb7f27c[_0x1c27bc(0x3d3)]&&('JuKZc'!==_0x1c27bc(0x59a)?this[_0x1c27bc(0x834)]=!![]:$gameSwitches[_0x1c27bc(0x6d6)](_0xb7f27c[_0x1c27bc(0x3d3)],![]));if(_0xb7f27c[_0x1c27bc(0x4c4)]){if('GesXh'!==_0x1c27bc(0x247)){const _0x2127ed=this[_0x1c27bc(0x601)]()[_0x1c27bc(0x76a)]||0x0;return _0x173c21[_0x1c27bc(0x3c9)][_0x2127ed];}else $gameSwitches[_0x1c27bc(0x6d6)](_0xb7f27c[_0x1c27bc(0x4c4)],![]);}_0xb7f27c['VariableDmg']&&$gameVariables['setValue'](_0xb7f27c[_0x1c27bc(0x43d)],0x0);if(_0xb7f27c[_0x1c27bc(0x1d3)]){if(_0x1c27bc(0xb12)!==_0x1c27bc(0x63a))$gameVariables[_0x1c27bc(0x6d6)](_0xb7f27c[_0x1c27bc(0x1d3)],0x0);else{const _0xe4e04a=_0x52f555[_0x1c27bc(0x7d7)],_0x11dbc2=_0x1c27bc(0x7db);this[_0x1c27bc(0x7c7)](_0xe4e04a,_0x11dbc2);}}},Game_Action['prototype']['applyResultSwitches']=function(_0x2f34b3){const _0x2978ac=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;if(!_0x2f34b3)return;const _0x36ba77=_0x2f34b3[_0x2978ac(0x8cd)](),_0x1f2a9f=VisuMZ[_0x2978ac(0x8c3)][_0x2978ac(0x58d)][_0x2978ac(0x93b)];_0x1f2a9f['SwitchCritical']&&_0x36ba77[_0x2978ac(0x1f7)]&&$gameSwitches['setValue'](_0x1f2a9f[_0x2978ac(0x3d3)],!![]);if(_0x1f2a9f[_0x2978ac(0x4c4)]&&(_0x36ba77[_0x2978ac(0x4d3)]||_0x36ba77[_0x2978ac(0x62e)])){if(_0x2978ac(0xb97)!==_0x2978ac(0xb97))return this[_0x2978ac(0x842)]*this['mainSpriteScaleY']();else $gameSwitches[_0x2978ac(0x6d6)](_0x1f2a9f['SwitchMissEvade'],!![]);}if(_0x1f2a9f[_0x2978ac(0x43d)]){let _0x3a2d16=$gameVariables[_0x2978ac(0x4be)](_0x1f2a9f[_0x2978ac(0x43d)]);_0x36ba77[_0x2978ac(0x5a4)]>0x0&&(_0x3a2d16+=Math[_0x2978ac(0xaf4)](_0x36ba77['hpDamage'])),$gameVariables[_0x2978ac(0x6d6)](_0x1f2a9f[_0x2978ac(0x43d)],_0x3a2d16);}if(_0x1f2a9f['VariableHeal']){let _0x51a385=$gameVariables[_0x2978ac(0x4be)](_0x1f2a9f[_0x2978ac(0x1d3)]);if(_0x36ba77['hpDamage']<0x0){if(_0x2978ac(0x5a7)!==_0x2978ac(0x5a7)){const _0x3b97aa=[],_0x107acf=new _0x59fb1f(this);return _0x107acf[_0x2978ac(0x2d2)](),_0x3b97aa['push'](_0x107acf),_0x3b97aa;}else _0x51a385+=Math[_0x2978ac(0xaf4)](_0x36ba77[_0x2978ac(0x5a4)]);}$gameVariables[_0x2978ac(0x6d6)](_0x1f2a9f[_0x2978ac(0x1d3)],_0x51a385);}},VisuMZ['BattleCore'][_0x16d1ef(0x3ea)]=Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x14c)],Game_BattlerBase['prototype'][_0x16d1ef(0x14c)]=function(){const _0x18911f=_0x16d1ef;VisuMZ[_0x18911f(0x8c3)][_0x18911f(0x3ea)][_0x18911f(0x2c7)](this),this['initMembersBattleCore']();},Game_BattlerBase['prototype'][_0x16d1ef(0x872)]=function(){const _0xd44c4f=_0x16d1ef;this[_0xd44c4f(0x7a6)]=![];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xad8)]=Game_BattlerBase['prototype'][_0x16d1ef(0x928)],Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x928)]=function(){const _0x1a1a3e=_0x16d1ef;this['_cache']={},VisuMZ[_0x1a1a3e(0x8c3)][_0x1a1a3e(0xad8)][_0x1a1a3e(0x2c7)](this);},Game_BattlerBase['prototype'][_0x16d1ef(0x66c)]=function(_0x40ca3e){const _0x1271a9=_0x16d1ef;return this[_0x1271a9(0x965)]=this[_0x1271a9(0x965)]||{},this[_0x1271a9(0x965)][_0x40ca3e]!==undefined;},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x37e)]=function(){const _0x549d71=_0x16d1ef;if(this[_0x549d71(0x965)][_0x549d71(0x37e)]!==undefined)return this[_0x549d71(0x965)][_0x549d71(0x37e)];const _0x3cc922=/<DAMAGE CAP:[ ](\d+)>/i,_0x215c42=this[_0x549d71(0x84f)]()[_0x549d71(0x526)](_0x407abf=>_0x407abf&&_0x407abf[_0x549d71(0x954)]['match'](_0x3cc922)?Number(RegExp['$1']):0x0);let _0x3fa80f=_0x215c42[_0x549d71(0xa40)]>0x0?Math[_0x549d71(0x26b)](..._0x215c42):0x0;if(_0x3fa80f<=0x0)_0x3fa80f=VisuMZ[_0x549d71(0x8c3)][_0x549d71(0x58d)][_0x549d71(0x6c4)][_0x549d71(0x949)];return this[_0x549d71(0x965)][_0x549d71(0x37e)]=_0x3fa80f,this[_0x549d71(0x965)][_0x549d71(0x37e)];},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x6dd)]=function(){const _0x3e6805=_0x16d1ef;if(this[_0x3e6805(0x965)][_0x3e6805(0x838)]!==undefined)return this[_0x3e6805(0x965)][_0x3e6805(0x838)];let _0x8422bb=VisuMZ['BattleCore'][_0x3e6805(0x58d)]['Damage'][_0x3e6805(0x24f)];const _0x3d4c0b=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x420555=this['traitObjects']()[_0x3e6805(0x526)](_0x2f2dd2=>_0x2f2dd2&&_0x2f2dd2['note']['match'](_0x3d4c0b)?Number(RegExp['$1'])/0x64:0x0);return _0x8422bb=_0x420555[_0x3e6805(0x828)]((_0x5c50e0,_0x551509)=>_0x5c50e0+_0x551509,_0x8422bb),this['_cache'][_0x3e6805(0x838)]=_0x8422bb,this['_cache'][_0x3e6805(0x838)][_0x3e6805(0x6b6)](0.01,0x1);},VisuMZ['BattleCore'][_0x16d1ef(0x3e6)]=Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x407)],Game_BattlerBase['prototype']['die']=function(){const _0xce631c=_0x16d1ef;VisuMZ[_0xce631c(0x8c3)][_0xce631c(0x3e6)][_0xce631c(0x2c7)](this),SceneManager[_0xce631c(0x37d)]()&&this[_0xce631c(0x80f)](_0xce631c(0x306));},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0xb02)]=function(){const _0x13bc95=_0x16d1ef;if(!SceneManager[_0x13bc95(0x37d)]())return null;if(!SceneManager[_0x13bc95(0x438)]['_spriteset'])return null;return SceneManager[_0x13bc95(0x438)][_0x13bc95(0x71a)][_0x13bc95(0x2a3)](this);},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x47d)]=function(){const _0x866d0e=_0x16d1ef;return VisuMZ[_0x866d0e(0x8c3)][_0x866d0e(0x58d)][_0x866d0e(0x65f)]['AnchorX'];},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x75c)]=function(){const _0x53ab79=_0x16d1ef;return VisuMZ[_0x53ab79(0x8c3)]['Settings']['Actor'][_0x53ab79(0x812)];},Game_BattlerBase['prototype'][_0x16d1ef(0xa34)]=function(){const _0x3c1dc9=_0x16d1ef;return this[_0x3c1dc9(0x71d)]&&this[_0x3c1dc9(0x71d)]()?VisuMZ[_0x3c1dc9(0x8c3)]['Settings'][_0x3c1dc9(0x65f)][_0x3c1dc9(0xa1e)]:VisuMZ[_0x3c1dc9(0x8c3)][_0x3c1dc9(0x58d)][_0x3c1dc9(0xb6b)][_0x3c1dc9(0xa1e)];},Game_BattlerBase[_0x16d1ef(0xa5b)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x337)]=function(){return 0x0;},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0xa28)]=function(){return 0x0;},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x1b5)]=function(_0x5e6934){const _0x66b113=_0x16d1ef;if(!_0x5e6934)return 0x0;let _0x207109=0x0;const _0x32dc29=_0x5e6934[_0x66b113(0x954)];return _0x32dc29[_0x66b113(0xaf1)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x207109+=Number(RegExp['$1'])),_0x32dc29[_0x66b113(0xaf1)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x207109+=Number(RegExp['$1'])),_0x207109;},Game_BattlerBase['prototype'][_0x16d1ef(0x50b)]=function(_0x3bb5f9){const _0x4dd4e4=_0x16d1ef;if(!_0x3bb5f9)return 0x0;let _0x1d0e93=0x0;const _0x22fc40=_0x3bb5f9[_0x4dd4e4(0x954)];return _0x22fc40[_0x4dd4e4(0xaf1)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x1d0e93+=Number(RegExp['$1'])),_0x22fc40[_0x4dd4e4(0xaf1)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&('FLxHU'!==_0x4dd4e4(0x503)?_0x1d0e93+=Number(RegExp['$2']):_0x4eb4a8['prepareCustomActionSequence']()),_0x1d0e93;},VisuMZ['BattleCore'][_0x16d1ef(0xbe4)]=Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x160)],Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x160)]=function(_0x3a6c6d){const _0x4cea8e=_0x16d1ef;if(_0x3a6c6d===this[_0x4cea8e(0x493)]()&&this[_0x4cea8e(0x4bb)]())return!![];return VisuMZ['BattleCore']['Game_BattlerBase_isStateResist'][_0x4cea8e(0x2c7)](this,_0x3a6c6d);},Game_BattlerBase[_0x16d1ef(0xa5b)]['isImmortal']=function(){return this['_immortal'];},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x29d)]=function(_0x3ef41d){const _0x68e39e=_0x16d1ef;_0x3ef41d?this[_0x68e39e(0x1af)]():this[_0x68e39e(0x921)]();},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x1af)]=function(){const _0x30f495=_0x16d1ef;if(this[_0x30f495(0x8ae)]())return;this[_0x30f495(0x7a6)]=!![],this[_0x30f495(0x4bf)]=![];},Game_BattlerBase['prototype'][_0x16d1ef(0x921)]=function(){const _0x376ae9=_0x16d1ef,_0x5d1251=this[_0x376ae9(0x341)]();this['_immortal']=![],_0x5d1251&&this[_0x376ae9(0x4bf)]&&this[_0x376ae9(0x407)](),this[_0x376ae9(0x4bf)]=![],this['refresh'](),this[_0x376ae9(0x8ae)]()&&_0x5d1251&&(this['performCollapse'](),this[_0x376ae9(0x5ae)]());},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x805)]=Game_Action['prototype'][_0x16d1ef(0x505)],Game_Action[_0x16d1ef(0xa5b)]['numRepeats']=function(){const _0x220c0e=_0x16d1ef;return this[_0x220c0e(0x74a)]()?VisuMZ[_0x220c0e(0x8c3)][_0x220c0e(0x805)][_0x220c0e(0x2c7)](this):0x0;},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x72a)]=Game_Action['prototype'][_0x16d1ef(0x2d2)],Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x2d2)]=function(){const _0x32a91f=_0x16d1ef;if(this['subject']()&&this[_0x32a91f(0x4db)]()['canAttack']())VisuMZ[_0x32a91f(0x8c3)]['Game_Action_setAttack']['call'](this);else{if(_0x32a91f(0x4ab)!==_0x32a91f(0x4ab))return!this[_0x32a91f(0xa77)]()&&!this[_0x32a91f(0x232)]();else this[_0x32a91f(0x721)]();}},VisuMZ['BattleCore'][_0x16d1ef(0x265)]=Game_BattlerBase[_0x16d1ef(0xa5b)]['canAttack'],Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0xa8d)]=function(){const _0x231a16=_0x16d1ef;if(!this[_0x231a16(0xa81)]())return![];return VisuMZ['BattleCore'][_0x231a16(0x265)]['call'](this);},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0xa81)]=function(){const _0x3c8e38=_0x16d1ef;for(const _0x3036a6 of this[_0x3c8e38(0x84f)]()){if(!_0x3036a6)continue;if(_0x3036a6[_0x3c8e38(0x954)][_0x3c8e38(0xaf1)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x16d1ef(0x33d)]=Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x146)],Game_Action[_0x16d1ef(0xa5b)][_0x16d1ef(0x146)]=function(){const _0x362ab2=_0x16d1ef;if(this[_0x362ab2(0x4db)]()[_0x362ab2(0x1a3)]()){if(_0x362ab2(0xbe0)===_0x362ab2(0xa2f))return this[_0x362ab2(0x601)]()[_0x362ab2(0x49a)];else VisuMZ[_0x362ab2(0x8c3)][_0x362ab2(0x33d)][_0x362ab2(0x2c7)](this);}},VisuMZ[_0x16d1ef(0x8c3)]['Game_BattlerBase_canGuard']=Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x1a3)],Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x1a3)]=function(){const _0x132a0f=_0x16d1ef;if(!this[_0x132a0f(0x825)]())return![];return VisuMZ[_0x132a0f(0x8c3)][_0x132a0f(0xb53)][_0x132a0f(0x2c7)](this);},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x825)]=function(){const _0x7a071f=_0x16d1ef;for(const _0x4f13bd of this[_0x7a071f(0x84f)]()){if(_0x7a071f(0x9a7)!==_0x7a071f(0x9a7))this[_0x7a071f(0xb76)][_0x7a071f(0x7f9)]=![];else{if(!_0x4f13bd)continue;if(_0x4f13bd[_0x7a071f(0x954)][_0x7a071f(0xaf1)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}}return!![];},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x23f)]=function(){const _0x335771=_0x16d1ef;for(const _0x59febe of this[_0x335771(0x84f)]()){if(!_0x59febe)continue;if(_0x59febe[_0x335771(0x954)][_0x335771(0xaf1)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x38d)]=function(){const _0x8e4029=_0x16d1ef;return VisuMZ[_0x8e4029(0x8c3)][_0x8e4029(0x58d)]['Mechanics'][_0x8e4029(0xa43)];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x3ec)]=Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x645)],Game_Battler['prototype'][_0x16d1ef(0x645)]=function(){const _0xfb6dcc=_0x16d1ef;if(SceneManager[_0xfb6dcc(0x37d)]()&&$gameTroop[_0xfb6dcc(0x9c2)]()<=0x0)return;if(SceneManager[_0xfb6dcc(0x37d)]()&&BattleManager[_0xfb6dcc(0x86c)]()&&this[_0xfb6dcc(0xb9d)]===Graphics[_0xfb6dcc(0x879)]){if(_0xfb6dcc(0xb7a)!==_0xfb6dcc(0xb7a))this['requestMotion'](_0xfb6dcc(0x9f5));else return;}this[_0xfb6dcc(0xb9d)]=Graphics['frameCount'],SceneManager[_0xfb6dcc(0x37d)]()&&this[_0xfb6dcc(0x157)]('PreRegenerateJS'),VisuMZ[_0xfb6dcc(0x8c3)][_0xfb6dcc(0x3ec)]['call'](this),SceneManager[_0xfb6dcc(0x37d)]()&&(this[_0xfb6dcc(0x715)](),this['processBattleCoreJS'](_0xfb6dcc(0x814)));},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x715)]=function(){const _0x17b1fa=_0x16d1ef;if(SceneManager['isSceneBattle']()){if(_0x17b1fa(0xbe5)!==_0x17b1fa(0x254))for(const _0x516d50 of this[_0x17b1fa(0x84f)]()){if(!_0x516d50)continue;this[_0x17b1fa(0x224)](_0x516d50);}else return _0x3691a1[_0x17b1fa(0x8c3)][_0x17b1fa(0x638)]['call'](this,_0x2e21fc);}},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x224)]=function(_0x83f4b8){const _0x3fdfda=_0x16d1ef;if(!Imported[_0x3fdfda(0x6ce)])return;if(!SceneManager[_0x3fdfda(0x37d)]())return;if(this[_0x3fdfda(0x8ae)]())return;if(this[_0x3fdfda(0x403)]())return;if(_0x83f4b8[_0x3fdfda(0x954)][_0x3fdfda(0xaf1)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if('dMjuR'!==_0x3fdfda(0x3aa)){if(!_0x47d881['isSideView']())return;const _0x172b46=this[_0x3fdfda(0xb02)]();if(!_0x172b46)return;_0x172b46[_0x3fdfda(0x796)](_0x566487,_0x5e5f92,_0x21d68c,_0xfa2ee1);}else{const _0x250ba4=Number(RegExp['$1']);$gameTemp[_0x3fdfda(0x708)]([this],_0x250ba4,![],![]);}}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x84d)]=Game_Battler['prototype'][_0x16d1ef(0xbd5)],Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xbd5)]=function(){const _0x59f2e2=_0x16d1ef;this['processBattleCoreJS'](_0x59f2e2(0xa50)),VisuMZ[_0x59f2e2(0x8c3)][_0x59f2e2(0x84d)][_0x59f2e2(0x2c7)](this),this['processBattleCoreJS'](_0x59f2e2(0x8d9));},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x40a)]=Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x962)],Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x962)]=function(){const _0x519d64=_0x16d1ef;this[_0x519d64(0x157)](_0x519d64(0x2da)),VisuMZ['BattleCore'][_0x519d64(0x40a)]['call'](this),this[_0x519d64(0x157)](_0x519d64(0x91e));},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x157)]=function(_0x167f1d){const _0x1c3ef5=_0x16d1ef;if(this[_0x1c3ef5(0x76d)]||this[_0x1c3ef5(0x65a)])return;const _0x53c05d=VisuMZ[_0x1c3ef5(0x8c3)][_0x1c3ef5(0x58d)][_0x1c3ef5(0x93b)];if(_0x53c05d[_0x167f1d])_0x53c05d[_0x167f1d][_0x1c3ef5(0x2c7)](this);for(const _0x50e69c of this[_0x1c3ef5(0x84f)]()){if(_0x1c3ef5(0x5b9)!==_0x1c3ef5(0x326)){if(!_0x50e69c)continue;key=VisuMZ[_0x1c3ef5(0x8c3)][_0x1c3ef5(0x6d9)](_0x50e69c,_0x167f1d),VisuMZ[_0x1c3ef5(0x8c3)]['JS'][key]&&VisuMZ[_0x1c3ef5(0x8c3)]['JS'][key][_0x1c3ef5(0x2c7)](this,this,this,_0x50e69c,0x0);}else{if(!_0x4d8bdd[_0x1c3ef5(0x8c3)][_0x1c3ef5(0x58d)][_0x1c3ef5(0x591)]['ShowCritical'])return;_0x18d3e8[_0x1c3ef5(0x8c3)]['Window_BattleLog_displayCritical'][_0x1c3ef5(0x2c7)](this,_0x3b60f3);}}},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x9e3)]=function(){const _0x442c4e=_0x16d1ef;return VisuMZ['BattleCore']['Settings'][_0x442c4e(0x65f)]['ChantStyle']||![];},Game_Battler[_0x16d1ef(0xa5b)]['isChanting']=function(){const _0x390b02=_0x16d1ef;if(this[_0x390b02(0x98f)]()){if(this[_0x390b02(0x9e3)]()){if(this[_0x390b02(0x800)][_0x390b02(0xba9)](_0x2b2307=>_0x2b2307[_0x390b02(0x74a)]()&&_0x2b2307['isMagical']()))return!![];}else{if(_0x390b02(0x25e)===_0x390b02(0x25e)){if(this[_0x390b02(0x800)][_0x390b02(0xba9)](_0x2e663f=>_0x2e663f['item']()&&_0x2e663f[_0x390b02(0x632)]()))return!![];}else{const _0x40a4a1=_0x356e4a(_0x5f31d9['$1'])[_0x390b02(0x31e)](/[\r\n]+/)['remove']('');_0x50d702[_0x390b02(0x895)]=_0x1ac83e[_0x390b02(0x4ca)](_0x40a4a1);}}}if(BattleManager[_0x390b02(0x86c)]()&&this[_0x390b02(0x441)]===_0x390b02(0x2c2)){if(this[_0x390b02(0x9e3)]())return this[_0x390b02(0x27b)]()&&this[_0x390b02(0x27b)]()['item']()&&this['currentAction']()['isMagical']();else{if(_0x390b02(0xa2e)!=='mCxhe'){const _0x1a8eb9=_0x1c2d5d[_0x390b02(0x5d3)]('['+_0x3d016f['$1'][_0x390b02(0xaf1)](/\d+/g)+']');for(const _0x5207de of _0x1a8eb9){if(!_0x378707[_0x390b02(0x4be)](_0x5207de))return![];}return!![];}else return this[_0x390b02(0x27b)]()&&this[_0x390b02(0x27b)]()[_0x390b02(0x74a)]()&&this[_0x390b02(0x27b)]()['isMagicSkill']();}}return![];},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x742)]=function(){const _0x1a331d=_0x16d1ef;if(BattleManager[_0x1a331d(0x86c)]()&&this[_0x1a331d(0x441)]==='casting'){if('vmJqi'==='haUOt')this[_0x1a331d(0x955)]['_stateSprite'][_0x1a331d(0x9fa)]['x']=-0x1/(this[_0x1a331d(0x9fa)]['x']||0.001),this[_0x1a331d(0x955)]['_stateSprite'][_0x1a331d(0x9fa)]['y']=0x1/(this[_0x1a331d(0x9fa)]['y']||0.001);else{if(this[_0x1a331d(0x9e3)]())return this[_0x1a331d(0x27b)]()&&this[_0x1a331d(0x27b)]()['item']()&&!this[_0x1a331d(0x27b)]()[_0x1a331d(0x151)]();else{if(_0x1a331d(0x589)!==_0x1a331d(0x6b8))return this[_0x1a331d(0x27b)]()&&this['currentAction']()['item']()&&!this[_0x1a331d(0x27b)]()[_0x1a331d(0x632)]();else _0x24d4ab['snapForBackground']();}}}return![];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x479)]=Game_Battler['prototype'][_0x16d1ef(0xaa1)],Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xaa1)]=function(){const _0xf9c930=_0x16d1ef;VisuMZ['BattleCore'][_0xf9c930(0x479)][_0xf9c930(0x2c7)](this),this[_0xf9c930(0x2ac)]=[];},Game_Battler['prototype'][_0x16d1ef(0x4af)]=function(){const _0x16c794=_0x16d1ef;if(!this[_0x16c794(0x2ac)])this[_0x16c794(0xaa1)]();return this[_0x16c794(0x2ac)][_0x16c794(0xa40)]>0x0;},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x2df)]=function(){const _0x2aaa8d=_0x16d1ef;if(!SceneManager[_0x2aaa8d(0x37d)]())return;if(!this[_0x2aaa8d(0x2ac)])this[_0x2aaa8d(0xaa1)]();this[_0x2aaa8d(0x646)]();const _0x3f34b2=this[_0x2aaa8d(0xb02)]();if(_0x3f34b2)_0x3f34b2[_0x2aaa8d(0x7d1)]();},Game_Battler['prototype'][_0x16d1ef(0x646)]=function(){const _0xf09297=_0x16d1ef,_0x1ea8f4=this['result']();if(_0x1ea8f4[_0xf09297(0x4d3)]||_0x1ea8f4[_0xf09297(0x62e)]){const _0x139574=JsonEx[_0xf09297(0x504)](_0x1ea8f4);_0x139574['hpAffected']=![],_0x139574['mpDamage']=0x0,this[_0xf09297(0x2ac)]['push'](_0x139574);}if(_0x1ea8f4[_0xf09297(0x827)]){if('QYTzZ'!=='QYTzZ')this[_0xf09297(0x36a)]();else{const _0x5cf4b0=JsonEx[_0xf09297(0x504)](_0x1ea8f4);_0x5cf4b0[_0xf09297(0x4d3)]=![],_0x5cf4b0[_0xf09297(0x62e)]=![],_0x5cf4b0[_0xf09297(0x754)]=0x0,this[_0xf09297(0x2ac)]['push'](_0x5cf4b0);}}if(_0x1ea8f4[_0xf09297(0x754)]!==0x0){const _0xf07ad9=JsonEx[_0xf09297(0x504)](_0x1ea8f4);_0xf07ad9[_0xf09297(0x4d3)]=![],_0xf07ad9[_0xf09297(0x62e)]=![],_0xf07ad9[_0xf09297(0x827)]=![],this[_0xf09297(0x2ac)][_0xf09297(0x8ad)](_0xf07ad9);}},Game_Battler['prototype'][_0x16d1ef(0x7f8)]=function(){const _0xd6d837=_0x16d1ef;if(!this[_0xd6d837(0x2ac)])this[_0xd6d837(0xaa1)]();if(VisuMZ['BattleCore'][_0xd6d837(0x58d)][_0xd6d837(0x6c4)][_0xd6d837(0x166)]){if(_0xd6d837(0x26f)===_0xd6d837(0x26f))return this['_damagePopupArray'][_0xd6d837(0x444)]();else _0x43dbcc[_0xd6d837(0x8c3)][_0xd6d837(0x315)]&&_0x25bb96[_0xd6d837(0x8c3)]['ParseSkillNotetags'][_0xd6d837(0x2c7)](this,_0x5a07af),_0x3118f9['BattleCore']['Parse_Notetags_Action'](_0x4a4733),_0x32a3ac['BattleCore'][_0xd6d837(0x5af)](_0xc9875);}else{if('hIrKW'===_0xd6d837(0x59e)){if(_0x32b84a[_0xd6d837(0x37d)]()){const _0x3980bc=this[_0xd6d837(0xb02)]();_0x3980bc&&(_0x3980bc[_0xd6d837(0x795)](_0x2218da),['swing',_0xd6d837(0x9f5),_0xd6d837(0x484)][_0xd6d837(0x4f8)](_0x1c666a)&&this['performWeaponAnimation']());}this[_0xd6d837(0x4e3)]();}else return this[_0xd6d837(0x2ac)]['pop']();}},Game_Battler['prototype']['setupTextPopup']=function(_0x1a511a,_0x4e7ff9){const _0x34701e=_0x16d1ef;if(!SceneManager[_0x34701e(0x37d)]())return;if(!this[_0x34701e(0xb02)]())return;if(_0x1a511a['length']<=0x0)return;_0x4e7ff9=_0x4e7ff9||{},_0x4e7ff9['textColor']=_0x4e7ff9[_0x34701e(0x324)]||_0x34701e(0xba4),_0x4e7ff9[_0x34701e(0x198)]=_0x4e7ff9['flashColor']||[0x0,0x0,0x0,0x0],_0x4e7ff9[_0x34701e(0x7dd)]=_0x4e7ff9[_0x34701e(0x7dd)]||0x0,this[_0x34701e(0xb02)]()[_0x34701e(0x9e8)](_0x1a511a,_0x4e7ff9);},Game_Battler[_0x16d1ef(0xa5b)]['setupIconTextPopup']=function(_0x1d1455,_0x2ece96,_0x2a9386){const _0x3a78b4=_0x16d1ef;if(!SceneManager[_0x3a78b4(0x37d)]())return;if(!this[_0x3a78b4(0xb02)]())return;if(_0x2ece96['length']<=0x0)return;_0x2a9386=_0x2a9386||{},_0x2a9386['textColor']=_0x2a9386['textColor']||_0x3a78b4(0xba4),_0x2a9386[_0x3a78b4(0x198)]=_0x2a9386[_0x3a78b4(0x198)]||[0x0,0x0,0x0,0x0],_0x2a9386[_0x3a78b4(0x7dd)]=_0x2a9386[_0x3a78b4(0x7dd)]||0x0,this[_0x3a78b4(0xb02)]()['setupIconTextPopup'](_0x1d1455,_0x2ece96,_0x2a9386);},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xa25)]=function(){const _0x5baf7d=_0x16d1ef;if(this[_0x5baf7d(0x403)]())return![];if(this[_0x5baf7d(0x341)]()&&this[_0x5baf7d(0x363)]())return!![];if(this[_0x5baf7d(0x8fc)]()&&this['hasSvBattler']()){if(_0x5baf7d(0xb5a)!==_0x5baf7d(0x486)){if(this['isDead']()&&this[_0x5baf7d(0x3b3)]())return![];}else _0x25e22c[_0x5baf7d(0x41e)]=[];}else{if(this[_0x5baf7d(0x8ae)]()){if(_0x5baf7d(0x310)===_0x5baf7d(0x310))return![];else this[_0x5baf7d(0x8ad)](_0x5baf7d(0x726),_0x434853,_0x15f607);}}return!![];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x33a)]=Game_Battler['prototype'][_0x16d1ef(0x613)],Game_Battler['prototype'][_0x16d1ef(0x613)]=function(){const _0x180ddc=_0x16d1ef;VisuMZ[_0x180ddc(0x8c3)]['Game_Battler_clearMotion'][_0x180ddc(0x2c7)](this),this['clearFreezeMotion']();},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x4fb)]=function(){return!![];},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x5f8)]=function(){return![];},VisuMZ['BattleCore']['Game_Battler_onBattleStart']=Game_Battler['prototype'][_0x16d1ef(0xb01)],Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xb01)]=function(_0x9ffcfe){const _0x45236e=_0x16d1ef;VisuMZ[_0x45236e(0x8c3)][_0x45236e(0xb51)][_0x45236e(0x2c7)](this,_0x9ffcfe),this['onBattleStartBattleCore'](_0x9ffcfe);},Game_Battler['prototype'][_0x16d1ef(0x7b1)]=function(_0x34a6c5){const _0x368fc5=_0x16d1ef;this[_0x368fc5(0x716)](![]),this[_0x368fc5(0x83a)]=undefined,this[_0x368fc5(0x58e)]=undefined;},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x956)]=Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x137)],Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x137)]=function(){const _0xc973ad=_0x16d1ef;VisuMZ[_0xc973ad(0x8c3)][_0xc973ad(0x956)][_0xc973ad(0x2c7)](this),this['onBattleEndBattleCore']();},Game_Battler['prototype']['onBattleEndBattleCore']=function(){const _0xe49350=_0x16d1ef;this['_forcedHomeX']=undefined,this[_0xe49350(0x58e)]=undefined;},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x236)]=Game_Battler['prototype'][_0x16d1ef(0x75a)],Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x75a)]=function(_0x50ce6d){const _0x499f49=_0x16d1ef;VisuMZ[_0x499f49(0x8c3)][_0x499f49(0x236)][_0x499f49(0x2c7)](this,_0x50ce6d);if(!_0x50ce6d[_0x499f49(0x18c)]()){const _0x54618e=this[_0x499f49(0xb02)]();_0x54618e&&_0x54618e[_0x499f49(0x937)]();}this[_0x499f49(0x716)](![]);},Game_Battler['prototype'][_0x16d1ef(0xac8)]=function(){const _0x33bc23=_0x16d1ef,_0x900df9=this[_0x33bc23(0x7c0)];this[_0x33bc23(0x7c0)]=![];if(BattleManager[_0x33bc23(0x94a)]()&&this[_0x33bc23(0x4c9)]()){const _0x603e91=this[_0x33bc23(0xb02)]();if(_0x603e91&&_0x900df9)_0x603e91['stepForward']();return;}const _0x541f88=this[_0x33bc23(0xb02)]();if(_0x541f88)_0x541f88[_0x33bc23(0x402)]();this[_0x33bc23(0x716)](![]),this[_0x33bc23(0x5ae)]();},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x491)]=function(_0x11f823){const _0x292e6b=_0x16d1ef;if(_0x11f823[_0x292e6b(0x3e8)]())this[_0x292e6b(0x406)]();else{if(_0x11f823['isGuard']())this[_0x292e6b(0x80f)](_0x292e6b(0xa31));else{if(_0x11f823[_0x292e6b(0x151)]())_0x292e6b(0x9d3)===_0x292e6b(0x9d3)?this[_0x292e6b(0x80f)](_0x292e6b(0x201)):(this[_0x292e6b(0x37a)]=this['x'],this[_0x292e6b(0xb72)]=this['y'],this[_0x292e6b(0x277)](),this[_0x292e6b(0x903)](),this['x']+=this[_0x292e6b(0x98e)](),this['y']+=this['extraPositionY'](),this['y']+=this['extraPositionScaledY'](),this['x']=_0x192eda['floor'](this['x']),this['y']=_0x58ef46[_0x292e6b(0x481)](this['y']));else{if(_0x11f823[_0x292e6b(0x382)]()){if(_0x292e6b(0x931)!==_0x292e6b(0x670)){if(_0x11f823[_0x292e6b(0x74a)]()['damage']['type']>0x0)this[_0x292e6b(0x406)]();else{if(_0x292e6b(0x82c)!=='FlChW')this[_0x292e6b(0x80f)](_0x292e6b(0x2b0));else{const _0x129448=_0x3bd7ea(_0x4298c9['$1'])['split'](/[\r\n]+/)[_0x292e6b(0x9ba)]('');_0xb6ccc6[_0x292e6b(0x8c4)]=_0x5d2cb0[_0x292e6b(0x4ca)](_0x129448);}}}else{const _0x5c9bd8=[_0x292e6b(0x560),'PostApplyAsUserJS',_0x292e6b(0x215),_0x292e6b(0x1f5),'PreApplyAsTargetJS',_0x292e6b(0x3d1),_0x292e6b(0x56b),'PostDamageAsTargetJS',_0x292e6b(0x9ca),_0x292e6b(0x847),_0x292e6b(0x287),_0x292e6b(0x9f9),_0x292e6b(0x6bb),_0x292e6b(0x295),'PreEndBattleJS',_0x292e6b(0x957),_0x292e6b(0x9b5),'BattleDefeatJS',_0x292e6b(0x885),'EscapeFailureJS',_0x292e6b(0xa50),_0x292e6b(0x8d9),_0x292e6b(0x2da),_0x292e6b(0x91e),'PreRegenerateJS',_0x292e6b(0x814)];for(const _0x410547 of _0x5c9bd8){_0x2dd9eb[_0x292e6b(0x8c3)][_0x292e6b(0x27e)](_0x5f2bad,_0x410547);}}}else{if(_0x11f823[_0x292e6b(0x653)]()){if('yPUAf'!==_0x292e6b(0x7f4))this[_0x292e6b(0x80f)](_0x292e6b(0x74a));else{if(_0x4b5f8f[_0x292e6b(0x37d)]()){const _0x272db6=this[_0x292e6b(0x3c8)]();this[_0x292e6b(0x2a0)](_0x272db6);}}}}}}}},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x85e)]=function(){const _0x3d6fc7=_0x16d1ef;return $dataSystem[_0x3d6fc7(0x3c9)][0x0];},Game_Battler['prototype'][_0x16d1ef(0x3c8)]=function(){const _0x2b1bad=_0x16d1ef,_0x2f7f29=this[_0x2b1bad(0x85e)]();return _0x2f7f29?_0x2f7f29['weaponImageId']:0x0;},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x54d)]=function(_0x5d89db){const _0x58cc06=_0x16d1ef;if(!$gameSystem[_0x58cc06(0xb9b)]())return;const _0x129cce=this['battler'](),_0x253963=_0x5d89db['battler']();if(!_0x129cce||!_0x253963)return;const _0x482da8=_0x253963[_0x58cc06(0x37a)],_0x25f5ee=_0x253963[_0x58cc06(0xb72)];this[_0x58cc06(0x1a4)](_0x482da8,_0x25f5ee,0x0,![],_0x58cc06(0x56c),-0x1),_0x129cce['updatePosition']();const _0x1bad44=VisuMZ['BattleCore'][_0x58cc06(0x58d)][_0x58cc06(0x7ec)];let _0x23a3ca=(_0x253963[_0x58cc06(0x7d5)]+_0x129cce[_0x58cc06(0x7d5)])/0x2;_0x23a3ca*=this[_0x58cc06(0x71d)]()?0x1:-0x1;let _0x22d2c2=_0x1bad44['StepDistanceY']*(this[_0x58cc06(0x71d)]()?0x1:-0x1);_0x5d89db[_0x58cc06(0x25a)](_0x23a3ca,_0x22d2c2,0x0,![],_0x58cc06(0x56c)),_0x253963[_0x58cc06(0x2a2)]();},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x80f)]=function(_0x1f6eda){const _0x1e84da=_0x16d1ef;if(SceneManager['isSceneBattle']()){if(_0x1e84da(0xa5a)!=='RuNPR'){const _0x42ef92=this[_0x1e84da(0xb02)]();_0x42ef92&&(_0x42ef92[_0x1e84da(0x795)](_0x1f6eda),['swing','thrust',_0x1e84da(0x484)][_0x1e84da(0x4f8)](_0x1f6eda)&&this[_0x1e84da(0x6e6)]());}else _0x520bb8[_0x1e84da(0x8c3)][_0x1e84da(0x813)][_0x1e84da(0x2c7)](this);}this[_0x1e84da(0x4e3)]();},Game_Battler['prototype'][_0x16d1ef(0x6e6)]=function(){},Game_Battler['prototype'][_0x16d1ef(0x2a0)]=function(_0x4db112){const _0x5dea67=_0x16d1ef;if(SceneManager[_0x5dea67(0x37d)]()){const _0x4c8e79=this[_0x5dea67(0xb02)]();if(_0x4c8e79)_0x4c8e79[_0x5dea67(0xb81)](_0x4db112);}},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xbb0)]=function(){const _0x4182c3=_0x16d1ef;if(SceneManager[_0x4182c3(0x37d)]()){const _0xcaa87e=this[_0x4182c3(0x3c8)]();this[_0x4182c3(0x2a0)](_0xcaa87e);}},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x36f)]=function(_0x1e9609,_0x22eeb4){const _0xde3f76=_0x16d1ef;if(!_0x1e9609)return;if(!_0x1e9609[_0xde3f76(0x74a)]())return;if(_0x1e9609[_0xde3f76(0x3e8)]())return;if(_0x1e9609[_0xde3f76(0x18c)]())return;if(_0x1e9609[_0xde3f76(0x653)]())return;let _0x410f08=0x0;const _0x4c6494=VisuMZ['BattleCore'][_0xde3f76(0x58d)]['ActionSequence'],_0x45f3e6=_0x1e9609[_0xde3f76(0x74a)]()[_0xde3f76(0x954)];if(_0x45f3e6[_0xde3f76(0xaf1)](/<CAST ANIMATION: (\d+)>/i))_0x410f08=Number(RegExp['$1']);else{if(_0x45f3e6['match'](/<NO CAST ANIMATION>/i))return;else{if(_0x1e9609['isCertainHit']())_0x410f08=_0x4c6494[_0xde3f76(0xbca)];else{if(_0x1e9609[_0xde3f76(0x5e4)]()){if('ygJEC'===_0xde3f76(0x21a))_0x410f08=_0x4c6494[_0xde3f76(0xb2d)];else return _0x515115[_0xde3f76(0x37d)]()?(_0x293d01['_scene']['_spriteset'][_0xde3f76(0x7e5)](_0x4fb323[0x0],_0xa9149[0x1]),!![]):_0x217fe7[_0xde3f76(0x8c3)][_0xde3f76(0x961)][_0xde3f76(0x2c7)](this,_0x4d833b);}else _0x1e9609[_0xde3f76(0x151)]()&&(_0xde3f76(0xafb)===_0xde3f76(0x1cb)?(this[_0xde3f76(0x1e5)]=_0x22c041,_0x5573d7[_0xde3f76(0x438)]['battleCoreResumeLaunchBattle']()):_0x410f08=_0x4c6494['CastMagical']);}}}_0x410f08>0x0&&$gameTemp[_0xde3f76(0x95e)]([this],_0x410f08,!!_0x22eeb4);},Game_Battler['prototype'][_0x16d1ef(0x485)]=function(){const _0xf94d21=_0x16d1ef;SoundManager[_0xf94d21(0xbbc)]();let _0x43393d=VisuMZ[_0xf94d21(0x8c3)][_0xf94d21(0x58d)]['ActionSequence']['ReflectAnimation'];_0x43393d>0x0&&(Imported[_0xf94d21(0x6ce)]?$gameTemp['requestFauxAnimation']([this],_0x43393d):$gameTemp[_0xf94d21(0x95e)]([this],_0x43393d));},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x4b9)]=Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x3e9)],Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x3e9)]=function(){const _0x10de37=_0x16d1ef;VisuMZ[_0x10de37(0x8c3)][_0x10de37(0x4b9)][_0x10de37(0x2c7)](this),this[_0x10de37(0x500)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x2b2)]=Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xbaa)],Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xbaa)]=function(){const _0xb654cd=_0x16d1ef;VisuMZ[_0xb654cd(0x8c3)]['Game_Battler_performMiss'][_0xb654cd(0x2c7)](this),this[_0xb654cd(0x500)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x1f1)]=Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x1db)],Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x1db)]=function(){const _0xc4e303=_0x16d1ef;VisuMZ[_0xc4e303(0x8c3)][_0xc4e303(0x1f1)]['call'](this),this['performFlinch']();},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x500)]=function(){const _0x5a2a43=_0x16d1ef;if(!$gameSystem[_0x5a2a43(0xb9b)]())return;if(this[_0x5a2a43(0x7c0)])return;this[_0x5a2a43(0x7c0)]=!![];const _0x3543a1=this[_0x5a2a43(0xb02)]();if(_0x3543a1)_0x3543a1[_0x5a2a43(0xb45)]();},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x5ae)]=function(){const _0x6de5cb=_0x16d1ef;if(this[_0x6de5cb(0x8ae)]()&&this[_0x6de5cb(0x226)]!==_0x6de5cb(0x306)){this[_0x6de5cb(0x80f)](_0x6de5cb(0x306));return;}if(this[_0x6de5cb(0x8ae)]()&&this[_0x6de5cb(0x226)]===_0x6de5cb(0x306))return;if(!!this['_freezeMotionData'])return;if(this[_0x6de5cb(0x8fc)]()){if(!this[_0x6de5cb(0xa94)]()&&this!==BattleManager['_subject']){if(this['battler']())this[_0x6de5cb(0xb02)]()[_0x6de5cb(0x153)]();}this[_0x6de5cb(0x4e3)]();return;}if(this[_0x6de5cb(0x226)]===_0x6de5cb(0xa56))return;if(this[_0x6de5cb(0x226)]==='escape'&&!BattleManager[_0x6de5cb(0x4c9)]())return;if(this[_0x6de5cb(0x226)]===_0x6de5cb(0xa31)&&!BattleManager[_0x6de5cb(0x4c9)]())return;this[_0x6de5cb(0x613)]();if(this['battler']()&&BattleManager['isInputting']()){if(_0x6de5cb(0x35f)===_0x6de5cb(0x379))this[_0x6de5cb(0xb1f)]();else{this[_0x6de5cb(0xb02)]()[_0x6de5cb(0x153)](),this[_0x6de5cb(0x4e3)]();return;}}},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0xa94)]=function(){const _0x185859=_0x16d1ef;if(!this[_0x185859(0x649)]())return![];const _0x2a8f45=this[_0x185859(0xb02)]();if(!_0x2a8f45)return![];const _0x56981f=_0x2a8f45[_0x185859(0x955)];if(!_0x56981f)return![];const _0x4be91d=_0x56981f[_0x185859(0xa6f)];return _0x4be91d&&!_0x4be91d[_0x185859(0x385)];},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x4ea)]=function(){const _0x3f6f28=_0x16d1ef;return this[_0x3f6f28(0x5ac)];},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x716)]=function(_0x33f8dd){const _0xbf3a65=_0x16d1ef;if(!$gameSystem[_0xbf3a65(0xb9b)]())return;this['_isBattlerFlipped']=_0x33f8dd;const _0x52415e=this[_0xbf3a65(0xb02)]();if(_0x52415e)_0x52415e[_0xbf3a65(0xa59)]();},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x453)]=function(_0x3e51ea,_0x4df917,_0x5cb779){const _0x3c4fe5=_0x16d1ef;if(!$gameSystem[_0x3c4fe5(0xb9b)]())return;const _0x24f244=this[_0x3c4fe5(0xb02)]();if(!_0x24f244)return;if(_0x3e51ea===_0x24f244['_baseX'])return;let _0x58e222=![];if(this[_0x3c4fe5(0x71d)]()){if(_0x3e51ea>_0x24f244[_0x3c4fe5(0x37a)])_0x58e222=!![];if(_0x3e51ea<_0x24f244['_baseX'])_0x58e222=![];}else{if(this[_0x3c4fe5(0x8fc)]()){if(_0x3c4fe5(0xb23)!==_0x3c4fe5(0xb23))this['_battlerName']=_0x43e888,this['_mainSprite'][_0x3c4fe5(0xb74)]=_0x2a73c4[_0x3c4fe5(0x55b)](_0x3ffe82);else{if(_0x3e51ea>_0x24f244[_0x3c4fe5(0x37a)])_0x58e222=![];if(_0x3e51ea<_0x24f244[_0x3c4fe5(0x37a)])_0x58e222=!![];}}};this[_0x3c4fe5(0x716)](_0x5cb779?!_0x58e222:_0x58e222),_0x24f244[_0x3c4fe5(0xa59)]();},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x25a)]=function(_0x37a989,_0x2d6bc9,_0x1d9e64,_0x23acbb,_0x571848){const _0x4cfe8b=_0x16d1ef;if(!$gameSystem[_0x4cfe8b(0xb9b)]())return;const _0x2e69c5=this[_0x4cfe8b(0xb02)]();if(!_0x2e69c5)return;if(_0x23acbb)this['setBattlerFacePoint'](_0x37a989+_0x2e69c5[_0x4cfe8b(0x37a)],_0x2d6bc9+_0x2e69c5[_0x4cfe8b(0xb72)],![]);_0x37a989+=_0x2e69c5['_baseX']-_0x2e69c5['_homeX'],_0x2d6bc9+=_0x2e69c5[_0x4cfe8b(0xb72)]-_0x2e69c5['_homeY'],_0x2e69c5[_0x4cfe8b(0x19f)](_0x37a989,_0x2d6bc9,_0x1d9e64);if(Imported[_0x4cfe8b(0x6ce)])_0x2e69c5[_0x4cfe8b(0x576)](_0x571848||_0x4cfe8b(0x56c));},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x1a4)]=function(_0xf05e72,_0x4ae733,_0x59ba72,_0x18cca2,_0x4fbd63,_0x1278ee){const _0x3abc35=_0x16d1ef;if(!$gameSystem[_0x3abc35(0xb9b)]())return;const _0x24e4b1=this[_0x3abc35(0xb02)]();if(!_0x24e4b1)return;_0x1278ee=_0x1278ee||0x0;if(_0x1278ee>0x0){if('pDXTB'===_0x3abc35(0xb61)){if(_0x4d2e21[_0x3abc35(0x37d)]()){const _0x29d135=this['battler']();if(_0x29d135)_0x29d135[_0x3abc35(0xb81)](_0x2b2c58);}}else{if(_0x24e4b1[_0x3abc35(0x37a)]>_0xf05e72)_0xf05e72+=_0x24e4b1[_0x3abc35(0x7d5)]/0x2+_0x1278ee;if(_0x24e4b1[_0x3abc35(0x37a)]<_0xf05e72)_0xf05e72-=_0x24e4b1['width']/0x2+_0x1278ee;}}if(_0x18cca2)this[_0x3abc35(0x453)](_0xf05e72,_0x4ae733,![]);_0xf05e72-=_0x24e4b1['_homeX'],_0x4ae733-=_0x24e4b1[_0x3abc35(0x9ea)],_0x24e4b1[_0x3abc35(0x19f)](_0xf05e72,_0x4ae733,_0x59ba72);if(Imported[_0x3abc35(0x6ce)])_0x24e4b1[_0x3abc35(0x576)](_0x4fbd63||_0x3abc35(0x56c));},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x5d8)]=function(_0x2d4bc7,_0xfc697a,_0x453d36,_0x2e3ef2,_0x863c1c){const _0x3df644=_0x16d1ef;if(!$gameSystem[_0x3df644(0xb9b)]())return;const _0x21e63e=this[_0x3df644(0xb02)]();if(!_0x21e63e)return;if(_0x2e3ef2)this['setBattlerFacePoint'](_0x2d4bc7+_0x21e63e[_0x3df644(0x37a)],_0xfc697a+_0x21e63e[_0x3df644(0xb72)],![]);_0x2d4bc7+=_0x21e63e[_0x3df644(0x953)],_0xfc697a+=_0x21e63e['_homeY'],_0x21e63e['startHomeMove'](_0x2d4bc7,_0xfc697a,_0x453d36,_0x863c1c),this[_0x3df644(0x83a)]=_0x2d4bc7,this[_0x3df644(0x58e)]=_0xfc697a;},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xa51)]=function(_0x44b83c,_0x173ae0,_0xe1b11e,_0x44ee46,_0x590a0f,_0x4fc220){const _0x57d20a=_0x16d1ef;if(!$gameSystem[_0x57d20a(0xb9b)]())return;const _0x314bd2=this[_0x57d20a(0xb02)]();if(!_0x314bd2)return;_0x4fc220=_0x4fc220||0x0;if(_0x4fc220>0x0){if(_0x57d20a(0x641)===_0x57d20a(0x641)){if(_0x314bd2[_0x57d20a(0x37a)]>_0x44b83c)_0x44b83c+=_0x314bd2['width']/0x2+_0x4fc220;if(_0x314bd2['_baseX']<_0x44b83c)_0x44b83c-=_0x314bd2['width']/0x2+_0x4fc220;}else _0x280da8[_0x57d20a(0x8c3)][_0x57d20a(0x640)][_0x57d20a(0x2c7)](this),this[_0x57d20a(0xadf)](),this[_0x57d20a(0x9bd)]();}if(_0x44ee46)this[_0x57d20a(0x453)](_0x44b83c,_0x173ae0,![]);_0x314bd2['startHomeMove'](_0x44b83c,_0x173ae0,_0xe1b11e,_0x590a0f),this[_0x57d20a(0x83a)]=_0x44b83c,this['_forcedHomeY']=_0x173ae0;},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x92f)]=function(_0x16cdf7,_0xe6821f,_0x5b6cb6){const _0x58506a=_0x16d1ef;if(!$gameSystem[_0x58506a(0xb9b)]())return;const _0x55b38c=this[_0x58506a(0xb02)]();if(!_0x55b38c)return;_0x55b38c[_0x58506a(0x378)](_0x16cdf7,_0xe6821f,_0x5b6cb6);},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xa95)]=function(_0x2e7e92,_0x44812b){const _0x5620fc=_0x16d1ef;if(!$gameSystem['isSideView']())return;const _0x18d8dc=this[_0x5620fc(0xb02)]();if(!_0x18d8dc)return;_0x18d8dc['startJump'](_0x2e7e92,_0x44812b);},Game_Battler[_0x16d1ef(0xa5b)]['spinBattler']=function(_0x46b93e,_0x372571,_0x5e75fe,_0x3277e5){const _0x2122ff=_0x16d1ef;if(!$gameSystem['isSideView']())return;const _0x488f27=this[_0x2122ff(0xb02)]();if(!_0x488f27)return;_0x488f27[_0x2122ff(0x796)](_0x46b93e,_0x372571,_0x5e75fe,_0x3277e5);},Game_Battler[_0x16d1ef(0xa5b)]['skewBattler']=function(_0x175a4d,_0x428725,_0x463a0f,_0x2fb460){const _0xc98445=_0x16d1ef;if(!$gameSystem[_0xc98445(0xb9b)]())return;const _0x204f4a=this['battler']();if(!_0x204f4a)return;this['isActor']()&&(_0x175a4d*=-0x1,_0x428725*=-0x1),_0x204f4a['startSkew'](_0x175a4d,_0x428725,_0x463a0f,_0x2fb460);},Game_Battler['prototype'][_0x16d1ef(0x56e)]=function(_0x36170c,_0xf08f47,_0x5ec7a1,_0x2ee062){const _0x1e221f=_0x16d1ef;if(!$gameSystem[_0x1e221f(0xb9b)]())return;const _0x152b6a=this[_0x1e221f(0xb02)]();if(!_0x152b6a)return;_0x152b6a[_0x1e221f(0x64d)](_0x36170c,_0xf08f47,_0x5ec7a1,_0x2ee062);},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x2f6)]=function(_0x3e95bb,_0x256790,_0x41ce3c){const _0x5dc6bb=_0x16d1ef;if(!$gameSystem[_0x5dc6bb(0xb9b)]())return;const _0x43b7fe=this[_0x5dc6bb(0xb02)]();if(!_0x43b7fe)return;_0x43b7fe[_0x5dc6bb(0x594)](_0x3e95bb,_0x256790,_0x41ce3c);},Game_Battler['prototype'][_0x16d1ef(0x4e3)]=function(){const _0x46a468=_0x16d1ef,_0x2c4991=!!this['_freezeMotionData'];this['_freezeMotionData']=undefined,_0x2c4991&&(this[_0x46a468(0x5ae)](),this[_0x46a468(0x933)]());},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x933)]=function(){const _0x13530d=_0x16d1ef;if(!SceneManager[_0x13530d(0x37d)]())return;const _0x3a6fa1=this[_0x13530d(0xb02)]();if(!_0x3a6fa1)return;let _0x11518a=this[_0x13530d(0x71d)]()?_0x3a6fa1['_weaponSprite']:_0x3a6fa1[_0x13530d(0x955)]['_weaponSprite'];_0x11518a&&_0x11518a['setup'](0x0);},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x8ea)]=function(_0x1e5204,_0x3d7322,_0x3fc3e1){const _0x571f3d=_0x16d1ef;if(this['isEnemy']()&&!this[_0x571f3d(0x649)]())return;let _0x37cd57=0x0,_0x577adc=0x0;_0x1e5204[_0x571f3d(0xaf1)](/ATTACK[ ](\d+)/i)&&(_0x577adc=Number(RegExp['$1']),_0x577adc--);if(this[_0x571f3d(0x71d)]()){const _0x481319=this[_0x571f3d(0x239)]();_0x37cd57=_0x481319[_0x577adc]?_0x481319[_0x577adc][_0x571f3d(0x76a)]:0x0;}else this['isEnemy']()&&('yZeWH'!==_0x571f3d(0x8c2)?_0x37cd57=this[_0x571f3d(0x601)]()[_0x571f3d(0x76a)]||0x0:this[_0x571f3d(0x619)](_0x24bf0c,_0x510112,_0x448694));const _0x26aec2=$dataSystem[_0x571f3d(0x3c9)][_0x37cd57];_0x1e5204['match'](/attack/i)&&(_0x1e5204=[_0x571f3d(0x9f5),_0x571f3d(0x377),_0x571f3d(0x484)][_0x26aec2[_0x571f3d(0x427)]]||_0x571f3d(0x377)),this[_0x571f3d(0x936)]={'motionType':_0x1e5204,'weaponImageId':_0x3d7322?_0x26aec2[_0x571f3d(0xacc)]:0x0,'pattern':_0x3fc3e1};},Game_Battler['prototype'][_0x16d1ef(0xabe)]=function(_0x39d0bc){const _0x3bd208=_0x16d1ef;if(!_0x39d0bc)return![];return _0x39d0bc[_0x3bd208(0xadb)]()===this[_0x3bd208(0xadb)]();},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xb98)]=function(_0x270665){const _0x2e8101=_0x16d1ef;if(!_0x270665)return![];return _0x270665[_0x2e8101(0x8f4)]()===this[_0x2e8101(0xadb)]();},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xb42)]=function(){return![];},Game_Actor[_0x16d1ef(0xa5b)]['hasStaticSvBattler']=function(){const _0x36b38c=_0x16d1ef;return this[_0x36b38c(0x730)]()[_0x36b38c(0xaf1)](/\$/i);},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0xb42)]=function(){const _0x1fb5fd=_0x16d1ef;return this[_0x1fb5fd(0x649)]()&&this[_0x1fb5fd(0x92b)]()[_0x1fb5fd(0xaf1)](/\$/i);},VisuMZ[_0x16d1ef(0x8c3)]['Game_Actor_setup']=Game_Actor[_0x16d1ef(0xa5b)]['setup'],Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x706)]=function(_0x39387c){const _0xddf443=_0x16d1ef;VisuMZ[_0xddf443(0x8c3)]['Game_Actor_setup'][_0xddf443(0x2c7)](this,_0x39387c),this[_0xddf443(0x8ac)]();},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x8ac)]=function(){const _0x4debdb=_0x16d1ef;this['_battlePortrait']='',this[_0x4debdb(0x509)]()&&this[_0x4debdb(0x509)]()[_0x4debdb(0x954)][_0x4debdb(0xaf1)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x4debdb(0xa3e)]=String(RegExp['$1']));},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x548)]=function(){const _0x1679c5=_0x16d1ef;if(this[_0x1679c5(0x685)]()!==''){if(_0x1679c5(0x62d)!==_0x1679c5(0x62d)){const _0x2ca8be=_0x52b4cc['indexOf'](_0x2e2c1c);return _0x2ca8be>=0x0?[_0xee9268[_0x2ca8be+0x1]||_0x31dddf]:[_0x49347f];}else return this[_0x1679c5(0x685)]();}else{if(Imported[_0x1679c5(0x5d7)]&&this[_0x1679c5(0x5b0)]()!==''){if(_0x1679c5(0x7fa)===_0x1679c5(0x7fa))return this['getMenuImage']();else _0xd7f615['BattleCore'][_0x1679c5(0x5b1)]['call'](this),this[_0x1679c5(0x69c)]();}}return'';},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x685)]=function(){const _0x46c666=_0x16d1ef;if(this[_0x46c666(0xa3e)]===undefined)this[_0x46c666(0x8ac)]();return this[_0x46c666(0xa3e)];},Game_Actor[_0x16d1ef(0xa5b)]['setBattlePortrait']=function(_0x4d7fb8){const _0x496cd6=_0x16d1ef;if(this[_0x496cd6(0xa3e)]===undefined)this[_0x496cd6(0x8ac)]();this[_0x496cd6(0xa3e)]=_0x4d7fb8;if(SceneManager[_0x496cd6(0x37d)]()&&$gameParty[_0x496cd6(0x2a7)]()[_0x496cd6(0x4f8)](this)){const _0x2270dc=SceneManager[_0x496cd6(0x438)][_0x496cd6(0x2f5)];if(_0x2270dc)_0x2270dc[_0x496cd6(0x3ba)](this);}},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x7cb)]=function(){return!![];},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x5f6)]=function(){const _0xbaada6=_0x16d1ef;if(!this[_0xbaada6(0x46d)]()&&BattleManager[_0xbaada6(0xa16)])return!![];return Game_Battler[_0xbaada6(0xa5b)]['isAutoBattle']['call'](this);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x369)]=Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0xab8)],Game_Actor['prototype'][_0x16d1ef(0xab8)]=function(){const _0x39329e=_0x16d1ef;if(BattleManager[_0x39329e(0xa16)]&&!ConfigManager['autoBattleUseSkills'])return this['makeActionListAutoAttack']();else{return VisuMZ[_0x39329e(0x8c3)][_0x39329e(0x369)][_0x39329e(0x2c7)](this);;}},Game_Actor['prototype'][_0x16d1ef(0x4a7)]=function(){const _0x4e9837=_0x16d1ef,_0x2fbaee=[],_0x47d82d=new Game_Action(this);return _0x47d82d[_0x4e9837(0x2d2)](),_0x2fbaee[_0x4e9837(0x8ad)](_0x47d82d),_0x2fbaee;},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x647)]=function(){const _0x182409=_0x16d1ef;return this[_0x182409(0x36e)]()[_0x182409(0x954)][_0x182409(0xaf1)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x182409(0x31e)](/[\r\n]+/):VisuMZ[_0x182409(0x8c3)][_0x182409(0x58d)][_0x182409(0x6c1)]['BattleCmdList'];},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x47d)]=function(){const _0x67ad62=_0x16d1ef;if(this[_0x67ad62(0x965)][_0x67ad62(0x388)]!==undefined)return this[_0x67ad62(0x965)][_0x67ad62(0x388)];return this[_0x67ad62(0x509)]()[_0x67ad62(0x954)][_0x67ad62(0xaf1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x67ad62(0x965)][_0x67ad62(0x388)]=eval(RegExp['$1']),this['_cache'][_0x67ad62(0x822)]=eval(RegExp['$2'])):'oUOln'!==_0x67ad62(0x5b4)?this[_0x67ad62(0x1af)]():this[_0x67ad62(0x965)][_0x67ad62(0x388)]=Game_Battler['prototype'][_0x67ad62(0x47d)][_0x67ad62(0x2c7)](this),this[_0x67ad62(0x965)][_0x67ad62(0x388)];},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x75c)]=function(){const _0x4f7b29=_0x16d1ef;if(this[_0x4f7b29(0x965)]['svAnchorY']!==undefined)return this[_0x4f7b29(0x965)][_0x4f7b29(0x822)];return this['actor']()[_0x4f7b29(0x954)][_0x4f7b29(0xaf1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x4f7b29(0x965)][_0x4f7b29(0x388)]=eval(RegExp['$1']),this[_0x4f7b29(0x965)][_0x4f7b29(0x822)]=eval(RegExp['$2'])):_0x4f7b29(0x45e)===_0x4f7b29(0x75b)?_0x28ac0e[_0x4f7b29(0x713)]():this[_0x4f7b29(0x965)][_0x4f7b29(0x822)]=Game_Battler[_0x4f7b29(0xa5b)][_0x4f7b29(0x75c)]['call'](this),this[_0x4f7b29(0x965)][_0x4f7b29(0x822)];},Game_Actor['prototype'][_0x16d1ef(0xa34)]=function(){const _0x1afcef=_0x16d1ef;if(this[_0x1afcef(0x965)][_0x1afcef(0xad0)]!==undefined)return this[_0x1afcef(0x965)][_0x1afcef(0xad0)];if(this[_0x1afcef(0x509)]()[_0x1afcef(0x954)][_0x1afcef(0xaf1)](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x1afcef(0xad0)]=!![];else{if(this['actor']()[_0x1afcef(0x954)][_0x1afcef(0xaf1)](/<SIDEVIEW HIDE SHADOW>/i))this[_0x1afcef(0x965)][_0x1afcef(0xad0)]=![];else{if(_0x1afcef(0x5e0)==='njiBq')this[_0x1afcef(0x965)][_0x1afcef(0xad0)]=Game_Battler[_0x1afcef(0xa5b)][_0x1afcef(0xa34)][_0x1afcef(0x2c7)](this);else return!![];}}return this[_0x1afcef(0x965)][_0x1afcef(0xad0)];},Game_Actor[_0x16d1ef(0xa5b)]['battlerSmoothImage']=function(){const _0x524fe9=_0x16d1ef;return VisuMZ[_0x524fe9(0x8c3)][_0x524fe9(0x58d)][_0x524fe9(0x65f)][_0x524fe9(0x374)];},Game_Actor['prototype'][_0x16d1ef(0x6e6)]=function(){const _0x23ee0a=_0x16d1ef,_0x551c79=this[_0x23ee0a(0x239)](),_0x595fb9=_0x551c79[0x0]?_0x551c79[0x0][_0x23ee0a(0x76a)]:0x0,_0x4133aa=$dataSystem[_0x23ee0a(0x3c9)][_0x595fb9];if(_0x4133aa){if(_0x23ee0a(0x718)==='fNdAC')return this[_0x23ee0a(0x335)]()?0x0:0xa;else this[_0x23ee0a(0x2a0)](_0x4133aa[_0x23ee0a(0xacc)]);}},Game_Actor[_0x16d1ef(0xa5b)]['performAction']=function(_0x2bd11f){const _0x558798=_0x16d1ef;Game_Battler[_0x558798(0xa5b)]['performAction']['call'](this,_0x2bd11f),this[_0x558798(0x491)](_0x2bd11f);},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x85e)]=function(){const _0x50eb21=_0x16d1ef,_0x2c1d3e=this[_0x50eb21(0x239)](),_0x66795a=_0x2c1d3e[0x0]?_0x2c1d3e[0x0][_0x50eb21(0x76a)]:0x0;return $dataSystem['attackMotions'][_0x66795a];},Game_Actor['prototype']['attackAnimationIdSlot']=function(_0x327444){const _0x32049c=_0x16d1ef;_0x327444=_0x327444||0x1,_0x327444--;const _0x4f6fe1=this['weapons']();return _0x4f6fe1[_0x327444]?_0x4f6fe1[_0x327444][_0x32049c(0x995)]:0x0;},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0xb9e)]=function(_0x3b775b){const _0xbe7e0d=_0x16d1ef;_0x3b775b=_0x3b775b||0x1,_0x3b775b--;const _0x2b0b20=this[_0xbe7e0d(0x239)](),_0x95e2d4=_0x2b0b20[_0x3b775b]?_0x2b0b20[_0x3b775b][_0xbe7e0d(0x76a)]:0x0;return $dataSystem[_0xbe7e0d(0x3c9)][_0x95e2d4];},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x3ca)]=function(_0x5777b2){const _0x2ea1bc=_0x16d1ef;_0x5777b2=_0x5777b2||0x1,_0x5777b2--;const _0x4aeee=this[_0x2ea1bc(0x239)](),_0x4f48b0=_0x4aeee[_0x5777b2]?_0x4aeee[_0x5777b2]['wtypeId']:0x0,_0x212c15=$dataSystem[_0x2ea1bc(0x3c9)][_0x4f48b0];if(_0x212c15){if(_0x212c15['type']===0x0){if(_0x2ea1bc(0xa85)===_0x2ea1bc(0x942)){const _0x558adb=_0x913d26[_0x2ea1bc(0x504)](_0x282fb6);_0x558adb[_0x2ea1bc(0x4d3)]=![],_0x558adb[_0x2ea1bc(0x62e)]=![],_0x558adb[_0x2ea1bc(0x754)]=0x0,this[_0x2ea1bc(0x2ac)][_0x2ea1bc(0x8ad)](_0x558adb);}else this[_0x2ea1bc(0x80f)]('thrust');}else{if(_0x212c15[_0x2ea1bc(0x427)]===0x1){if('PUHIR'!==_0x2ea1bc(0xa93))this[_0x2ea1bc(0x80f)](_0x2ea1bc(0x377));else{_0x5a6ea2=_0x6ce8b8||0x1,_0x524d73--;const _0x4010bb=this[_0x2ea1bc(0x239)](),_0x196ab3=_0x4010bb[_0x434d60]?_0x4010bb[_0x4aa071]['wtypeId']:0x0;return _0x5392e8['attackMotions'][_0x196ab3];}}else _0x212c15[_0x2ea1bc(0x427)]===0x2&&this[_0x2ea1bc(0x80f)](_0x2ea1bc(0x484));}this[_0x2ea1bc(0x2a0)](_0x212c15['weaponImageId']);}},Game_Battler['prototype']['setActiveWeaponSlot']=function(_0x4cdc4f){const _0x4a9ba2=_0x16d1ef;this[_0x4a9ba2(0x442)]=_0x4cdc4f||0x0,this['_cache']={};},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x1a2)]=function(){const _0x2067ef=_0x16d1ef;this['_activeWeaponSlot']=this['_activeWeaponSlot']||0x0,this['_activeWeaponSlot']++,this[_0x2067ef(0x965)]={};},Game_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x4f5)]=function(){const _0x18a1cc=_0x16d1ef;this[_0x18a1cc(0x442)]=undefined,this[_0x18a1cc(0x965)]={};},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x5a9)]=Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x8d5)],Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x8d5)]=function(){const _0x20885f=_0x16d1ef;let _0x3b02ac=VisuMZ[_0x20885f(0x8c3)][_0x20885f(0x5a9)][_0x20885f(0x2c7)](this);if(this[_0x20885f(0xb87)])return _0x3b02ac;if(this[_0x20885f(0x442)]!==undefined){if(_0x20885f(0x782)===_0x20885f(0x782)){this['_tempEquipCheck']=!![];const _0x3e9822=this[_0x20885f(0x9c8)]();for(let _0x39869c=0x0;_0x39869c<_0x3e9822[_0x20885f(0xa40)];_0x39869c++){_0x3e9822[_0x39869c]===0x1&&this[_0x20885f(0x442)]!==_0x39869c&&(_0x20885f(0x4c6)===_0x20885f(0x4c6)?_0x3b02ac[_0x39869c]=null:this[_0x20885f(0x2ca)][this[_0x20885f(0x7e0)]]=_0x461d40);}this['_tempEquipCheck']=undefined;}else{if(!_0x1359a5['isSceneBattle']())return;const _0x1b3963=_0x50522d['getLastPluginCommandInterpreter']();if(!_0x1b3963)return;_0x1b3963[_0x20885f(0x13b)](_0x20885f(0xa98));}}return _0x3b02ac;},Window_BattleLog['prototype']['getDualWieldTimes']=function(_0x40f1e6){const _0x2ae815=_0x16d1ef;if(_0x40f1e6[_0x2ae815(0x71d)]()){if(_0x2ae815(0xa7b)===_0x2ae815(0xa7b))return _0x40f1e6[_0x2ae815(0x239)]()[_0x2ae815(0xa40)]||0x1;else{const _0x2d8ee4=this['_enemy'][_0x2ae815(0x601)]();this[_0x2ae815(0xb74)]=new _0x123b96(_0x2d8ee4[_0x2ae815(0x7d5)],_0x2d8ee4['height']),this[_0x2ae815(0x959)][_0x2ae815(0xb74)]=new _0x4a695a(0x1,0x1);}}else return 0x1;},Window_BattleLog[_0x16d1ef(0xa5b)]['setActiveWeaponSet']=function(_0x203141,_0x1b510b){const _0x1950b6=_0x16d1ef;_0x203141&&_0x203141[_0x1950b6(0x71d)]()&&_0x203141[_0x1950b6(0x599)](_0x1b510b),this[_0x1950b6(0xaf2)]();},Window_BattleLog['prototype'][_0x16d1ef(0x61d)]=function(_0x332386){const _0x134a59=_0x16d1ef;_0x332386&&_0x332386[_0x134a59(0x71d)]()&&('rIFdE'!==_0x134a59(0x2d7)?_0x332386['clearActiveWeaponSlot']():_0x36d61e[_0x134a59(0x8c3)][_0x134a59(0xb44)][_0x134a59(0x2c7)](this,_0x517743)),this[_0x134a59(0xaf2)]();},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x337)]=function(){const _0x5d4801=_0x16d1ef;let _0x33a9ba=_0x5d4801(0x337);if(this[_0x5d4801(0x66c)](_0x33a9ba))return this[_0x5d4801(0x965)][_0x33a9ba];return this[_0x5d4801(0x965)][_0x33a9ba]=this[_0x5d4801(0x1b5)](this['actor']()),this[_0x5d4801(0x965)][_0x33a9ba];},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0xa28)]=function(){const _0x10ae32=_0x16d1ef;let _0x230c10=_0x10ae32(0xa28);if(this[_0x10ae32(0x66c)](_0x230c10))return this['_cache'][_0x230c10];return this['_cache'][_0x230c10]=this[_0x10ae32(0x50b)](this[_0x10ae32(0x509)]()),this[_0x10ae32(0x965)][_0x230c10];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x9e5)]=Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x706)],Game_Enemy['prototype'][_0x16d1ef(0x706)]=function(_0x3f3774,_0x2fb458,_0x5143c6){const _0x2f9f6e=_0x16d1ef;_0x3f3774=DataManager[_0x2f9f6e(0x991)](_0x3f3774),VisuMZ[_0x2f9f6e(0x8c3)][_0x2f9f6e(0x9e5)]['call'](this,_0x3f3774,_0x2fb458,_0x5143c6);if(Imported['VisuMZ_1_ElementStatusCore']){if(_0x2f9f6e(0x697)!==_0x2f9f6e(0x697))for(const _0x2046cc of _0x227b7f){for(const _0x3ebf21 of _0x121fd8){const _0x324686=_0x2da1e4[0x0]['format'](_0x3ebf21[0x0],_0x2046cc[0x0]),_0x2236e4=_0x34ae07[0x1][_0x2f9f6e(0x86a)](_0x3ebf21[0x1],_0x2046cc[0x1])[_0x2f9f6e(0x699)](),_0x220d68=new _0x125ba7(_0x2bcbde[_0x2f9f6e(0x86a)](_0x2236e4),'i');_0x533c08[_0x324686]=_0x220d68;}}else this[_0x2f9f6e(0x709)]();}this[_0x2f9f6e(0x58f)](),this[_0x2f9f6e(0x9e9)]();if(Imported[_0x2f9f6e(0x694)]){if(_0x2f9f6e(0x78d)===_0x2f9f6e(0x78d))this[_0x2f9f6e(0x367)]();else{if(_0x2c5b04[_0x2f9f6e(0x138)]())return;if(!_0x8fc873)return;if(!_0x2617bf['canMove']())return;_0x53b499[_0x2f9f6e(0x8c3)][_0x2f9f6e(0x2ed)][_0x2f9f6e(0x2c7)](this);}}},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x58f)]=function(){const _0x3d11bd=_0x16d1ef,_0x1848db=VisuMZ[_0x3d11bd(0x8c3)][_0x3d11bd(0x58d)][_0x3d11bd(0xb6b)];this[_0x3d11bd(0x2c1)]=_0x1848db[_0x3d11bd(0xa7e)],this[_0x3d11bd(0x9cd)]={};},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x9e9)]=function(){const _0x1cdc6e=_0x16d1ef,_0xa344a3=VisuMZ[_0x1cdc6e(0x8c3)]['Settings']['Enemy'],_0x4b6d20=this[_0x1cdc6e(0x336)]()[_0x1cdc6e(0x954)];this[_0x1cdc6e(0x9cd)]={'name':'','wtypeId':_0xa344a3[_0x1cdc6e(0x459)],'collapse':_0xa344a3[_0x1cdc6e(0xafd)],'motionIdle':_0xa344a3[_0x1cdc6e(0x4d2)],'width':_0xa344a3[_0x1cdc6e(0x18e)]||0x40,'height':_0xa344a3[_0x1cdc6e(0x30a)]||0x40,'anchorX':_0xa344a3[_0x1cdc6e(0x608)]||0x0,'anchorY':_0xa344a3['AnchorY']||0x0,'shadow':_0xa344a3[_0x1cdc6e(0xa1e)]};_0x4b6d20[_0x1cdc6e(0xaf1)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(_0x1cdc6e(0x17f)===_0x1cdc6e(0x17f)?this['_attackAnimationId']=Number(RegExp['$1']):_0x30a3f4[_0x1cdc6e(0x7f2)](_0x2d718d));const _0x369cd3=this[_0x1cdc6e(0x9cd)];if(_0x4b6d20[_0x1cdc6e(0xaf1)](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x1cdc6e(0x77b)===_0x1cdc6e(0x986)){const _0x3a0016=_0x43691b['_scene']['_statusWindow'];if(_0x3a0016)_0x3a0016[_0x1cdc6e(0x3ba)](this);}else _0x369cd3[_0x1cdc6e(0x8c4)]=String(RegExp['$1']);}else{if(_0x4b6d20[_0x1cdc6e(0xaf1)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if(_0x1cdc6e(0x7c2)!=='ojMri'){const _0x5477b9=_0x49806e['BattleCore']['Settings']['BattleLog'],_0x36bc3f=_0x148f3e[_0x1cdc6e(0x8cd)]();if(_0x5477b9[_0x1cdc6e(0x93e)])this['displayBuffs'](_0x4df56a,_0x36bc3f[_0x1cdc6e(0xaf9)],_0x18a58c[_0x1cdc6e(0x60b)]);if(_0x5477b9[_0x1cdc6e(0x8b9)])this[_0x1cdc6e(0x6fd)](_0x200a40,_0x36bc3f[_0x1cdc6e(0x414)],_0x2e020f['debuffAdd']);if(_0x5477b9[_0x1cdc6e(0x2c8)])this[_0x1cdc6e(0x6fd)](_0x88150,_0x36bc3f[_0x1cdc6e(0x8a6)],_0x972837['buffRemove']);}else{const _0x39d26e=String(RegExp['$1'])[_0x1cdc6e(0x31e)](/[\r\n]+/)[_0x1cdc6e(0x9ba)]('');_0x369cd3[_0x1cdc6e(0x8c4)]=DataManager[_0x1cdc6e(0x4ca)](_0x39d26e);}}}_0x4b6d20[_0x1cdc6e(0xaf1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x1cdc6e(0x323)===_0x1cdc6e(0x323)?(_0x369cd3['anchorX']=eval(RegExp['$1']),_0x369cd3[_0x1cdc6e(0x190)]=eval(RegExp['$2'])):_0x246de7['_currentActor'][_0x1cdc6e(0x345)]('inputting'));if(_0x4b6d20['match'](/<SIDEVIEW COLLAPSE>/i))'qjFze'!=='qjFze'?this[_0x1cdc6e(0x950)]=_0x1cdc6e(0xa35):_0x369cd3[_0x1cdc6e(0x629)]=!![];else{if(_0x4b6d20[_0x1cdc6e(0xaf1)](/<SIDEVIEW NO COLLAPSE>/i)){if(_0x1cdc6e(0x46f)==='SndSZ'){if(!_0x4cd7ad['isSceneBattle']())return;const _0x2fa770=_0x5459cf[_0x1cdc6e(0x438)][_0x1cdc6e(0x2f5)];if(_0x2fa770)_0x2fa770[_0x1cdc6e(0x3ce)]();}else _0x369cd3[_0x1cdc6e(0x629)]=![];}}if(_0x4b6d20[_0x1cdc6e(0xaf1)](/<SIDEVIEW SHOW SHADOW>/i))_0x369cd3[_0x1cdc6e(0x15f)]=!![];else _0x4b6d20[_0x1cdc6e(0xaf1)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x1cdc6e(0x8de)==='NLBxe'?_0x18c9f1[_0x1cdc6e(0x70c)]([_0x284f16]):_0x369cd3[_0x1cdc6e(0x15f)]=![]);if(_0x4b6d20[_0x1cdc6e(0xaf1)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x1cdc6e(0x325)!==_0x1cdc6e(0x325)?(_0x27b457['x']+=this['x'],_0x25e2fe['y']+=this['y']):_0x369cd3['motionIdle']=String(RegExp['$1'])[_0x1cdc6e(0x1e1)]()[_0x1cdc6e(0x699)]();else{if(_0x4b6d20[_0x1cdc6e(0xaf1)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if(_0x1cdc6e(0xb9c)!=='BYWBQ'){const _0x25a2b6=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x1cdc6e(0x9ba)]('');_0x369cd3[_0x1cdc6e(0x895)]=DataManager['processRandomizedData'](_0x25a2b6);}else this[_0x1cdc6e(0x862)](_0x1cdc6e(0x763));}}_0x4b6d20[_0x1cdc6e(0xaf1)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x369cd3['width']=Number(RegExp['$1']),_0x369cd3[_0x1cdc6e(0x842)]=Number(RegExp['$2']));if(_0x4b6d20[_0x1cdc6e(0xaf1)](/<SIDEVIEW WEAPON: (.*)>/i))_0x1cdc6e(0x6ca)===_0x1cdc6e(0x6ca)?_0x369cd3[_0x1cdc6e(0x76a)]=DataManager[_0x1cdc6e(0x6a9)](RegExp['$1']):this[_0x1cdc6e(0x8ad)]('performMagicEvasion',_0x5cff5e);else{if(_0x4b6d20[_0x1cdc6e(0xaf1)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x474975=String(RegExp['$1'])[_0x1cdc6e(0x31e)](/[\r\n]+/)[_0x1cdc6e(0x9ba)](''),_0xbca784=DataManager[_0x1cdc6e(0x4ca)](_0x474975);_0x369cd3[_0x1cdc6e(0x76a)]=DataManager['getWtypeIdWithName'](_0xbca784);}}if(Imported[_0x1cdc6e(0x694)]){const _0xf6ec82=this['getTraitSetKeys']();for(const _0x2ff85b of _0xf6ec82){const _0x505276=this['traitSet'](_0x2ff85b)[_0x1cdc6e(0x8c9)][_0x1cdc6e(0xaff)]()[_0x1cdc6e(0x699)](),_0x27a394=_0x2ff85b[_0x1cdc6e(0xaff)]()[_0x1cdc6e(0x699)]();if(_0x4b6d20[_0x1cdc6e(0xaf1)](VisuMZ['ElementStatusCore'][_0x1cdc6e(0x900)][_0x1cdc6e(0x77d)[_0x1cdc6e(0x86a)](_0x27a394,_0x505276)]))_0x369cd3[_0x1cdc6e(0x8c4)]=String(RegExp['$1']);else{if(_0x4b6d20[_0x1cdc6e(0xaf1)](VisuMZ['ElementStatusCore'][_0x1cdc6e(0x900)][_0x1cdc6e(0x7b8)[_0x1cdc6e(0x86a)](_0x27a394,_0x505276)])){const _0x47baf0=String(RegExp['$1'])[_0x1cdc6e(0x31e)](/[\r\n]+/)[_0x1cdc6e(0x9ba)]('');_0x369cd3[_0x1cdc6e(0x8c4)]=DataManager[_0x1cdc6e(0x4ca)](_0x47baf0);}}if(_0x4b6d20[_0x1cdc6e(0xaf1)](VisuMZ[_0x1cdc6e(0x3cf)][_0x1cdc6e(0x900)][_0x1cdc6e(0x9e6)['format'](_0x27a394,_0x505276)]))_0x369cd3['wtypeId']=DataManager[_0x1cdc6e(0x6a9)](RegExp['$1']);else{if(_0x4b6d20[_0x1cdc6e(0xaf1)](VisuMZ[_0x1cdc6e(0x3cf)][_0x1cdc6e(0x900)][_0x1cdc6e(0x37c)[_0x1cdc6e(0x86a)](_0x27a394,_0x505276)])){const _0x12d0fc=String(RegExp['$1'])[_0x1cdc6e(0x31e)](/[\r\n]+/)[_0x1cdc6e(0x9ba)](''),_0x306bed=DataManager['processRandomizedData'](_0x12d0fc);_0x369cd3[_0x1cdc6e(0x76a)]=DataManager[_0x1cdc6e(0x6a9)](_0x306bed);}}if(_0x4b6d20['match'](VisuMZ[_0x1cdc6e(0x3cf)][_0x1cdc6e(0x900)][_0x1cdc6e(0x2d3)[_0x1cdc6e(0x86a)](_0x27a394,_0x505276)])){if(_0x1cdc6e(0x155)===_0x1cdc6e(0x550))return _0x3e80d5['getInputButtonString'](_0x1cdc6e(0x947));else _0x369cd3['motionIdle']=String(RegExp['$1'])[_0x1cdc6e(0x1e1)]()[_0x1cdc6e(0x699)]();}else{if(_0x4b6d20[_0x1cdc6e(0xaf1)](VisuMZ[_0x1cdc6e(0x3cf)][_0x1cdc6e(0x900)][_0x1cdc6e(0x9d4)[_0x1cdc6e(0x86a)](_0x27a394,_0x505276)])){const _0x103bc2=String(RegExp['$1'])[_0x1cdc6e(0x31e)](/[\r\n]+/)[_0x1cdc6e(0x9ba)]('');_0x369cd3[_0x1cdc6e(0x895)]=DataManager[_0x1cdc6e(0x4ca)](_0x103bc2);}}}}},Game_Enemy[_0x16d1ef(0xa5b)]['attackAnimationId1']=function(){return this['_attackAnimationId']||0x0;},Game_Enemy['prototype']['attackAnimationId2']=function(){const _0x1eac67=_0x16d1ef;return this[_0x1eac67(0x595)]();},Game_Enemy['prototype'][_0x16d1ef(0x431)]=function(_0x51ae41){const _0x46d140=_0x16d1ef;return this[_0x46d140(0x595)]();},Game_Enemy['prototype'][_0x16d1ef(0x4fb)]=function(){const _0x3c7fa6=_0x16d1ef;if(this['enemy']()[_0x3c7fa6(0x954)][_0x3c7fa6(0xaf1)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x3c7fa6(0xa5b)][_0x3c7fa6(0x4fb)]['call'](this);},Game_Enemy['prototype'][_0x16d1ef(0x5f8)]=function(){const _0x27e04c=_0x16d1ef;if(this[_0x27e04c(0x336)]()[_0x27e04c(0x954)][_0x27e04c(0xaf1)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0xad6)]=function(){const _0x2b5960=_0x16d1ef,_0xb45233=[];for(const _0x14e542 of this[_0x2b5960(0x336)]()['actions']){const _0x20edb2=$dataSkills[_0x14e542[_0x2b5960(0x3ee)]];if(_0x20edb2&&!_0xb45233[_0x2b5960(0x4f8)](_0x20edb2))_0xb45233[_0x2b5960(0x8ad)](_0x20edb2);}return _0xb45233;},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x337)]=function(){const _0x4fdd80=_0x16d1ef;let _0x4f3bd3='battleUIOffsetX';if(this['checkCacheKey'](_0x4f3bd3))return this[_0x4fdd80(0x965)][_0x4f3bd3];return this[_0x4fdd80(0x965)][_0x4f3bd3]=this[_0x4fdd80(0x1b5)](this[_0x4fdd80(0x336)]()),this[_0x4fdd80(0x965)][_0x4f3bd3];},Game_Enemy['prototype'][_0x16d1ef(0xa28)]=function(){const _0x34c38d=_0x16d1ef;let _0x34039a=_0x34c38d(0xa28);if(this[_0x34c38d(0x66c)](_0x34039a))return this['_cache'][_0x34039a];return this[_0x34c38d(0x965)][_0x34039a]=this['createBattleUIOffsetY'](this['enemy']()),this['_cache'][_0x34039a];},Game_Enemy[_0x16d1ef(0xa5b)]['svBattlerData']=function(){const _0x5b38fa=_0x16d1ef;if(this[_0x5b38fa(0x9cd)]!==undefined)return this[_0x5b38fa(0x9cd)];return this[_0x5b38fa(0x9e9)](),this[_0x5b38fa(0x9cd)];},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x649)]=function(){const _0x546b42=_0x16d1ef;return this[_0x546b42(0x601)]()[_0x546b42(0x8c4)]!=='';},Game_Enemy['prototype']['svBattlerName']=function(){const _0x4d2586=_0x16d1ef;return this[_0x4d2586(0x601)]()['name'];},Game_Enemy['prototype'][_0x16d1ef(0x7a1)]=function(){const _0x1dc662=_0x16d1ef;return this[_0x1dc662(0x649)]()?VisuMZ['BattleCore'][_0x1dc662(0x58d)][_0x1dc662(0x65f)][_0x1dc662(0x374)]:_0x1dc662(0x7f0)===_0x1dc662(0x7f0)?VisuMZ['BattleCore'][_0x1dc662(0x58d)]['Enemy']['SmoothImage']:(this[_0x1dc662(0x965)]=this[_0x1dc662(0x965)]||{},this[_0x1dc662(0x965)][_0x367fd8]!==_0x58bad3);},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x27c)]=function(_0x34ce74){const _0x478702=_0x16d1ef;Game_Battler[_0x478702(0xa5b)]['performAction']['call'](this,_0x34ce74);if(this[_0x478702(0x649)]())this[_0x478702(0x491)](_0x34ce74);},Game_Enemy['prototype'][_0x16d1ef(0x406)]=function(){const _0x3c401e=_0x16d1ef,_0x13fdea=this[_0x3c401e(0x601)]()[_0x3c401e(0x76a)]||0x0,_0x13287c=$dataSystem['attackMotions'][_0x13fdea];if(_0x13287c){if(_0x13287c['type']===0x0){if('Xtban'!=='Xtban'){const _0x4cda3f=_0x3fbf65[_0x3c401e(0x6f3)](_0x132837[_0x3c401e(0xaff)]()[_0x3c401e(0x699)]());_0x4cda3f>=0x0&&_0x4cda3f<=0x7&&_0x976801[_0x3c401e(0x851)](_0x4cda3f,_0x13bd10);}else this['requestMotion'](_0x3c401e(0x9f5));}else{if(_0x13287c[_0x3c401e(0x427)]===0x1)this[_0x3c401e(0x80f)](_0x3c401e(0x377));else{if(_0x13287c['type']===0x2){if('bIotH'===_0x3c401e(0x539))this[_0x3c401e(0x80f)](_0x3c401e(0x484));else{if(!_0x5c0bd7[_0x3c401e(0x8c3)][_0x3c401e(0x58d)]['Damage'][_0x3c401e(0x77c)])return _0x279275;const _0x24e90e=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()['note'][_0x3c401e(0xaf1)](_0x24e90e))return!![];if(this[_0x3c401e(0x4db)]()[_0x3c401e(0x84f)]()[_0x3c401e(0xba9)](_0x482f14=>_0x482f14&&_0x482f14['note']['match'](_0x24e90e)))return!![];const _0x2d26ad=_0x4c48c8<0x0?-0x1:0x1;_0x48fe24=_0x373171[_0x3c401e(0xaf4)](_0x514437);let _0xf05957=this[_0x3c401e(0x4db)]()[_0x3c401e(0x6dd)]();this[_0x3c401e(0x74a)]()[_0x3c401e(0x954)][_0x3c401e(0xaf1)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0xf05957+=_0x2b8700(_0x49ce2e['$1'])/0x64);_0xf05957=_0xf05957['clamp'](0.01,0x1);const _0x22fd52=this[_0x3c401e(0x38c)](),_0x53051e=_0xf05957*_0x22fd52;if(_0x1d1c65>_0x53051e&&_0x22fd52>_0x53051e){_0x5dcb4f-=_0x53051e;const _0xf4d099=_0x1fc50e[_0x3c401e(0x8c3)]['Settings'][_0x3c401e(0x6c4)][_0x3c401e(0x946)],_0x296006=_0x20dd04[_0x3c401e(0x26b)](0x1-_0x178524/((_0x22fd52-_0x53051e)*_0xf4d099+_0x55e11b),0.01);_0x3441c8*=_0x296006,_0x1aeae1+=_0x53051e;}return _0x273b95*_0x2d26ad;}}}}}},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x6e6)]=function(){const _0x1dd508=_0x16d1ef,_0x542f5e=this[_0x1dd508(0x601)]()[_0x1dd508(0x76a)]||0x0,_0xa5970c=$dataSystem['attackMotions'][_0x542f5e];_0xa5970c&&('Pmkqd'!==_0x1dd508(0x2ef)?this['startWeaponAnimation'](_0xa5970c['weaponImageId']):(this['_requestRefresh']=![],_0x4279d9[_0x1dd508(0x8c3)][_0x1dd508(0x9b3)][_0x1dd508(0x2c7)](this)));},Game_Enemy[_0x16d1ef(0xa5b)]['getAttackMotion']=function(){const _0x2dbe80=_0x16d1ef,_0x198edc=this[_0x2dbe80(0x601)]()[_0x2dbe80(0x76a)]||0x0;return $dataSystem['attackMotions'][_0x198edc];},Game_Enemy[_0x16d1ef(0xa5b)]['getAttackMotionSlot']=function(_0x38a9d2){const _0x369d30=_0x16d1ef;return this[_0x369d30(0x85e)]();},Game_Enemy[_0x16d1ef(0xa5b)]['performDamage']=function(){const _0x49b715=_0x16d1ef;Game_Battler[_0x49b715(0xa5b)][_0x49b715(0x3e9)][_0x49b715(0x2c7)](this);if(this['isSpriteVisible']()&&this['hasSvBattler']()){if(_0x49b715(0x6e2)!=='bODzg')return this[_0x49b715(0x27b)]()&&this[_0x49b715(0x27b)]()[_0x49b715(0x74a)]()&&this[_0x49b715(0x27b)]()['isMagicSkill']();else this[_0x49b715(0x80f)](_0x49b715(0x7a8));}SoundManager[_0x49b715(0xab2)]();},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x1db)]=function(){const _0x3eb672=_0x16d1ef;Game_Battler[_0x3eb672(0xa5b)][_0x3eb672(0x1db)][_0x3eb672(0x2c7)](this),this[_0x3eb672(0x80f)](_0x3eb672(0x2b7));},Game_Enemy[_0x16d1ef(0xa5b)]['performMagicEvasion']=function(){const _0x56309b=_0x16d1ef;Game_Battler[_0x56309b(0xa5b)][_0x56309b(0x6b5)]['call'](this),this[_0x56309b(0x80f)](_0x56309b(0x2b7));},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x209)]=function(){const _0xff1893=_0x16d1ef;Game_Battler[_0xff1893(0xa5b)][_0xff1893(0x209)][_0xff1893(0x2c7)](this),this[_0xff1893(0x406)]();},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x3b3)]=function(){const _0xb5a796=_0x16d1ef;if(this[_0xb5a796(0x649)]()){if(this[_0xb5a796(0x9e1)]()>=0x1)return!![];return this[_0xb5a796(0x601)]()[_0xb5a796(0x629)];}else{if(_0xb5a796(0x297)===_0xb5a796(0x1e8)){const _0x13dc6a=this[_0xb5a796(0x74a)]()['scope'];return _0x13dc6a['match'](/(?:RAND|RANDOM)/i);}else return!![];}},Game_Enemy[_0x16d1ef(0xa5b)]['svBattlerAnchorX']=function(){const _0x43397d=_0x16d1ef;return this[_0x43397d(0x601)]()[_0x43397d(0x49a)];},Game_Enemy['prototype'][_0x16d1ef(0x75c)]=function(){const _0x2ea972=_0x16d1ef;return this[_0x2ea972(0x601)]()[_0x2ea972(0x190)];},Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0xa34)]=function(){const _0x52d4ed=_0x16d1ef;return this['svBattlerData']()[_0x52d4ed(0x15f)];},VisuMZ[_0x16d1ef(0x8c3)]['Game_Enemy_transform']=Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x988)],Game_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x988)]=function(_0x8bdc7c){const _0x231944=_0x16d1ef;VisuMZ[_0x231944(0x8c3)][_0x231944(0x1e9)][_0x231944(0x2c7)](this,_0x8bdc7c),this[_0x231944(0x58f)](),this['setupBattleCoreData']();const _0x10256b=this[_0x231944(0xb02)]();if(_0x10256b)_0x10256b['setBattler'](this);},Game_Unit['prototype'][_0x16d1ef(0x157)]=function(_0x4907c2){const _0x1c3f35=_0x16d1ef;for(const _0x57d033 of this[_0x1c3f35(0x9fe)]()){if(_0x57d033)_0x57d033[_0x1c3f35(0x157)](_0x4907c2);}},Game_Unit[_0x16d1ef(0xa5b)][_0x16d1ef(0x982)]=function(){const _0x219a2a=_0x16d1ef,_0x2c595d=this[_0x219a2a(0x888)]();return _0x2c595d[Math[_0x219a2a(0x677)](_0x2c595d['length'])];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x5bb)]=Game_Party[_0x16d1ef(0xa5b)]['addActor'],Game_Party[_0x16d1ef(0xa5b)][_0x16d1ef(0x532)]=function(_0x1b17b4){const _0x50d5d0=_0x16d1ef;VisuMZ[_0x50d5d0(0x8c3)][_0x50d5d0(0x5bb)]['call'](this,_0x1b17b4),BattleManager['refreshStatusWindow']();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x7d9)]=Game_Party['prototype'][_0x16d1ef(0x887)],Game_Party['prototype'][_0x16d1ef(0x887)]=function(_0x400b07){const _0x3882f8=_0x16d1ef;VisuMZ[_0x3882f8(0x8c3)][_0x3882f8(0x7d9)][_0x3882f8(0x2c7)](this,_0x400b07),BattleManager['refreshStatusWindow']();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x79a)]=Game_Troop[_0x16d1ef(0xa5b)][_0x16d1ef(0x706)],Game_Troop[_0x16d1ef(0xa5b)]['setup']=function(_0x6e2221){const _0x467c83=_0x16d1ef;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x6e2221),VisuMZ[_0x467c83(0x8c3)]['Game_Troop_setup'][_0x467c83(0x2c7)](this,_0x6e2221);},VisuMZ[_0x16d1ef(0x8c3)]['Game_Troop_expTotal']=Game_Troop[_0x16d1ef(0xa5b)]['expTotal'],Game_Troop['prototype'][_0x16d1ef(0x28d)]=function(){const _0x2a5485=_0x16d1ef;let _0x1fa6b6=VisuMZ['BattleCore']['Game_Troop_expTotal'][_0x2a5485(0x2c7)](this);return this[_0x2a5485(0x132)]&&(_0x1fa6b6*=this[_0x2a5485(0x132)]()),Math[_0x2a5485(0xa1b)](_0x1fa6b6);},Game_Troop[_0x16d1ef(0xa5b)][_0x16d1ef(0x132)]=function(){return 0x1;},VisuMZ[_0x16d1ef(0x8c3)]['Game_Map_setupBattleback']=Game_Map['prototype'][_0x16d1ef(0xb09)],Game_Map[_0x16d1ef(0xa5b)][_0x16d1ef(0xb09)]=function(){const _0x5797ec=_0x16d1ef;VisuMZ[_0x5797ec(0x8c3)][_0x5797ec(0x49b)]['call'](this),this[_0x5797ec(0x7cd)]();},Game_Map[_0x16d1ef(0xa5b)]['setupBattlebackBattleCore']=function(){const _0x223731=_0x16d1ef;this['_regionBattleback1']={},this[_0x223731(0x65e)]={};if(!$dataMap)return;const _0xb72657=$dataMap['note'];if(!_0xb72657)return;const _0x12d6eb=_0xb72657[_0x223731(0xaf1)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x12d6eb)for(const _0x1be3e7 of _0x12d6eb){_0x1be3e7[_0x223731(0xaf1)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0xbb0948=Number(RegExp['$1']),_0x27f63f=Number(RegExp['$2']),_0x5152c6=_0x27f63f===0x1?this['_regionBattleback1']:this[_0x223731(0x65e)],_0x4de693=String(RegExp['$3']);_0x5152c6[_0xbb0948]=_0x4de693;}},VisuMZ['BattleCore'][_0x16d1ef(0x1bc)]=Game_Map[_0x16d1ef(0xa5b)]['battleback1Name'],Game_Map[_0x16d1ef(0xa5b)][_0x16d1ef(0x972)]=function(){const _0x251024=_0x16d1ef;if(!BattleManager[_0x251024(0x880)]()){if(_0x251024(0x40c)!==_0x251024(0x40c))this[_0x251024(0x989)]=_0x57e459;else{const _0x37e00d=$gamePlayer[_0x251024(0xb5f)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x251024(0x99d)]&&this['_regionBattleback1'][_0x37e00d])return this[_0x251024(0x99d)][_0x37e00d];}}return VisuMZ[_0x251024(0x8c3)]['Game_Map_battleback1Name'][_0x251024(0x2c7)](this);},VisuMZ[_0x16d1ef(0x8c3)]['Game_Map_battleback2Name']=Game_Map[_0x16d1ef(0xa5b)]['battleback2Name'],Game_Map[_0x16d1ef(0xa5b)]['battleback2Name']=function(){const _0x19c082=_0x16d1ef;if(!BattleManager[_0x19c082(0x880)]()){const _0x46a062=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x19c082(0x99d)]&&this[_0x19c082(0x65e)][_0x46a062]){if('WKfMh'==='WKfMh')return this['_regionBattleback2'][_0x46a062];else{const _0x57b031=_0x457298['boxWidth']/0x2,_0x1c4e1b=this[_0x19c082(0x773)](_0x2f39dd['BattleCore']['Settings'][_0x19c082(0x66d)][_0x19c082(0xad7)],!![]),_0x2dd506=_0x392485[_0x19c082(0x5d9)]((_0x1268c1[_0x19c082(0xb26)]-_0x57b031)/0x2),_0x4329da=_0x5e41a8[_0x19c082(0x6be)]-_0x1c4e1b-this[_0x19c082(0x544)]()[_0x19c082(0x842)];return new _0x2dae51(_0x2dd506,_0x4329da,_0x57b031,_0x1c4e1b);}}}return VisuMZ['BattleCore'][_0x19c082(0xb96)][_0x19c082(0x2c7)](this);},VisuMZ['BattleCore'][_0x16d1ef(0x63c)]=Game_Map['prototype'][_0x16d1ef(0xa68)],Game_Map[_0x16d1ef(0xa5b)][_0x16d1ef(0xa68)]=function(){const _0x3d660c=_0x16d1ef;let _0x10d473=JsonEx[_0x3d660c(0x504)](VisuMZ[_0x3d660c(0x8c3)][_0x3d660c(0x63c)]['call'](this));return VisuMZ[_0x3d660c(0x8c3)][_0x3d660c(0x7c8)](_0x10d473);},VisuMZ['BattleCore'][_0x16d1ef(0x7c8)]=function(_0x57133d){const _0x37e9aa=_0x16d1ef;var _0xde9e,_0x32e8cb,_0x5449a9;for(_0x5449a9=_0x57133d[_0x37e9aa(0xa40)]-0x1;_0x5449a9>0x0;_0x5449a9--){_0x37e9aa(0x999)==='sjSSV'?(this[_0x37e9aa(0xa3e)]='',this[_0x37e9aa(0x509)]()&&this[_0x37e9aa(0x509)]()[_0x37e9aa(0x954)][_0x37e9aa(0xaf1)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x37e9aa(0xa3e)]=_0x25c973(_0x4ca3a1['$1']))):(_0xde9e=Math[_0x37e9aa(0x481)](Math[_0x37e9aa(0x432)]()*(_0x5449a9+0x1)),_0x32e8cb=_0x57133d[_0x5449a9],_0x57133d[_0x5449a9]=_0x57133d[_0xde9e],_0x57133d[_0xde9e]=_0x32e8cb);}return _0x57133d;},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x51c)]=Game_Interpreter[_0x16d1ef(0xa5b)][_0x16d1ef(0xb40)],Game_Interpreter['prototype']['command357']=function(_0xa4bbd8){return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ['BattleCore']['Game_Interpreter_PluginCommand']['call'](this,_0xa4bbd8);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x555)]=Game_Interpreter[_0x16d1ef(0xa5b)][_0x16d1ef(0xb48)],Game_Interpreter[_0x16d1ef(0xa5b)][_0x16d1ef(0xb48)]=function(){const _0x450357=_0x16d1ef;if(SceneManager[_0x450357(0x37d)]())switch(this[_0x450357(0xbbd)]){case'battleAngle':if(Imported[_0x450357(0x3b9)]){if(_0x450357(0x922)!==_0x450357(0x922))return _0x5a44ee[_0x450357(0x2e9)];else{if($gameScreen[_0x450357(0x83b)]()[_0x450357(0x7e3)]>0x0)return!![];this[_0x450357(0xbbd)]='';}}break;case _0x450357(0x807):if(BattleManager[_0x450357(0x71a)][_0x450357(0x4d9)]())return!![];this[_0x450357(0xbbd)]='';break;case _0x450357(0x38a):if(Imported[_0x450357(0x3b9)]){if(_0x450357(0x692)===_0x450357(0x692)){if($gameScreen['battleCameraData']()[_0x450357(0x943)]>0x0)return!![];if($gameScreen['battleCameraData']()[_0x450357(0x371)]>0x0)return!![];this[_0x450357(0xbbd)]='';}else{if(!_0x5ea12d[_0x450357(0x37d)]())return;const _0x143278=_0x23d23f['getLastPluginCommandInterpreter']();if(!_0x143278)return;_0x143278[_0x450357(0x13b)](_0x450357(0x6ef));}}break;case _0x450357(0x7bf):if(BattleManager['_spriteset'][_0x450357(0x365)]())return!![];this[_0x450357(0xbbd)]='';break;case _0x450357(0x884):if(BattleManager[_0x450357(0x71a)]['isAnyoneFloating']())return!![];this[_0x450357(0xbbd)]='';break;case _0x450357(0x901):if(BattleManager[_0x450357(0x71a)]['isAnyoneJumping']())return!![];this['_waitMode']='';break;case _0x450357(0xa3b):if(BattleManager[_0x450357(0xb07)][_0x450357(0xa49)]())return!![];this[_0x450357(0xbbd)]='';break;case _0x450357(0x38b):if(BattleManager[_0x450357(0x71a)]['isAnyoneMoving']())return!![];this[_0x450357(0xbbd)]='';break;case _0x450357(0x20b):if(BattleManager[_0x450357(0x71a)]['isAnyoneChangingOpacity']())return!![];this['_waitMode']='';break;case _0x450357(0x6ef):if(BattleManager[_0x450357(0x71a)][_0x450357(0x3ad)]())return!![];this[_0x450357(0xbbd)]='';break;case _0x450357(0xa98):if(BattleManager[_0x450357(0x71a)][_0x450357(0xb90)]())return!![];this[_0x450357(0xbbd)]='';break;case _0x450357(0x40d):if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager[_0x450357(0x71a)][_0x450357(0x9ad)]())return!![];this[_0x450357(0xbbd)]='';}break;case _0x450357(0x3d6):if(Imported[_0x450357(0x3b9)]){if($gameScreen[_0x450357(0x83b)]()['skewDuration']>0x0)return!![];this['_waitMode']='';}break;case _0x450357(0x2de):if(BattleManager['_spriteset'][_0x450357(0x20c)]())return!![];this[_0x450357(0xbbd)]='';break;case _0x450357(0x5fc):if(Imported[_0x450357(0x3b9)]){if($gameScreen[_0x450357(0x83b)]()['zoomDuration']>0x0)return!![];this['_waitMode']='';}break;}return VisuMZ[_0x450357(0x8c3)]['Game_Interpreter_updateWaitMode']['call'](this);},VisuMZ[_0x16d1ef(0x8c3)]['Game_Interpreter_command301']=Game_Interpreter[_0x16d1ef(0xa5b)][_0x16d1ef(0x7af)],Game_Interpreter[_0x16d1ef(0xa5b)]['command301']=function(_0x2bd809){const _0x2e5896=_0x16d1ef;if(!$gameParty[_0x2e5896(0x882)]()){if(_0x2e5896(0xa24)===_0x2e5896(0xa24))return this[_0x2e5896(0xba1)](_0x2bd809);else _0x279646=(_0x35f150+_0x39afdd)/0x2;}else return VisuMZ[_0x2e5896(0x8c3)][_0x2e5896(0x30c)][_0x2e5896(0x2c7)](this,_0x2bd809);},Game_Interpreter[_0x16d1ef(0xa5b)][_0x16d1ef(0x44d)]=function(_0x1c8d4f){const _0x531155=_0x16d1ef;return VisuMZ[_0x531155(0x8c3)][_0x531155(0x30c)]['call'](this,_0x1c8d4f),BattleManager['setEventCallback'](_0x24dd8e=>{const _0x219ed5=_0x531155;'YOUNd'===_0x219ed5(0xaea)?_0x2493ee[_0x219ed5(0x6c9)](_0x148ed8):this['_branch'][this[_0x219ed5(0x7e0)]]=_0x24dd8e;}),!![];},VisuMZ[_0x16d1ef(0x8c3)]['CheckMapBattleEventValid']=function(_0x342f50){const _0x25b086=_0x16d1ef,_0x28f430=$dataCommonEvents[_0x342f50];if(!_0x28f430)return![];if(_0x28f430[_0x25b086(0x85a)][_0x25b086(0xa40)]<=0x1)return![];return!![];},Game_Interpreter[_0x16d1ef(0xa5b)]['command301_PreBattleEvent']=function(_0x39aca1){const _0x4c29cb=_0x16d1ef,_0x4ece50=VisuMZ[_0x4c29cb(0x8c3)][_0x4c29cb(0x58d)]['Mechanics'],_0x4e4761=_0x4ece50[_0x4c29cb(0x5fa)],_0x187ac2=$dataCommonEvents[_0x4e4761];if(_0x187ac2&&VisuMZ[_0x4c29cb(0x8c3)][_0x4c29cb(0x282)](_0x4e4761)){if(_0x4c29cb(0x9a9)===_0x4c29cb(0x9a9)){const _0x18464c=this['isOnCurrentMap']()?this[_0x4c29cb(0x643)]:0x0,_0x3c6145=_0x187ac2['list'];this[_0x4c29cb(0x2e1)](_0x3c6145,_0x18464c),this['_list']=JsonEx[_0x4c29cb(0x504)](this[_0x4c29cb(0x48d)]);const _0x4800b1={'code':0xbc3,'indent':this[_0x4c29cb(0x7e0)],'parameters':JsonEx[_0x4c29cb(0x504)](_0x39aca1)};return this['_list'][_0x4c29cb(0x5e9)](this[_0x4c29cb(0x82d)]+0x1,0x0,_0x4800b1),!![];}else return![];}else return VisuMZ['BattleCore'][_0x4c29cb(0x30c)][_0x4c29cb(0x2c7)](this,_0x39aca1);},VisuMZ[_0x16d1ef(0x8c3)]['BattleManager_onEncounter']=BattleManager[_0x16d1ef(0x74b)],BattleManager[_0x16d1ef(0x74b)]=function(){const _0x461f82=_0x16d1ef;VisuMZ[_0x461f82(0x8c3)][_0x461f82(0x298)]['call'](this),this[_0x461f82(0x462)]();},BattleManager['onEncounterBattleCore']=function(){const _0x35c92a=_0x16d1ef,_0x168846=VisuMZ['BattleCore'][_0x35c92a(0x58d)][_0x35c92a(0x93b)],_0x1da2e0=_0x168846['BattleStartEvent'];_0x1da2e0&&VisuMZ[_0x35c92a(0x8c3)][_0x35c92a(0x282)](_0x1da2e0)&&(this[_0x35c92a(0x81f)]=!![],$gameTemp[_0x35c92a(0x5ab)](_0x168846[_0x35c92a(0x5fa)]),$gameMap['updateInterpreter'](),$gameMap[_0x35c92a(0x9de)][_0x35c92a(0x1e5)]=!![]),_0x168846[_0x35c92a(0x8da)]>0x0&&(this[_0x35c92a(0x834)]=!![]);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x914)]=Scene_Map[_0x16d1ef(0xa5b)]['updateCallMenu'],Scene_Map[_0x16d1ef(0xa5b)][_0x16d1ef(0x993)]=function(){const _0x582bf6=_0x16d1ef;if(BattleManager[_0x582bf6(0x81f)])return;VisuMZ[_0x582bf6(0x8c3)][_0x582bf6(0x914)][_0x582bf6(0x2c7)](this);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x5cb)]=Scene_Map[_0x16d1ef(0xa5b)][_0x16d1ef(0x682)],Scene_Map['prototype']['launchBattle']=function(){const _0x5ad7f2=_0x16d1ef;if(BattleManager[_0x5ad7f2(0x81f)])this[_0x5ad7f2(0x587)]();else{if(_0x5ad7f2(0x4e8)===_0x5ad7f2(0x23d)){if(this[_0x5ad7f2(0x88a)]()==='border')return this[_0x5ad7f2(0x2f1)]();else return this[_0x5ad7f2(0x134)]()?this[_0x5ad7f2(0x803)]():_0x155f2a[_0x5ad7f2(0x8c3)][_0x5ad7f2(0xb3c)][_0x5ad7f2(0x2c7)](this);}else VisuMZ[_0x5ad7f2(0x8c3)][_0x5ad7f2(0x5cb)]['call'](this);}},Scene_Map[_0x16d1ef(0xa5b)][_0x16d1ef(0x587)]=function(){this['_active']=!![];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x574)]=SceneManager['isSceneChanging'],SceneManager[_0x16d1ef(0x89d)]=function(){const _0x3f0ea0=_0x16d1ef;if(BattleManager[_0x3f0ea0(0x81f)])return![];return VisuMZ[_0x3f0ea0(0x8c3)][_0x3f0ea0(0x574)][_0x3f0ea0(0x2c7)](this);},VisuMZ['BattleCore'][_0x16d1ef(0x6ac)]=Game_Interpreter[_0x16d1ef(0xa5b)][_0x16d1ef(0x97c)],Game_Interpreter['prototype'][_0x16d1ef(0x97c)]=function(){const _0x2fa021=_0x16d1ef;VisuMZ[_0x2fa021(0x8c3)][_0x2fa021(0x6ac)]['call'](this),this['_preBattleCommonEvent']&&(this[_0x2fa021(0x1e5)]=undefined,SceneManager[_0x2fa021(0x438)][_0x2fa021(0x9df)]());},Scene_Map[_0x16d1ef(0xa5b)][_0x16d1ef(0x9df)]=function(){const _0x19b5df=_0x16d1ef;BattleManager[_0x19b5df(0x81f)]=undefined,BattleManager[_0x19b5df(0x35c)]=!![],this['stop']();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x940)]=Scene_Map[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)],Scene_Map[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)]=function(){const _0x54742b=_0x16d1ef;VisuMZ[_0x54742b(0x8c3)][_0x54742b(0x940)][_0x54742b(0x2c7)](this),BattleManager[_0x54742b(0x35c)]&&(this[_0x54742b(0x510)]=!![],BattleManager[_0x54742b(0x35c)]=undefined);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x58c)]=Scene_Map[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)],Scene_Map[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)]=function(){const _0x2fc6d5=_0x16d1ef;VisuMZ[_0x2fc6d5(0x8c3)][_0x2fc6d5(0x58c)][_0x2fc6d5(0x2c7)](this),$gameTemp[_0x2fc6d5(0x586)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x18a)]=Scene_ItemBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x1f9)],Scene_ItemBase['prototype'][_0x16d1ef(0x1f9)]=function(){const _0x17b1d6=_0x16d1ef;VisuMZ[_0x17b1d6(0x8c3)][_0x17b1d6(0x18a)][_0x17b1d6(0x2c7)](this);if(this[_0x17b1d6(0x74a)]()[_0x17b1d6(0x954)][_0x17b1d6(0xaf1)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if('oePWb'==='oePWb')return;else _0x1ab474[_0x17b1d6(0x8c3)][_0x17b1d6(0x673)][_0x17b1d6(0x2c7)](this),this[_0x17b1d6(0x3bc)]()&&this[_0x17b1d6(0x720)]()&&!this[_0x17b1d6(0x327)]&&_0x44fae2[_0x17b1d6(0x42b)]()&&this[_0x17b1d6(0x49e)]();}this['item']()[_0x17b1d6(0x954)][_0x17b1d6(0xaf1)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x17b1d6(0x41e)]=[]),DataManager[_0x17b1d6(0x434)](this[_0x17b1d6(0x74a)]())&&($gameTemp[_0x17b1d6(0x41e)]=[]);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x361)]=Scene_Options[_0x16d1ef(0xa5b)][_0x16d1ef(0xb55)],Scene_Options['prototype'][_0x16d1ef(0xb55)]=function(){const _0x588881=_0x16d1ef;let _0x434e9c=VisuMZ[_0x588881(0x8c3)]['Scene_Options_maxCommands'][_0x588881(0x2c7)](this);const _0x4b4b13=VisuMZ[_0x588881(0x8c3)]['Settings'];if(_0x4b4b13[_0x588881(0x849)]['AddOption']&&_0x4b4b13[_0x588881(0x849)][_0x588881(0x6c0)])_0x434e9c+=0x2;if(_0x4b4b13[_0x588881(0xa27)]['AddOption']&&_0x4b4b13[_0x588881(0xa27)][_0x588881(0x6c0)])_0x434e9c+=0x1;return _0x434e9c;},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x6d2)]=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)],Scene_Battle[_0x16d1ef(0xa5b)]['initialize']=function(){const _0x1bfed5=_0x16d1ef;VisuMZ['BattleCore'][_0x1bfed5(0x6d2)][_0x1bfed5(0x2c7)](this),this[_0x1bfed5(0x3b7)]();},VisuMZ['BattleCore'][_0x16d1ef(0x50d)]=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x1b2)],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x1b2)]=function(){const _0x1dcc29=_0x16d1ef;if(SceneManager[_0x1dcc29(0x138)]()){Scene_Message[_0x1dcc29(0xa5b)][_0x1dcc29(0x1b2)][_0x1dcc29(0x2c7)](this);if(this[_0x1dcc29(0x71a)]){if(_0x1dcc29(0x801)!==_0x1dcc29(0x801))return _0x34c516[_0x1dcc29(0x8c3)][_0x1dcc29(0x58d)][_0x1dcc29(0x66d)][_0x1dcc29(0x55e)];else this[_0x1dcc29(0x71a)][_0x1dcc29(0x3e1)]();}BattleManager['_tpbSceneChangeCacheActor']&&BattleManager[_0x1dcc29(0x36a)]();}else{if(_0x1dcc29(0x451)!==_0x1dcc29(0x64c))VisuMZ[_0x1dcc29(0x8c3)][_0x1dcc29(0x50d)]['call'](this),$gameTroop[_0x1dcc29(0x343)]();else{this[_0x1dcc29(0x913)]=_0x510337;const _0x38b81c=this[_0x1dcc29(0x8c4)](),_0x55c9c3=this['bitmapWidth'](),_0x484b5c=_0x53d9d1['prototype'][_0x1dcc29(0x61e)]();this['setupFont'](),this['bitmap'][_0x1dcc29(0x721)](),this[_0x1dcc29(0xb74)][_0x1dcc29(0x7fb)](_0x38b81c,0x0,0x0,_0x55c9c3,_0x484b5c,'center');}}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x9f3)]=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x3c6)],Scene_Battle['prototype'][_0x16d1ef(0x3c6)]=function(){const _0x37190b=_0x16d1ef;SceneManager[_0x37190b(0x902)]()?_0x37190b(0xbe3)!==_0x37190b(0xbe3)?_0x5d091b=_0x4a4c42[_0x37190b(0x8c3)]['Game_Action_makeTargets'][_0x37190b(0x2c7)](this):Scene_Message[_0x37190b(0xa5b)][_0x37190b(0x3c6)][_0x37190b(0x2c7)](this):VisuMZ['BattleCore'][_0x37190b(0x9f3)][_0x37190b(0x2c7)](this);},VisuMZ['BattleCore']['Scene_Battle_terminate']=Scene_Battle['prototype']['terminate'],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x97c)]=function(){const _0x3de855=_0x16d1ef;SceneManager[_0x3de855(0x902)]()?Scene_Message[_0x3de855(0xa5b)][_0x3de855(0x97c)][_0x3de855(0x2c7)](this):VisuMZ[_0x3de855(0x8c3)][_0x3de855(0x99a)][_0x3de855(0x2c7)](this),this['clearOnceParallelInterpreters']();},Scene_Battle[_0x16d1ef(0xa5b)]['isRightInputMode']=function(){const _0x4f51bc=_0x16d1ef;if(ConfigManager[_0x4f51bc(0x7f5)]&&ConfigManager['uiInputPosition']!==undefined){if(_0x4f51bc(0x6d1)!==_0x4f51bc(0x6d1))_0x43c82f['endAnimation']();else return ConfigManager[_0x4f51bc(0x6e9)];}else{if(this[_0x4f51bc(0x88a)]()===_0x4f51bc(0x6a0))return![];else{return Scene_Message[_0x4f51bc(0xa5b)][_0x4f51bc(0x49c)][_0x4f51bc(0x2c7)](this);;}}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x764)]=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x84c)],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x84c)]=function(){const _0x4b2b4e=_0x16d1ef;this[_0x4b2b4e(0x650)](),VisuMZ['BattleCore'][_0x4b2b4e(0x764)][_0x4b2b4e(0x2c7)](this),this[_0x4b2b4e(0x527)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x4d7)]=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xbcc)],Scene_Battle[_0x16d1ef(0xa5b)]['createCancelButton']=function(){const _0x428c9e=_0x16d1ef;VisuMZ[_0x428c9e(0x8c3)][_0x428c9e(0x4d7)][_0x428c9e(0x2c7)](this),this['battleLayoutStyle']()===_0x428c9e(0x6a0)&&this[_0x428c9e(0x551)]();},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x37b)]=function(_0x2845d0){const _0x40e5e1=_0x16d1ef;_0x2845d0?(this[_0x40e5e1(0x419)]['x']=(Graphics[_0x40e5e1(0x7d5)]-Graphics[_0x40e5e1(0xb26)])/0x2,this['_windowLayer']['y']=(Graphics['height']-Graphics[_0x40e5e1(0x6be)])/0x2):(this[_0x40e5e1(0x419)]['x']=Graphics['width']*0xa,this['_windowLayer']['y']=Graphics[_0x40e5e1(0x842)]*0xa);},VisuMZ[_0x16d1ef(0x8c3)]['Scene_Battle_selectNextCommand']=Scene_Battle[_0x16d1ef(0xa5b)]['selectNextCommand'],Scene_Battle[_0x16d1ef(0xa5b)]['selectNextCommand']=function(){const _0x4bfdaa=_0x16d1ef,_0x1b6ec7=BattleManager[_0x4bfdaa(0x509)]();VisuMZ[_0x4bfdaa(0x8c3)][_0x4bfdaa(0x9d5)][_0x4bfdaa(0x2c7)](this);if(_0x1b6ec7){if(_0x4bfdaa(0x516)==='bJpLL'){if(_0x1b6ec7===BattleManager[_0x4bfdaa(0x509)]())return;if(_0x1b6ec7===BattleManager['_subject'])return;if(_0x1b6ec7[_0x4bfdaa(0xb02)]())_0x1b6ec7[_0x4bfdaa(0xb02)]()[_0x4bfdaa(0x402)]();}else{if(!_0x41d061[_0x4bfdaa(0x37d)]())return;_0x2ceff4[_0x4bfdaa(0x5ea)](_0x53c1dd,_0x41b457);const _0xc8fa6c=_0x4f996d[_0x4bfdaa(0x7c5)],_0x589299={'criticalHitRate':_0x2d2c1b['CriticalHitRate'],'criticalHitFlat':_0x4717c1[_0x4bfdaa(0x4e4)],'criticalDmgRate':_0x2b7a9b[_0x4bfdaa(0xb52)],'criticalDmgFlat':_0x1766ef[_0x4bfdaa(0x8d3)],'damageRate':_0x2ab617['DamageRate'],'damageFlat':_0x2465e2[_0x4bfdaa(0x985)],'hitRate':_0x3bd13d[_0x4bfdaa(0xbd7)],'hitFlat':_0x40377e['HitFlat']};_0xc8fa6c[_0x4bfdaa(0xba3)]=_0x589299;}}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xbcf)]=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x8d7)],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x8d7)]=function(){const _0x34d056=_0x16d1ef,_0x24fac1=BattleManager[_0x34d056(0x509)]();if(_0x24fac1&&_0x24fac1[_0x34d056(0xb02)])_0x24fac1['battler']()[_0x34d056(0x402)]();VisuMZ[_0x34d056(0x8c3)]['Scene_Battle_selectPreviousCommand'][_0x34d056(0x2c7)](this);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x52d)]=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xbd3)],Scene_Battle['prototype'][_0x16d1ef(0xbd3)]=function(){const _0x326fd7=_0x16d1ef;if(VisuMZ[_0x326fd7(0x8c3)]['Settings'][_0x326fd7(0x591)][_0x326fd7(0x263)])return VisuMZ[_0x326fd7(0x8c3)][_0x326fd7(0x58d)][_0x326fd7(0x591)][_0x326fd7(0x263)]['call'](this);return VisuMZ[_0x326fd7(0x8c3)][_0x326fd7(0x52d)]['call'](this);},VisuMZ[_0x16d1ef(0x8c3)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle['prototype']['createPartyCommandWindow'],Scene_Battle[_0x16d1ef(0xa5b)]['createPartyCommandWindow']=function(){const _0x4f8de8=_0x16d1ef;VisuMZ[_0x4f8de8(0x8c3)]['Scene_Battle_createPartyCommandWindow'][_0x4f8de8(0x2c7)](this),this[_0x4f8de8(0x6cd)]();},Scene_Battle[_0x16d1ef(0xa5b)]['createPartyCommandWindowBattleCore']=function(){const _0x3c57bc=_0x16d1ef,_0x5bffaa=this['_partyCommandWindow'];_0x5bffaa[_0x3c57bc(0x88b)](_0x3c57bc(0x3fa),this['commandAutoBattle'][_0x3c57bc(0x9f7)](this)),_0x5bffaa[_0x3c57bc(0x88b)](_0x3c57bc(0xa07),this[_0x3c57bc(0x63d)][_0x3c57bc(0x9f7)](this));const _0x4c669c=this[_0x3c57bc(0x88a)]();switch(_0x4c669c){case'xp':case _0x3c57bc(0x7ee):return this[_0x3c57bc(0xb3f)][_0x3c57bc(0x774)](0x1);break;}},Scene_Battle[_0x16d1ef(0xa5b)]['commandAutoBattle']=function(){const _0x57e582=_0x16d1ef;BattleManager[_0x57e582(0xa16)]=!![],$gameParty[_0x57e582(0x34c)](),this[_0x57e582(0x49e)](),BattleManager[_0x57e582(0x86c)]()&&(BattleManager[_0x57e582(0x6f0)]=![]);},Scene_Battle[_0x16d1ef(0xa5b)]['commandOptions']=function(){const _0x3d0c55=_0x16d1ef;this['isQueueOptionsMenu']()?(this['_callSceneOptions']=!![],this[_0x3d0c55(0xb07)][_0x3d0c55(0x8ad)]('addText',VisuMZ[_0x3d0c55(0x8c3)][_0x3d0c55(0x58d)][_0x3d0c55(0x810)]['ActiveTpbOptionsMessage'])):_0x3d0c55(0x29b)==='DlwsV'?this[_0x3d0c55(0x6af)]():this[_0x3d0c55(0x8ad)](_0x3d0c55(0xbaa),_0x10401e);},Scene_Battle['prototype'][_0x16d1ef(0x435)]=function(){const _0x5e7468=_0x16d1ef;return BattleManager[_0x5e7468(0x94a)]();},Scene_Battle[_0x16d1ef(0xa5b)]['callOptions']=function(){const _0x5d7841=_0x16d1ef;this[_0x5d7841(0x3a6)]=![],this[_0x5d7841(0x71a)][_0x5d7841(0x3e1)](),this[_0x5d7841(0x419)][_0x5d7841(0x7f9)]=![];if(BattleManager[_0x5d7841(0x880)]()){if(_0x5d7841(0xab6)!==_0x5d7841(0x1b8))($dataSystem[_0x5d7841(0x972)]||$dataSystem[_0x5d7841(0x283)])&&SceneManager[_0x5d7841(0x713)]();else{_0x2a0a3b[_0x5d7841(0x8c3)]['Window_BattleLog_update'][_0x5d7841(0x2c7)](this);if(this[_0x5d7841(0x6f6)])this['processRefresh']();}}else($gameMap[_0x5d7841(0x972)]()||$gameMap[_0x5d7841(0x283)]())&&SceneManager[_0x5d7841(0x713)]();SceneManager[_0x5d7841(0x8ad)](Scene_Options),BattleManager[_0x5d7841(0x86c)]()&&(_0x5d7841(0x449)==='NgBio'?(_0x3b8e8e['clearForcedGameTroopSettingsBattleCore'](),_0x87ee20[_0x5d7841(0xa88)](_0x58bfd0),_0x1b9821[_0x5d7841(0x8c3)][_0x5d7841(0x79a)][_0x5d7841(0x2c7)](this,_0x1ed5a5)):BattleManager[_0x5d7841(0x881)]=BattleManager[_0x5d7841(0x509)]());},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xad4)]=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xba5)],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xba5)]=function(){const _0x45d6ae=_0x16d1ef;VisuMZ[_0x45d6ae(0x8c3)]['Scene_Battle_updateBattleProcess']['call'](this);if(this[_0x45d6ae(0x3a6)]&&!BattleManager[_0x45d6ae(0x515)])this[_0x45d6ae(0x6af)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x259)]=Scene_Battle[_0x16d1ef(0xa5b)]['update'],Scene_Battle['prototype'][_0x16d1ef(0x3e1)]=function(){const _0x39998a=_0x16d1ef;VisuMZ[_0x39998a(0x8c3)][_0x39998a(0x259)]['call'](this),this[_0x39998a(0xa02)]();},Scene_Battle[_0x16d1ef(0xa5b)]['createAutoBattleWindow']=function(){const _0x2e3cc3=_0x16d1ef,_0x33a5a6=this['autoBattleWindowRect']();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x33a5a6),this[_0x2e3cc3(0x3e4)][_0x2e3cc3(0xba2)](),this[_0x2e3cc3(0x339)](this[_0x2e3cc3(0x3e4)]);},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xb3b)]=function(){const _0x308d0a=_0x16d1ef;return VisuMZ['BattleCore'][_0x308d0a(0x58d)]['AutoBattle'][_0x308d0a(0x5f0)]['call'](this);},Scene_Battle['prototype']['clearOnceParallelInterpreters']=function(){this['_onceParallelInterpreters']=[];},Scene_Battle['prototype'][_0x16d1ef(0xa02)]=function(){const _0x4339a6=_0x16d1ef;if(!this[_0x4339a6(0x994)])return;for(const _0x45949d of this[_0x4339a6(0x994)]){_0x45949d&&_0x45949d[_0x4339a6(0x3e1)]();}},Scene_Battle[_0x16d1ef(0xa5b)]['playOnceParallelInterpreter']=function(_0x5c595b){const _0x3d071e=_0x16d1ef,_0x27c995=$dataCommonEvents[_0x5c595b];if(!_0x27c995)return;const _0x4b6979=new Game_BattleOnceParallelInterpreter();this[_0x3d071e(0x8f0)](_0x4b6979),_0x4b6979[_0x3d071e(0x8a1)](_0x5c595b);},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x8f0)]=function(_0x288f0f){const _0x3e41b9=_0x16d1ef;this[_0x3e41b9(0x994)]=this[_0x3e41b9(0x994)]||[],this[_0x3e41b9(0x994)][_0x3e41b9(0x8ad)](_0x288f0f);},Scene_Battle[_0x16d1ef(0xa5b)]['removeOnceParallelInterpreter']=function(_0x172c04){const _0xe9b9e8=_0x16d1ef;this[_0xe9b9e8(0x994)]=this[_0xe9b9e8(0x994)]||[],this[_0xe9b9e8(0x994)][_0xe9b9e8(0x9ba)](_0x172c04);},Game_Troop['prototype'][_0x16d1ef(0x343)]=function(){const _0x48ab92=_0x16d1ef;for(const _0xc7ded9 of this['troop']()[_0x48ab92(0x7b4)]){if(_0x48ab92(0x6b0)==='ajXOT'){if(!_0x308df6['isPhysical']())return![];if(!_0x52851f[_0x48ab92(0xabd)]())return![];if(!_0x2cf581['isForOpponent']())return![];return _0x99099e[_0x48ab92(0x8c3)][_0x48ab92(0x58d)][_0x48ab92(0x7ec)][_0x48ab92(0x397)];}else{if(!this['doesPageHaveOnceParallelStart'](_0xc7ded9))continue;SceneManager['_scene']['playOnceParallelTroopPage'](_0xc7ded9);}}},Game_Troop[_0x16d1ef(0xa5b)]['doesPageHaveOnceParallelStart']=function(_0x27d1d7){const _0x332fad=_0x16d1ef;if(!_0x27d1d7)return;for(const _0x44d541 of _0x27d1d7[_0x332fad(0x85a)]){if([0x6c,0x198][_0x332fad(0x4f8)](_0x44d541[_0x332fad(0x5b5)])){const _0x1d0e00=_0x44d541[_0x332fad(0x2b8)][0x0];if(_0x1d0e00['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x400)]=function(_0x3ee60e){const _0x253919=_0x16d1ef;if(!_0x3ee60e)return;const _0x29d8f6=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x29d8f6),_0x29d8f6[_0x253919(0xbbf)](_0x3ee60e);};function Game_BattleOnceParallelInterpreter(){const _0x30366d=_0x16d1ef;this[_0x30366d(0x839)](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x16d1ef(0x94e)](Game_Interpreter[_0x16d1ef(0xa5b)]),Game_BattleOnceParallelInterpreter[_0x16d1ef(0xa5b)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x16d1ef(0x8a1)]=function(_0x4ac191){const _0x118dec=_0x16d1ef,_0x2e8000=$dataCommonEvents[_0x4ac191];if(_0x2e8000)this[_0x118dec(0x706)](_0x2e8000[_0x118dec(0x85a)],0x0);else{if(_0x118dec(0x409)!==_0x118dec(0x858))this[_0x118dec(0x97c)]();else{this[_0x118dec(0x8ad)](_0x118dec(0x209),_0x31fbd5);_0x18f50b[_0x118dec(0x8c3)]['Settings'][_0x118dec(0x7ec)][_0x118dec(0x8bb)]&&this[_0x118dec(0x8ad)](_0x118dec(0x8cf),_0x2d61ae,[_0x5ce060[_0x118dec(0x515)]],-0x1);if(!_0x506881['BattleCore'][_0x118dec(0x58d)][_0x118dec(0x591)]['ShowCounter'])return;this[_0x118dec(0x8ad)]('addText',_0x2e11b9[_0x118dec(0x6e1)][_0x118dec(0x86a)](_0x2279ac[_0x118dec(0x8c4)]()));}}},Game_BattleOnceParallelInterpreter['prototype'][_0x16d1ef(0x97c)]=function(){const _0x55460c=_0x16d1ef;if(!SceneManager['isSceneBattle']())return;SceneManager[_0x55460c(0x438)]['removeOnceParallelInterpreter'](this),Game_Interpreter[_0x55460c(0xa5b)]['terminate'][_0x55460c(0x2c7)](this);},Game_BattleOnceParallelInterpreter[_0x16d1ef(0xa5b)][_0x16d1ef(0xbbf)]=function(_0x474039){const _0x2b15a4=_0x16d1ef;_0x474039?this[_0x2b15a4(0x706)](_0x474039['list'],0x0):this[_0x2b15a4(0x97c)]();},Scene_Battle[_0x16d1ef(0xa5b)]['isPartyCommandWindowDisabled']=function(){const _0x499bcf=_0x16d1ef;return VisuMZ['BattleCore'][_0x499bcf(0x58d)][_0x499bcf(0x810)]['DisablePartyCmd'];},VisuMZ['BattleCore'][_0x16d1ef(0x813)]=Scene_Battle[_0x16d1ef(0xa5b)]['startPartyCommandSelection'],Scene_Battle[_0x16d1ef(0xa5b)]['startPartyCommandSelection']=function(){const _0x4eb694=_0x16d1ef;this['isPartyCommandWindowDisabled']()?_0x4eb694(0x791)===_0x4eb694(0x332)?_0x2e72d1=_0x4106d2:this['onDisabledPartyCommandSelection']():VisuMZ['BattleCore']['Scene_Battle_startPartyCommandSelection'][_0x4eb694(0x2c7)](this);},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x664)]=function(){const _0x32d9a0=_0x16d1ef;if(BattleManager['isDTB']())this[_0x32d9a0(0x49e)]();else BattleManager[_0x32d9a0(0x86c)]()&&(_0x32d9a0(0x8d0)!==_0x32d9a0(0x8d0)?this[_0x32d9a0(0x862)](_0x32d9a0(0x763)):VisuMZ[_0x32d9a0(0x8c3)][_0x32d9a0(0x813)][_0x32d9a0(0x2c7)](this));},VisuMZ[_0x16d1ef(0x8c3)]['Scene_Battle_commandFight']=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x792)],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x792)]=function(){const _0x4fdf3b=_0x16d1ef;if(BattleManager[_0x4fdf3b(0x86c)]()){if(_0x4fdf3b(0x1ef)==='sIlzU')return _0x2cee38[_0x4fdf3b(0x267)];else this[_0x4fdf3b(0x389)](),this['startActorCommandSelection']();}else VisuMZ[_0x4fdf3b(0x8c3)][_0x4fdf3b(0xafa)][_0x4fdf3b(0x2c7)](this);},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x389)]=function(){const _0x20aed7=_0x16d1ef;if(!VisuMZ[_0x20aed7(0x8c3)][_0x20aed7(0x705)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager['isCTB']())return;const _0x404281=$gameParty[_0x20aed7(0x888)]()[_0x20aed7(0x787)](_0x454776=>_0x454776[_0x20aed7(0x859)]()&&_0x454776[_0x20aed7(0x42b)]());BattleManager[_0x20aed7(0x3f1)]=_0x404281[0x0]||null,BattleManager[_0x20aed7(0x3f1)]&&BattleManager[_0x20aed7(0x3f1)]['setActionState'](_0x20aed7(0x8a5));},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x8b8)]=Scene_Battle['prototype'][_0x16d1ef(0x978)],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x978)]=function(){const _0x3af804=_0x16d1ef;VisuMZ['BattleCore'][_0x3af804(0x8b8)][_0x3af804(0x2c7)](this),this[_0x3af804(0xb0a)]();},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xb0a)]=function(){const _0x40cdce=_0x16d1ef,_0x4b3578=this[_0x40cdce(0x8ca)];_0x4b3578['setHandler'](_0x40cdce(0x77a),this[_0x40cdce(0x2ab)][_0x40cdce(0x9f7)](this)),_0x4b3578['setHandler'](_0x40cdce(0x3fa),this['actorCommandAutoBattle'][_0x40cdce(0x9f7)](this)),_0x4b3578[_0x40cdce(0x88b)](_0x40cdce(0x6fb),this['actorCommandSingleSkill']['bind'](this));if(BattleManager['isTpb']()){if(_0x40cdce(0x616)===_0x40cdce(0x3e5)){if(!this['canMove']())return;if(_0x21a502<=0x0)return;this[_0x40cdce(0x1e0)]=_0x5d3d28,this[_0x40cdce(0x229)]=_0x1abfd9,this[_0x40cdce(0x3bd)]=_0x4f11e9;}else{if(this['isPartyCommandWindowDisabled']())'pOZKc'===_0x40cdce(0xb47)?delete _0x4b3578[_0x40cdce(0x97a)][_0x40cdce(0x947)]:this['battleStatusWindowAnimationContainer']()[_0x40cdce(0x339)](_0x321613);else{if(_0x40cdce(0x3c5)!==_0x40cdce(0x20a))_0x4b3578[_0x40cdce(0x88b)](_0x40cdce(0x947),this[_0x40cdce(0x6aa)]['bind'](this));else return!![];}}}},Scene_Battle['prototype'][_0x16d1ef(0x2ab)]=function(){const _0x28f93f=_0x16d1ef;this[_0x28f93f(0x309)]();},Scene_Battle['prototype']['actorCommandAutoBattle']=function(){const _0x558c2a=_0x16d1ef;BattleManager['actor']()[_0x558c2a(0x443)](),BattleManager['finishActorInput'](),BattleManager[_0x558c2a(0xb3a)](),this[_0x558c2a(0x9fb)]();},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x585)]=function(){const _0x14caa9=_0x16d1ef,_0x1dea23=BattleManager[_0x14caa9(0x439)]();_0x1dea23[_0x14caa9(0xa90)](this[_0x14caa9(0x8ca)]['currentExt']()),this[_0x14caa9(0x8f3)]();},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x6aa)]=function(){const _0x14ad9a=_0x16d1ef;this[_0x14ad9a(0xbc3)]()?this[_0x14ad9a(0x89e)]():'MoUfG'!==_0x14ad9a(0x2ae)?this[_0x14ad9a(0xb5c)]():this[_0x14ad9a(0x583)]();},VisuMZ[_0x16d1ef(0x8c3)]['TpbActiveChangeEnabled']=![],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xbc3)]=function(){const _0x45a6fe=_0x16d1ef;if(Imported[_0x45a6fe(0xa48)]&&BattleManager[_0x45a6fe(0x5fb)]())return![];else{if(!VisuMZ[_0x45a6fe(0x8c3)][_0x45a6fe(0x705)])return![];const _0x48ef2e=$gameParty[_0x45a6fe(0x888)]()[_0x45a6fe(0x787)](_0x47e41c=>_0x47e41c[_0x45a6fe(0x859)]()&&_0x47e41c[_0x45a6fe(0x42b)]());return _0x48ef2e['length']>0x0&&BattleManager['actor']()!==_0x48ef2e[_0x48ef2e[_0x45a6fe(0xa40)]-0x1];}},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x89e)]=function(){const _0x502429=_0x16d1ef,_0x4ae249=BattleManager[_0x502429(0x509)](),_0x53524c=_0x4ae249['battler']();if(_0x53524c)_0x53524c[_0x502429(0x402)]();const _0x405c9e=$gameParty[_0x502429(0x888)]()['filter'](_0x51d5c8=>_0x51d5c8[_0x502429(0x859)]()&&_0x51d5c8[_0x502429(0x42b)]()),_0x37cb96=_0x405c9e[_0x502429(0x6f3)](_0x4ae249),_0x35ca4f=_0x405c9e[_0x37cb96+0x1];BattleManager[_0x502429(0x3f1)]=_0x35ca4f||null;if(_0x35ca4f)_0x35ca4f[_0x502429(0x345)](_0x502429(0x8a5));_0x4ae249[_0x502429(0x345)]('undecided'),this[_0x502429(0x9fb)]();},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xb5c)]=function(){const _0x55018d=_0x16d1ef;this[_0x55018d(0xb3f)][_0x55018d(0x706)](),this[_0x55018d(0x8ca)][_0x55018d(0x1fb)]();if(!VisuMZ[_0x55018d(0x8c3)]['TpbActiveChangeEnabled'])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x55018d(0x5fb)]())return;if(BattleManager[_0x55018d(0x3f1)]){BattleManager[_0x55018d(0x3f1)][_0x55018d(0x345)](_0x55018d(0x4d5));const _0x3cb082=BattleManager['_currentActor'][_0x55018d(0xb02)]();if(_0x3cb082)_0x3cb082['stepBack']();}BattleManager['_currentActor']=null;},VisuMZ[_0x16d1ef(0x8c3)]['Scene_Battle_createHelpWindow']=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x430)],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x430)]=function(){const _0x43b4be=_0x16d1ef;VisuMZ[_0x43b4be(0x8c3)]['Scene_Battle_createHelpWindow'][_0x43b4be(0x2c7)](this),this[_0x43b4be(0x69c)]();},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x69c)]=function(){const _0x573fe3=_0x16d1ef;this[_0x573fe3(0x8ca)][_0x573fe3(0xa86)](this[_0x573fe3(0x4ed)]),this[_0x573fe3(0xb3f)][_0x573fe3(0xa86)](this['_helpWindow']);},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x88a)]=function(){const _0xb7c760=_0x16d1ef;if($gameTemp[_0xb7c760(0x2e9)]!==undefined){if('ugQPL'===_0xb7c760(0x8a2)){if(_0x498147[_0xb7c760(0x81f)])return![];return _0x92962d[_0xb7c760(0x8c3)][_0xb7c760(0x574)][_0xb7c760(0x2c7)](this);}else return $gameTemp[_0xb7c760(0x2e9)];}if(this[_0xb7c760(0x950)])return this[_0xb7c760(0x950)];this[_0xb7c760(0x950)]=VisuMZ[_0xb7c760(0x8c3)][_0xb7c760(0x58d)][_0xb7c760(0x66d)][_0xb7c760(0xab7)][_0xb7c760(0x1e1)]()[_0xb7c760(0x699)]();if(this[_0xb7c760(0x950)]==='sideview_ui'&&!Imported[_0xb7c760(0x750)]){if(_0xb7c760(0xb8a)!==_0xb7c760(0xb8a)){if(_0x1bda75){const _0x3696d5=_0x2e6e95[_0xb7c760(0x6f3)](_0x2bca33);return _0x3696d5>=0x0?[_0xca90e8[_0x3696d5+0x1]||_0x553e20]:[_0x108c06];}}else this['_battleLayoutStyle']=_0xb7c760(0xa35);}return this[_0xb7c760(0x950)];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x3eb)]=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xb56)],Scene_Battle['prototype'][_0x16d1ef(0xb56)]=function(){const _0x422cdb=_0x16d1ef,_0x447c5c=this[_0x422cdb(0x88a)]();switch(_0x447c5c){case _0x422cdb(0x85a):return this[_0x422cdb(0x773)](Math[_0x422cdb(0x26b)](0x1,$gameParty[_0x422cdb(0x2d1)]()),!![]);break;default:return VisuMZ['BattleCore'][_0x422cdb(0x3eb)]['call'](this);break;}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x788)]=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x1a8)],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x1a8)]=function(){const _0xc92e79=_0x16d1ef,_0x3130b3=this[_0xc92e79(0x88a)]();switch(_0x3130b3){case _0xc92e79(0x6a0):return this[_0xc92e79(0x7a9)]();break;case _0xc92e79(0xa35):case _0xc92e79(0x85a):case'xp':case _0xc92e79(0x7ee):default:return VisuMZ['BattleCore'][_0xc92e79(0x788)][_0xc92e79(0x2c7)](this);break;}},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x741)]=function(){const _0x4b4c41=_0x16d1ef,_0x5dfe13=this['battleLayoutStyle']();switch(_0x5dfe13){case'xp':case _0x4b4c41(0x7ee):return this[_0x4b4c41(0x544)]();break;case _0x4b4c41(0x6a0):return this[_0x4b4c41(0x905)]();break;case _0x4b4c41(0xa35):case'list':default:return this[_0x4b4c41(0x926)]();break;}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x771)]=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x20f)],Scene_Battle['prototype'][_0x16d1ef(0x20f)]=function(){const _0xa01ffe=_0x16d1ef,_0x1ca56f=this[_0xa01ffe(0x88a)]();switch(_0x1ca56f){case'xp':case _0xa01ffe(0x7ee):return this['partyCommandWindowRectXPStyle']();break;case _0xa01ffe(0x6a0):return this[_0xa01ffe(0x417)]();case _0xa01ffe(0xa35):case _0xa01ffe(0x85a):default:return this[_0xa01ffe(0xa9f)]();break;}},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xa9f)]=function(){const _0x569102=_0x16d1ef,_0x2a3940=VisuMZ['BattleCore'][_0x569102(0x58d)][_0x569102(0x66d)],_0x52acf=_0x2a3940['CommandWidth']||0xc0,_0x10856f=this[_0x569102(0xb56)](),_0x2f21b0=this[_0x569102(0x49c)]()?Graphics[_0x569102(0xb26)]-_0x52acf:0x0,_0x3b3b15=Graphics['boxHeight']-_0x10856f;return new Rectangle(_0x2f21b0,_0x3b3b15,_0x52acf,_0x10856f);},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x734)]=function(){const _0x5417b1=_0x16d1ef;return this[_0x5417b1(0x20f)]();},VisuMZ['BattleCore']['Scene_Battle_updateStatusWindowPosition']=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x644)],Scene_Battle['prototype'][_0x16d1ef(0x644)]=function(){const _0x6be84d=_0x16d1ef,_0x1acfa7=this[_0x6be84d(0x88a)]();switch(_0x1acfa7){case'xp':case'portrait':case _0x6be84d(0x6a0):break;case'default':case _0x6be84d(0x85a):default:VisuMZ[_0x6be84d(0x8c3)][_0x6be84d(0x6e3)][_0x6be84d(0x2c7)](this);break;}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x76b)]=Scene_Battle[_0x16d1ef(0xa5b)]['startActorSelection'],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x701)]=function(){const _0x113abf=_0x16d1ef;VisuMZ[_0x113abf(0x8c3)][_0x113abf(0x76b)][_0x113abf(0x2c7)](this),this[_0x113abf(0x2cf)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x73a)]=Scene_Battle[_0x16d1ef(0xa5b)]['startEnemySelection'],Scene_Battle['prototype'][_0x16d1ef(0x14f)]=function(){const _0x414938=_0x16d1ef;VisuMZ[_0x414938(0x8c3)][_0x414938(0x73a)][_0x414938(0x2c7)](this),this[_0x414938(0x8ff)][_0x414938(0x9bc)](),this[_0x414938(0x2cf)]();},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x2cf)]=function(){const _0x4a4f1c=_0x16d1ef,_0x3775ea=this[_0x4a4f1c(0x88a)]();['xp',_0x4a4f1c(0x7ee),'border'][_0x4a4f1c(0x4f8)](_0x3775ea)&&this[_0x4a4f1c(0x8ca)]['close']();if(_0x3775ea===_0x4a4f1c(0x6a0)||this[_0x4a4f1c(0x134)]()){if(_0x4a4f1c(0x52f)==='nGbGh')this[_0x4a4f1c(0x41c)]['close'](),this[_0x4a4f1c(0x1c7)]['close']();else return _0x43bb9e(_0x5ab43f['$2']);}},VisuMZ[_0x16d1ef(0x8c3)]['Scene_Battle_onActorOk']=Scene_Battle[_0x16d1ef(0xa5b)]['onActorOk'],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x47c)]=function(){const _0x4ae588=_0x16d1ef;VisuMZ['BattleCore'][_0x4ae588(0x39b)]['call'](this),this['okTargetSelectionVisibility']();},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x3dc)]=function(){const _0x3ac652=_0x16d1ef;return['attack',_0x3ac652(0xa31),_0x3ac652(0x6fb)][_0x3ac652(0x4f8)](this['_actorCommandWindow'][_0x3ac652(0x37f)]());},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x230)]=Scene_Battle[_0x16d1ef(0xa5b)]['onActorCancel'],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x545)]=function(){const _0x99004e=_0x16d1ef;if(this[_0x99004e(0x3dc)]()){if(_0x99004e(0x1c9)===_0x99004e(0x7d3))return 0x0;else this[_0x99004e(0x2f5)]['show'](),this[_0x99004e(0x169)][_0x99004e(0xba2)](),this[_0x99004e(0x8ca)][_0x99004e(0x9b6)]();}else VisuMZ[_0x99004e(0x8c3)]['Scene_Battle_onActorCancel'][_0x99004e(0x2c7)](this);this[_0x99004e(0x304)]();},VisuMZ[_0x16d1ef(0x8c3)]['Scene_Battle_onEnemyOk']=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x960)],Scene_Battle['prototype'][_0x16d1ef(0x960)]=function(){const _0x10da66=_0x16d1ef;VisuMZ[_0x10da66(0x8c3)]['Scene_Battle_onEnemyOk'][_0x10da66(0x2c7)](this),this['okTargetSelectionVisibility']();},VisuMZ['BattleCore']['Scene_Battle_onEnemyCancel']=Scene_Battle[_0x16d1ef(0xa5b)]['onEnemyCancel'],Scene_Battle[_0x16d1ef(0xa5b)]['onEnemyCancel']=function(){const _0x1b1bae=_0x16d1ef;this[_0x1b1bae(0x3dc)]()?(this[_0x1b1bae(0x2f5)]['show'](),this[_0x1b1bae(0x8ff)][_0x1b1bae(0xba2)](),this[_0x1b1bae(0x8ca)][_0x1b1bae(0x9b6)]()):VisuMZ[_0x1b1bae(0x8c3)]['Scene_Battle_onEnemyCancel']['call'](this),this[_0x1b1bae(0x304)]();},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x6ad)]=function(){const _0x2e9d0f=_0x16d1ef,_0x580386=this[_0x2e9d0f(0x88a)]();(_0x580386===_0x2e9d0f(0x6a0)||this[_0x2e9d0f(0x134)]())&&(_0x2e9d0f(0x2ba)==='zqVhq'?_0x564627[_0x2e9d0f(0x5ab)](_0xa8ae5c[_0x2e9d0f(0x96e)]):(this[_0x2e9d0f(0x41c)][_0x2e9d0f(0xab5)](),this[_0x2e9d0f(0x41c)][_0x2e9d0f(0x29e)]&&this[_0x2e9d0f(0x41c)][_0x2e9d0f(0x1b0)](),this[_0x2e9d0f(0x1c7)][_0x2e9d0f(0xab5)](),this[_0x2e9d0f(0x1c7)][_0x2e9d0f(0x29e)]&&this[_0x2e9d0f(0x1c7)][_0x2e9d0f(0x1b0)]()));},Scene_Battle['prototype'][_0x16d1ef(0x304)]=function(){const _0x273815=_0x16d1ef,_0x330ed0=this[_0x273815(0x88a)]();['xp',_0x273815(0x7ee),_0x273815(0x6a0)]['includes'](_0x330ed0)&&this[_0x273815(0x8ca)][_0x273815(0xab5)](),this[_0x273815(0x6ad)]();},Scene_Battle['prototype'][_0x16d1ef(0x926)]=function(){const _0x2177ab=_0x16d1ef,_0x58d78f=VisuMZ[_0x2177ab(0x8c3)][_0x2177ab(0x58d)][_0x2177ab(0x66d)],_0x5c2635=Window_BattleStatus[_0x2177ab(0xa5b)][_0x2177ab(0x78e)](),_0x49bf2f=Graphics[_0x2177ab(0xb26)]-(_0x58d78f['CommandWidth']||0xc0),_0x1aa428=this[_0x2177ab(0xb56)]()+_0x5c2635,_0x4820ea=this[_0x2177ab(0x49c)]()?0x0:Graphics['boxWidth']-_0x49bf2f,_0x45fcad=Graphics[_0x2177ab(0x6be)]-_0x1aa428+_0x5c2635;return new Rectangle(_0x4820ea,_0x45fcad,_0x49bf2f,_0x1aa428);},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x544)]=function(){const _0x248f78=_0x16d1ef,_0x5cd90e=Window_BattleStatus[_0x248f78(0xa5b)][_0x248f78(0x78e)](),_0x22b4a4=Graphics[_0x248f78(0xb26)],_0x5e639a=this[_0x248f78(0xb56)]()+_0x5cd90e,_0x29f1c9=0x0,_0x797826=Graphics[_0x248f78(0x6be)]-_0x5e639a+_0x5cd90e;return new Rectangle(_0x29f1c9,_0x797826,_0x22b4a4,_0x5e639a);},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x952)]=function(){const _0x4f1c16=_0x16d1ef,_0x33c494=Graphics[_0x4f1c16(0xb26)]/0x2,_0x12c306=this[_0x4f1c16(0x773)](VisuMZ[_0x4f1c16(0x8c3)][_0x4f1c16(0x58d)][_0x4f1c16(0x66d)][_0x4f1c16(0xad7)],!![]),_0x15541b=Math[_0x4f1c16(0x5d9)]((Graphics['boxWidth']-_0x33c494)/0x2),_0x52bb41=Graphics[_0x4f1c16(0x6be)]-_0x12c306-this[_0x4f1c16(0x544)]()[_0x4f1c16(0x842)];return new Rectangle(_0x15541b,_0x52bb41,_0x33c494,_0x12c306);},Scene_Battle['prototype']['helpWindowRectBorderStyle']=function(){const _0x5b2c80=_0x16d1ef,_0x6125f7=Graphics[_0x5b2c80(0x7d5)],_0x3a3099=Math['round']((Graphics[_0x5b2c80(0xb26)]-_0x6125f7)/0x2),_0x2da9fa=this[_0x5b2c80(0x5e8)](),_0x4a15f7=(Graphics['height']-Graphics[_0x5b2c80(0x6be)])/-0x2;return new Rectangle(_0x3a3099,_0x4a15f7,_0x6125f7,_0x2da9fa);},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x905)]=function(){const _0x580a2a=_0x16d1ef,_0x5b83d8=Graphics['width'],_0x2916ad=Math[_0x580a2a(0x5d9)]((Graphics['boxWidth']-_0x5b83d8)/0x2),_0x37016a=this['calcWindowHeight'](0x4,!![]),_0x22cc3e=Graphics[_0x580a2a(0x6be)]-_0x37016a+(Graphics[_0x580a2a(0x842)]-Graphics['boxHeight'])/0x2;return new Rectangle(_0x2916ad,_0x22cc3e,_0x5b83d8,_0x37016a);},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x417)]=function(){const _0xfdb48e=_0x16d1ef,_0x50885a=Math[_0xfdb48e(0x481)](Graphics[_0xfdb48e(0x7d5)]/0x3),_0x1ca579=this[_0xfdb48e(0x49c)]()?(Graphics[_0xfdb48e(0x7d5)]+Graphics[_0xfdb48e(0xb26)])/0x2-_0x50885a:(Graphics['width']-Graphics['boxWidth'])/-0x2,_0x38ea78=this[_0xfdb48e(0x7a9)](),_0x77c33b=_0x38ea78['y']+_0x38ea78[_0xfdb48e(0x842)],_0x47d493=this[_0xfdb48e(0x905)](),_0x163263=_0x47d493['y']-_0x77c33b;return new Rectangle(_0x1ca579,_0x77c33b,_0x50885a,_0x163263);},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x2f1)]=function(){const _0x3d9ffb=_0x16d1ef,_0x2c145a=Math['ceil'](Graphics[_0x3d9ffb(0x7d5)]/0x3),_0x2887eb=Math['round']((Graphics[_0x3d9ffb(0xb26)]-_0x2c145a)/0x2),_0x3eec08=this[_0x3d9ffb(0x417)](),_0x2ae7f4=_0x3eec08['y'],_0x568acf=_0x3eec08[_0x3d9ffb(0x842)];return new Rectangle(_0x2887eb,_0x2ae7f4,_0x2c145a,_0x568acf);},Scene_Battle['prototype'][_0x16d1ef(0x551)]=function(){const _0x31487f=_0x16d1ef;this[_0x31487f(0xaec)]['y']=this[_0x31487f(0x4ed)]['y']+this[_0x31487f(0x4ed)]['height'];if(this['isRightInputMode']()){if(_0x31487f(0x7b5)===_0x31487f(0x681)){const _0x2d83b9=_0x3364af[_0x31487f(0xb02)]();this['push'](_0x31487f(0x360),[_0x3ae155],_0x33998f,_0x33297f),this[_0x31487f(0x8ad)](_0x31487f(0x769),_0x46a31f,_0x2d83b9['_homeX'],_0x2d83b9[_0x31487f(0x9ea)],_0x24dd70,![],_0x31487f(0x56c)),this[_0x31487f(0x8ad)](_0x31487f(0x80f),[_0x5dce43],_0x31487f(0x2b7)),this[_0x31487f(0x8ad)](_0x31487f(0xaa0)),this[_0x31487f(0x8ad)]('requestMotion',[_0x3905d5],_0x31487f(0xb21));}else{if(this[_0x31487f(0x88a)]()===_0x31487f(0x6a0)){if('pmbVh'==='rDZNP')return _0x33051e(_0x227dc5['$1']);else this[_0x31487f(0xaec)]['x']=0x8;}else this['_cancelButton']['x']=-this[_0x31487f(0xaec)]['width']-0x4;}}else this[_0x31487f(0xaec)]['x']=Graphics[_0x31487f(0x7d5)]-(Graphics['width']-Graphics['boxWidth'])/0x2-this[_0x31487f(0xaec)][_0x31487f(0x7d5)]-0x4;},VisuMZ['BattleCore']['Scene_Battle_skillWindowRect']=Scene_Battle['prototype'][_0x16d1ef(0x562)],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x562)]=function(){const _0x1f2a09=_0x16d1ef;if(this[_0x1f2a09(0x88a)]()===_0x1f2a09(0x6a0))return this[_0x1f2a09(0x2f1)]();else{if(this[_0x1f2a09(0x134)]()){if(_0x1f2a09(0x42f)!=='OSthg')_0x4447b2+='\x0a',_0x24093f+=_0xb91e1e[_0x1f2a09(0x2b8)][0x0];else return this[_0x1f2a09(0x803)]();}else{if(_0x1f2a09(0x9dc)===_0x1f2a09(0xb0d)){const _0x224bfe=this[_0x1f2a09(0x30e)][this[_0x1f2a09(0x30e)][_0x1f2a09(0xa40)]-0x1];_0x224bfe&&(_0x5f5579['x']=_0x224bfe['x']+_0x596cc3[_0x1f2a09(0x4f0)]*_0x3ad05b,_0x124b5b['y']=_0x224bfe['y']+_0x32cb9e[_0x1f2a09(0xae6)]);}else return VisuMZ[_0x1f2a09(0x8c3)][_0x1f2a09(0xbaf)][_0x1f2a09(0x2c7)](this);}}},VisuMZ['BattleCore'][_0x16d1ef(0xb3c)]=Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xb6c)],Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xb6c)]=function(){const _0x50bd5b=_0x16d1ef;if(this['battleLayoutStyle']()===_0x50bd5b(0x6a0))return this[_0x50bd5b(0x2f1)]();else{if(this[_0x50bd5b(0x134)]()){if(_0x50bd5b(0x340)!==_0x50bd5b(0x558))return this[_0x50bd5b(0x803)]();else{let _0x5ec8d8=-0x10,_0x51dad2=this[_0x50bd5b(0x842)]*0.5;const _0x484c6d=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0xd50dd7=this[_0x50bd5b(0xa74)][_0x50bd5b(0x84f)]()[_0x50bd5b(0x526)](_0x56fe18=>_0x56fe18&&_0x56fe18[_0x50bd5b(0x954)][_0x50bd5b(0xaf1)](_0x484c6d)?_0x5302e3(_0x5a92d3['$1']):0x0),_0x5dd1b9=this[_0x50bd5b(0xa74)]['traitObjects']()[_0x50bd5b(0x526)](_0x592009=>_0x592009&&_0x592009[_0x50bd5b(0x954)][_0x50bd5b(0xaf1)](_0x484c6d)?_0x79c5d1(_0x40d77f['$2']):0x0);_0x5ec8d8=_0xd50dd7[_0x50bd5b(0x828)]((_0xb92f20,_0x4187d6)=>_0xb92f20+_0x4187d6,_0x5ec8d8),_0x51dad2=_0x5dd1b9[_0x50bd5b(0x828)]((_0x569317,_0x50672f)=>_0x569317+_0x50672f,_0x51dad2),this[_0x50bd5b(0x866)]['x']=_0x5ec8d8,this[_0x50bd5b(0x866)]['y']=_0x51dad2,this[_0x50bd5b(0x866)][_0x50bd5b(0x3e1)]();}}else return VisuMZ[_0x50bd5b(0x8c3)][_0x50bd5b(0xb3c)][_0x50bd5b(0x2c7)](this);}},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x134)]=function(){const _0x416fab=_0x16d1ef;return VisuMZ[_0x416fab(0x8c3)][_0x416fab(0x58d)][_0x416fab(0x66d)][_0x416fab(0x547)];},Scene_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x803)]=function(){const _0x1a7027=_0x16d1ef,_0x596e42=Sprite_Button[_0x1a7027(0xa5b)][_0x1a7027(0x167)]()*0x2+0x4;let _0x267021=Graphics['boxWidth']-_0x596e42;Imported[_0x1a7027(0x6ce)]&&SceneManager[_0x1a7027(0x188)]()&&(_0x267021+=_0x596e42);const _0x594888=this[_0x1a7027(0x3f2)](),_0x2e81b3=Graphics[_0x1a7027(0x6be)]-_0x594888-this[_0x1a7027(0x741)]()[_0x1a7027(0x842)]+Window_BattleStatus['prototype'][_0x1a7027(0x78e)](),_0xe92773=0x0;return new Rectangle(_0xe92773,_0x594888,_0x267021,_0x2e81b3);},Scene_Battle[_0x16d1ef(0xa5b)]['createEnemyNameContainer']=function(){const _0x41649d=_0x16d1ef;if(!VisuMZ['BattleCore'][_0x41649d(0x58d)]['Enemy']['NameLegacy'])return;this[_0x41649d(0x30b)]=new Sprite(),this['_enemyNameContainer']['x']=this[_0x41649d(0x419)]['x'],this['_enemyNameContainer']['y']=this['_windowLayer']['y'];const _0x3b2270=this[_0x41649d(0x4ef)][_0x41649d(0x6f3)](this['_windowLayer']);this[_0x41649d(0x76e)](this[_0x41649d(0x30b)],_0x3b2270);for(let _0x12d7ae=0x0;_0x12d7ae<0x8;_0x12d7ae++){const _0xdcb3c8=new Window_EnemyName(_0x12d7ae);this[_0x41649d(0x30b)]['addChild'](_0xdcb3c8);}},Sprite_Battler[_0x16d1ef(0x267)]=VisuMZ['BattleCore']['Settings']['Actor'][_0x16d1ef(0x43b)],VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x8d4)]=Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x14c)],Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x14c)]=function(){const _0x5a8d5a=_0x16d1ef;VisuMZ[_0x5a8d5a(0x8c3)][_0x5a8d5a(0x8d4)][_0x5a8d5a(0x2c7)](this),this['initMembersBattleCore']();if(this[_0x5a8d5a(0xb30)]===Sprite_Enemy)this[_0x5a8d5a(0x1fd)]();this[_0x5a8d5a(0x970)]();},Sprite_Battler['prototype'][_0x16d1ef(0x872)]=function(){const _0x2b6110=_0x16d1ef;this[_0x2b6110(0x37a)]=0x0,this[_0x2b6110(0xb72)]=0x0,this[_0x2b6110(0x99c)]=0x0,this[_0x2b6110(0x1d6)]=0x0,this[_0x2b6110(0x1e6)]=0x0,this[_0x2b6110(0x130)]=0x0,this[_0x2b6110(0x28c)]=_0x2b6110(0x56c),this['_jumpHeight']=0x0,this['_jumpMaxHeight']=0x0,this[_0x2b6110(0x229)]=0x0,this[_0x2b6110(0x3bd)]=0x0,this[_0x2b6110(0x173)]=0xff,this[_0x2b6110(0xb43)]=0x0,this[_0x2b6110(0x755)]=0x0,this[_0x2b6110(0x676)]=_0x2b6110(0x56c),this['_currentAngle']=0x0,this[_0x2b6110(0x67c)]=0x0,this[_0x2b6110(0x607)]=0x0,this['_angleWholeDuration']=0x0,this[_0x2b6110(0x269)]=_0x2b6110(0x56c),this['_angleRevertOnFinish']=!![],this[_0x2b6110(0xae9)]=0x0,this[_0x2b6110(0x16e)]=0x0,this[_0x2b6110(0xbdd)]=0x0,this[_0x2b6110(0x1ff)]=0x0,this[_0x2b6110(0x81b)]=0x0,this[_0x2b6110(0x1ee)]=0x0,this[_0x2b6110(0x43e)]='Linear',this[_0x2b6110(0x305)]=0x1,this[_0x2b6110(0x815)]=0x1,this[_0x2b6110(0x8e3)]=0x1,this[_0x2b6110(0xaad)]=0x1,this['_growDuration']=0x0,this['_growWholeDuration']=0x0,this[_0x2b6110(0xa04)]=_0x2b6110(0x56c),this['_flipScaleX']=0x1,this[_0x2b6110(0x344)]=0x0,this[_0x2b6110(0xb78)]=0x0,this[_0x2b6110(0x329)]=0x0,this[_0x2b6110(0x70d)]=0x0,this[_0x2b6110(0x376)]=_0x2b6110(0x56c);},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x1fd)]=function(){const _0x48f6f7=_0x16d1ef;this[_0x48f6f7(0x525)]=new Sprite(),this['_shadowSprite']['bitmap']=ImageManager[_0x48f6f7(0x642)](_0x48f6f7(0x3f6)),this[_0x48f6f7(0x525)][_0x48f6f7(0xb74)]['smooth']=VisuMZ[_0x48f6f7(0x8c3)][_0x48f6f7(0x58d)]['Actor'][_0x48f6f7(0x374)],this[_0x48f6f7(0x525)][_0x48f6f7(0x186)]['x']=0.5,this[_0x48f6f7(0x525)][_0x48f6f7(0x186)]['y']=0.5,this[_0x48f6f7(0x525)]['y']=-0x2,this[_0x48f6f7(0x525)]['visible']=![],this['addChild'](this[_0x48f6f7(0x525)]);},Sprite_Battler['prototype'][_0x16d1ef(0x970)]=function(){const _0x12ce29=_0x16d1ef;this[_0x12ce29(0x156)]=new Sprite(),this['_distortionSprite'][_0x12ce29(0x186)]['x']=0.5,this[_0x12ce29(0x156)]['anchor']['y']=0.5,this[_0x12ce29(0x339)](this[_0x12ce29(0x156)]);},Sprite_Battler[_0x16d1ef(0xa5b)]['attachSpritesToDistortionSprite']=function(){const _0x45c58c=_0x16d1ef;if(!this['_distortionSprite'])return;if(this[_0x45c58c(0x525)]){if(_0x45c58c(0x36c)===_0x45c58c(0x84b))_0x5739d6=!_0x197902;else{const _0x5d9705=this[_0x45c58c(0x5b7)](this[_0x45c58c(0x156)]);this[_0x45c58c(0x76e)](this[_0x45c58c(0x525)],_0x5d9705),this[_0x45c58c(0x76c)]();}}this[_0x45c58c(0x955)]&&this[_0x45c58c(0x156)][_0x45c58c(0x339)](this[_0x45c58c(0x955)]);if(this['_weaponSprite']){if('jxJCq'===_0x45c58c(0x42a)){const _0x262043=_0x6b563b['BattleCore'][_0x45c58c(0x846)][_0x102caa],_0x4dc84f={'code':0x2c,'dataId':_0x262043,'value1':0x1,'value2':0x0};_0x14d349[_0x45c58c(0x8c7)][_0x45c58c(0x8ad)](_0x4dc84f);}else this[_0x45c58c(0x156)][_0x45c58c(0x339)](this[_0x45c58c(0x866)]);}this[_0x45c58c(0x959)]&&(_0x45c58c(0x308)===_0x45c58c(0x216)?this[_0x45c58c(0x2e9)]=_0x590c46:this[_0x45c58c(0x156)][_0x45c58c(0x339)](this[_0x45c58c(0x959)]));if(this[_0x45c58c(0x2cb)]){if('rfvIW'!=='rfvIW'){const _0x47e612=this['commandStyle'](),_0x522a96=_0x34f2cd[_0x45c58c(0x8c3)]['Settings'][_0x45c58c(0x810)][_0x45c58c(0x1a6)],_0x33e584=_0x47e612===_0x45c58c(0x980)?_0x376ce0['escape']:_0x45c58c(0x7f7)[_0x45c58c(0x86a)](_0x522a96,_0x1a6a00['escape']),_0x49ea5e=this['isEscapeCommandEnabled']();this['addCommand'](_0x33e584,_0x45c58c(0x77a),_0x49ea5e);}else this[_0x45c58c(0x156)]['addChild'](this[_0x45c58c(0x2cb)]);}},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x76c)]=function(){const _0x332a8b=_0x16d1ef;if(!this[_0x332a8b(0x525)])return;if(this[_0x332a8b(0xa74)]&&this[_0x332a8b(0xa74)][_0x332a8b(0xa34)]()){const _0x196a10=this[_0x332a8b(0x525)][_0x332a8b(0xb74)];this['_shadowSprite'][_0x332a8b(0x38f)](0x0,0x0,_0x196a10[_0x332a8b(0x7d5)],_0x196a10[_0x332a8b(0x842)]);}else this[_0x332a8b(0x525)]['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x73c)]=function(){const _0xf9e692=_0x16d1ef;if(SceneManager[_0xf9e692(0x37d)]())return SceneManager[_0xf9e692(0x438)][_0xf9e692(0x71a)][_0xf9e692(0x476)];else{if(_0xf9e692(0x65b)===_0xf9e692(0x65b))return this[_0xf9e692(0x223)];else this['push']('setActiveWeaponSet',_0x20e330,_0x168774);}},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x9e8)]=function(_0x242971,_0x57784d){const _0x3c9b39=_0x16d1ef;if(!this['_battler'][_0x3c9b39(0x7cb)]())return;const _0x3e65ba=VisuMZ['BattleCore'][_0x3c9b39(0x58d)]['Damage'],_0x103cd0=new Sprite_Damage();_0x103cd0[_0x3c9b39(0x693)]=_0x3e65ba['PopupDuration'],this[_0x3c9b39(0xa2b)](_0x103cd0),_0x103cd0['setupTextPopup'](_0x242971,_0x57784d),this['addDamageSprite'](_0x103cd0);},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xb83)]=function(_0x3a7a4b,_0x313b34,_0x43b83b){const _0x208118=_0x16d1ef;if(!this[_0x208118(0xa74)][_0x208118(0x7cb)]())return;const _0x53b087=VisuMZ['BattleCore']['Settings'][_0x208118(0x6c4)],_0x13a3dc=new Sprite_Damage();_0x13a3dc[_0x208118(0x693)]=_0x53b087[_0x208118(0xa29)],this[_0x208118(0xa2b)](_0x13a3dc),_0x13a3dc[_0x208118(0xb83)](_0x3a7a4b,_0x313b34,_0x43b83b),this['addDamageSprite'](_0x13a3dc);},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x7d1)]=function(){const _0x2e4396=_0x16d1ef;if(!this[_0x2e4396(0xa74)][_0x2e4396(0x4af)]())return;while(this[_0x2e4396(0xa74)][_0x2e4396(0x4af)]()){if(this[_0x2e4396(0xa74)][_0x2e4396(0x7cb)]()){if('UAnAF'!==_0x2e4396(0x353))return _0x51a0de[_0x2e4396(0x8c3)]['Settings']['Actor'][_0x2e4396(0x374)];else this[_0x2e4396(0x227)]();}}this[_0x2e4396(0xa74)][_0x2e4396(0xaa1)](),this[_0x2e4396(0xa74)][_0x2e4396(0x604)]();},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x227)]=function(){const _0xf2dcc0=_0x16d1ef,_0x3f800d=VisuMZ[_0xf2dcc0(0x8c3)]['Settings'][_0xf2dcc0(0x6c4)],_0x2e13f1=new Sprite_Damage();_0x2e13f1[_0xf2dcc0(0x693)]=_0x3f800d['PopupDuration'],this[_0xf2dcc0(0xa2b)](_0x2e13f1),_0x2e13f1[_0xf2dcc0(0x706)](this[_0xf2dcc0(0xa74)]),_0x2e13f1[_0xf2dcc0(0x597)](this[_0xf2dcc0(0xa74)]),this[_0xf2dcc0(0x5bf)](_0x2e13f1);},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x5bf)]=function(_0x403abb){const _0x15abe4=_0x16d1ef;this[_0x15abe4(0x30e)][_0x15abe4(0x8ad)](_0x403abb);if(this[_0x15abe4(0xa8e)]())SceneManager[_0x15abe4(0x438)][_0x15abe4(0x2f5)]['addDamageSprite'](_0x403abb,this[_0x15abe4(0xa74)]);else{this[_0x15abe4(0x73c)]()[_0x15abe4(0x339)](_0x403abb);if(SceneManager[_0x15abe4(0x3a7)]())_0x403abb[_0x15abe4(0x9fa)]['x']=-0x1;}},Sprite_Battler['prototype'][_0x16d1ef(0xa8e)]=function(){const _0x5d9d65=_0x16d1ef;return!$gameSystem[_0x5d9d65(0xb9b)]()&&this[_0x5d9d65(0xa74)]&&this['_battler'][_0x5d9d65(0x71d)]();},Sprite_Battler['prototype'][_0x16d1ef(0xa2b)]=function(_0x58426d){const _0x40ea72=_0x16d1ef;this[_0x40ea72(0x1fa)](_0x58426d,!![]);const _0x194239=VisuMZ[_0x40ea72(0x8c3)][_0x40ea72(0x58d)][_0x40ea72(0x6c4)],_0x1b9d8d=SceneManager[_0x40ea72(0x3a7)]()?-0x1:0x1;if(_0x194239[_0x40ea72(0x166)])for(const _0x3b7a97 of this[_0x40ea72(0x30e)]){_0x3b7a97['x']+=_0x194239[_0x40ea72(0x4f0)]*_0x1b9d8d,_0x3b7a97['y']+=_0x194239['PopupShiftY'];}else{const _0x2415a3=this[_0x40ea72(0x30e)][this['_damages'][_0x40ea72(0xa40)]-0x1];_0x2415a3&&(_0x58426d['x']=_0x2415a3['x']+_0x194239[_0x40ea72(0x4f0)]*_0x1b9d8d,_0x58426d['y']=_0x2415a3['y']+_0x194239[_0x40ea72(0xae6)]);}},Sprite_Battler[_0x16d1ef(0xa5b)]['alignBattleCoreDamageSprite']=function(_0x59e2a0,_0x3f6f70){const _0x31c16a=_0x16d1ef,_0x4d4a66=SceneManager[_0x31c16a(0x3a7)]()?-0x1:0x1;let _0x2f9355=this[_0x31c16a(0x37a)];_0x2f9355+=this[_0x31c16a(0x98e)]();let _0x54ad3d=this[_0x31c16a(0xb72)];const _0x5c022c=this[_0x31c16a(0x156)][_0x31c16a(0x9fa)]['y'];_0x54ad3d+=this['extraPositionY']();const _0xa330a6=SceneManager[_0x31c16a(0x438)][_0x31c16a(0x2f5)];if(_0xa330a6&&this['parent']===_0xa330a6){_0x2f9355+=_0xa330a6['x']-this['damageOffsetX']();const _0x2b8d36=_0xa330a6[_0x31c16a(0x61e)]()*0x3/0x4;_0x54ad3d=_0xa330a6['y']+_0x2b8d36,_0x54ad3d=Math[_0x31c16a(0x457)](_0x54ad3d,_0xa330a6['y']+this['y']-this['height']+_0x2b8d36);}_0x59e2a0['x']=Math['round'](_0x2f9355+this[_0x31c16a(0xbdb)]()*_0x4d4a66),_0x59e2a0['y']=Math[_0x31c16a(0x5d9)](_0x54ad3d+this['damageOffsetY']());},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x6d3)]=Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xbdb)],Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xbdb)]=function(){const _0x68dd0a=_0x16d1ef;let _0x265038=VisuMZ['BattleCore']['Sprite_Battler_damageOffsetX'][_0x68dd0a(0x2c7)](this),_0x129ec5=VisuMZ[_0x68dd0a(0x8c3)][_0x68dd0a(0x58d)][_0x68dd0a(0x6c4)][_0x68dd0a(0x4ae)]||0x0;return Math[_0x68dd0a(0x5d9)](_0x265038+_0x129ec5);},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_Battler_damageOffsetY']=Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x97b)],Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x97b)]=function(){const _0x2a0458=_0x16d1ef;let _0x23b360=VisuMZ[_0x2a0458(0x8c3)][_0x2a0458(0x193)][_0x2a0458(0x2c7)](this);switch(VisuMZ[_0x2a0458(0x8c3)][_0x2a0458(0x58d)][_0x2a0458(0x6c4)][_0x2a0458(0x7e7)]){case _0x2a0458(0x835):_0x23b360-=this[_0x2a0458(0x842)]*this[_0x2a0458(0x9fa)]['y'];break;case _0x2a0458(0x4a0):_0x23b360-=this[_0x2a0458(0x842)]*this[_0x2a0458(0x9fa)]['y']*0.5;break;}let _0x4ba802=VisuMZ[_0x2a0458(0x8c3)][_0x2a0458(0x58d)][_0x2a0458(0x6c4)][_0x2a0458(0x1b6)]||0x0;return Math[_0x2a0458(0x5d9)](_0x23b360+_0x4ba802);},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0xbdb)]=function(){const _0x42093c=_0x16d1ef;return Sprite_Battler[_0x42093c(0xa5b)]['damageOffsetX'][_0x42093c(0x2c7)](this);},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x97b)]=function(){const _0x5daab2=_0x16d1ef;return Sprite_Battler[_0x5daab2(0xa5b)][_0x5daab2(0x97b)][_0x5daab2(0x2c7)](this);},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xb8c)]=function(_0x503f5f){const _0x2e55da=_0x16d1ef;this['isShownOnBattlePortrait']()?_0x2e55da(0x7e4)!==_0x2e55da(0x7e4)?this[_0x2e55da(0xb74)]=new _0x46a44b(_0x226bad[_0x2e55da(0x7d5)],_0x3fb8c5[_0x2e55da(0x842)]):SceneManager[_0x2e55da(0x438)][_0x2e55da(0x2f5)][_0x2e55da(0x5c5)](_0x503f5f):(this[_0x2e55da(0x73c)]()['removeChild'](_0x503f5f),this[_0x2e55da(0x30e)]['remove'](_0x503f5f),_0x503f5f['destroy']());},VisuMZ['BattleCore'][_0x16d1ef(0x2e8)]=Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xbae)],Sprite_Battler[_0x16d1ef(0xa5b)]['setHome']=function(_0xa0e7bc,_0x2e2ce7){const _0x5d6bcf=_0x16d1ef,_0x471ddb=VisuMZ[_0x5d6bcf(0x8c3)][_0x5d6bcf(0x58d)];if(this['constructor']===Sprite_Actor)_0xa0e7bc+=_0x471ddb[_0x5d6bcf(0x65f)][_0x5d6bcf(0x2ff)]||0x0,_0x2e2ce7+=_0x471ddb[_0x5d6bcf(0x65f)]['OffsetY']||0x0;else{if(this[_0x5d6bcf(0xb30)]===Sprite_Enemy){if(_0x5d6bcf(0x72d)!==_0x5d6bcf(0x72d))return _0x378054[_0x5d6bcf(0x8c3)][_0x5d6bcf(0x21b)][_0x5d6bcf(0x2c7)](this);else _0xa0e7bc+=_0x471ddb[_0x5d6bcf(0xb6b)][_0x5d6bcf(0x2ff)]||0x0,_0x2e2ce7+=_0x471ddb[_0x5d6bcf(0xb6b)][_0x5d6bcf(0x91f)]||0x0;}}this[_0x5d6bcf(0xa74)]&&(_0xa0e7bc=this[_0x5d6bcf(0xa74)]['_forcedHomeX']??_0xa0e7bc,_0x2e2ce7=this[_0x5d6bcf(0xa74)][_0x5d6bcf(0x58e)]??_0x2e2ce7),VisuMZ[_0x5d6bcf(0x8c3)][_0x5d6bcf(0x2e8)]['call'](this,_0xa0e7bc,_0x2e2ce7),this[_0x5d6bcf(0x344)]=this[_0x5d6bcf(0x953)],this[_0x5d6bcf(0xb78)]=this[_0x5d6bcf(0x9ea)],this[_0x5d6bcf(0x329)]=0x0,this[_0x5d6bcf(0x70d)]=0x0,this[_0x5d6bcf(0x376)]=_0x5d6bcf(0x56c);},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_Battler_update']=Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x3e1)],Sprite_Battler['prototype'][_0x16d1ef(0x3e1)]=function(){const _0x459630=_0x16d1ef;VisuMZ[_0x459630(0x8c3)]['Sprite_Battler_update'][_0x459630(0x2c7)](this),!this[_0x459630(0xa74)]&&this[_0x459630(0xb76)]&&(this[_0x459630(0xb76)]['visible']=![]);},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x79c)],Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x79c)]=function(){const _0x3024e5=_0x16d1ef;this['updateScale'](),this[_0x3024e5(0x18d)](),this[_0x3024e5(0x3b8)](),this[_0x3024e5(0xa59)](),this[_0x3024e5(0x7c4)](),VisuMZ[_0x3024e5(0x8c3)]['Sprite_Battler_updateMain'][_0x3024e5(0x2c7)](this);if(this[_0x3024e5(0xb30)]===Sprite_Enemy)this[_0x3024e5(0x4d1)]();},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_Battler_updatePosition']=Sprite_Battler['prototype'][_0x16d1ef(0x2a2)],Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x2a2)]=function(){const _0xa5a939=_0x16d1ef;this[_0xa5a939(0x9d9)](),VisuMZ['BattleCore']['Sprite_Battler_updatePosition'][_0xa5a939(0x2c7)](this),this[_0xa5a939(0x5ee)](),this['updateOpacity']();},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x415)]=function(_0xe49fe7,_0x230650,_0x5bb715,_0x4f68cd){const _0x1fd722=_0x16d1ef;(this[_0x1fd722(0x344)]!==_0xe49fe7||this[_0x1fd722(0xb78)]!==_0x230650)&&(this[_0x1fd722(0x344)]=_0xe49fe7,this[_0x1fd722(0xb78)]=_0x230650,this[_0x1fd722(0x329)]=_0x5bb715,this[_0x1fd722(0x70d)]=_0x5bb715,this[_0x1fd722(0x376)]=_0x4f68cd,_0x5bb715<=0x0&&(_0x1fd722(0x6dc)!==_0x1fd722(0x6dc)?_0x1645cf[_0x1fd722(0x8ad)]('applyImmortal',_0x4084ab,_0x16eda1,!![]):this[_0x1fd722(0x99b)]()));},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x9d9)]=function(){const _0x81c8fb=_0x16d1ef;if(this[_0x81c8fb(0x329)]<=0x0)return;const _0x53a998=this['_homeDuration'],_0x254324=this[_0x81c8fb(0x70d)],_0x58f68a=this[_0x81c8fb(0x376)];Imported[_0x81c8fb(0x6ce)]?_0x81c8fb(0x711)!=='uqzmr'?this[_0x81c8fb(0x862)](_0x81c8fb(0xa31)):(this[_0x81c8fb(0x953)]=this[_0x81c8fb(0x592)](this[_0x81c8fb(0x953)],this['_targetHomeX'],_0x53a998,_0x254324,_0x58f68a),this[_0x81c8fb(0x9ea)]=this['applyEasing'](this[_0x81c8fb(0x9ea)],this['_targetHomeY'],_0x53a998,_0x254324,_0x58f68a)):_0x81c8fb(0x3ff)!==_0x81c8fb(0x3ff)?this['_cancelButton']['x']=-this[_0x81c8fb(0xaec)]['width']-0x4:(this[_0x81c8fb(0x953)]=(this[_0x81c8fb(0x953)]*(_0x53a998-0x1)+this[_0x81c8fb(0x344)])/_0x53a998,this[_0x81c8fb(0x9ea)]=(this[_0x81c8fb(0x9ea)]*(_0x53a998-0x1)+this['_targetHomeY'])/_0x53a998);this[_0x81c8fb(0x329)]--;if(this[_0x81c8fb(0x329)]<=0x0)this['onHomeMoveEnd']();},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x99b)]=function(){const _0x22c695=_0x16d1ef;this['_homeX']=this[_0x22c695(0x344)],this['_homeY']=this['_targetHomeY'];},Sprite_Battler['prototype'][_0x16d1ef(0x5ee)]=function(){const _0x51b765=_0x16d1ef;this[_0x51b765(0x37a)]=this['x'],this['_baseY']=this['y'],this[_0x51b765(0x277)](),this['updateJump'](),this['x']+=this[_0x51b765(0x98e)](),this['y']+=this[_0x51b765(0x284)](),this['y']+=this['extraPositionScaledY'](),this['x']=Math[_0x51b765(0x481)](this['x']),this['y']=Math[_0x51b765(0x481)](this['y']);},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x98e)]=function(){let _0x167c61=0x0;return _0x167c61;},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x284)]=function(){const _0xbef6b7=_0x16d1ef;let _0x105f45=0x0;if(this[_0xbef6b7(0xa74)]&&!this['_battler'][_0xbef6b7(0x5f8)]()){if(_0xbef6b7(0x464)===_0xbef6b7(0x464))_0x105f45-=this[_0xbef6b7(0x99c)],_0x105f45-=this[_0xbef6b7(0x6d0)];else return!![];}return _0x105f45;},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x77f)]=function(){const _0x511bc2=_0x16d1ef;let _0x228f09=0x0;if(this[_0x511bc2(0x156)]&&this['constructor']!==Sprite_SvEnemy){const _0x5bec5e=this[_0x511bc2(0x156)][_0x511bc2(0x9fa)]['y'];_0x228f09-=(_0x5bec5e-0x1)*this['height'];}return _0x228f09;},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xa59)]=function(){const _0x7435f6=_0x16d1ef,_0xe3dc5f=this['_battler']&&this[_0x7435f6(0xa74)][_0x7435f6(0x4ea)]();this['_flipScaleX']=(_0xe3dc5f?-0x1:0x1)*Math['abs'](this[_0x7435f6(0x9fa)]['x']);},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x378)]=function(_0x1eee8e,_0x287e6c,_0x242d6d){const _0x5c677a=_0x16d1ef;if(!this[_0x5c677a(0x2bf)]())return;if(this[_0x5c677a(0x1d6)]===_0x1eee8e)return;this['_targetFloatHeight']=_0x1eee8e,this[_0x5c677a(0x1e6)]=_0x287e6c,this[_0x5c677a(0x130)]=_0x287e6c,this[_0x5c677a(0x28c)]=_0x242d6d||_0x5c677a(0x56c);if(_0x287e6c<=0x0)this[_0x5c677a(0x99c)]=_0x1eee8e;},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x277)]=function(){const _0x2c68ba=_0x16d1ef;if(this[_0x2c68ba(0x1e6)]<=0x0)return;const _0x526316=this['_floatDuration'],_0x39ca83=this[_0x2c68ba(0x130)],_0x35b1d8=this[_0x2c68ba(0x28c)];Imported['VisuMZ_0_CoreEngine']?this[_0x2c68ba(0x99c)]=this[_0x2c68ba(0x592)](this['_floatHeight'],this['_targetFloatHeight'],_0x526316,_0x39ca83,_0x35b1d8):this[_0x2c68ba(0x99c)]=(this['_floatHeight']*(_0x526316-0x1)+this['_targetFloatHeight'])/_0x526316;this[_0x2c68ba(0x1e6)]--;if(this[_0x2c68ba(0x1e6)]<=0x0)this[_0x2c68ba(0x272)]();},Sprite_Battler[_0x16d1ef(0xa5b)]['onFloatEnd']=function(){const _0x25bcca=_0x16d1ef;this[_0x25bcca(0x99c)]=this[_0x25bcca(0x1d6)];},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x28f)]=function(){const _0x45dc45=_0x16d1ef;return this[_0x45dc45(0x1e6)]>0x0;},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x165)]=function(_0x2a311a,_0x1639c2){const _0x1c0d3e=_0x16d1ef;if(!this['canMove']())return;if(_0x1639c2<=0x0)return;this[_0x1c0d3e(0x1e0)]=_0x2a311a,this[_0x1c0d3e(0x229)]=_0x1639c2,this['_jumpWholeDuration']=_0x1639c2;},Sprite_Battler[_0x16d1ef(0xa5b)]['updateJump']=function(){const _0x180e67=_0x16d1ef;if(this[_0x180e67(0x229)]<=0x0)return;const _0x4dd9c3=this[_0x180e67(0x3bd)]-this[_0x180e67(0x229)],_0x4204b9=this[_0x180e67(0x3bd)]/0x2,_0x3b2f21=this[_0x180e67(0x1e0)],_0x450d18=-_0x3b2f21/Math[_0x180e67(0x42e)](_0x4204b9,0x2);this[_0x180e67(0x6d0)]=_0x450d18*Math[_0x180e67(0x42e)](_0x4dd9c3-_0x4204b9,0x2)+_0x3b2f21,this[_0x180e67(0x229)]--;if(this[_0x180e67(0x229)]<=0x0)return this['onJumpEnd']();},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x3a2)]=function(){const _0x52d648=_0x16d1ef;this[_0x52d648(0x6d0)]=0x0;},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x76f)]=function(){return this['_jumpDuration']>0x0;},Sprite_Battler['prototype']['startOpacity']=function(_0x4c49e1,_0x373425,_0x2c383c){const _0x54fc4e=_0x16d1ef;if(this[_0x54fc4e(0x173)]===_0x4c49e1)return;this[_0x54fc4e(0x173)]=_0x4c49e1,this[_0x54fc4e(0xb43)]=_0x373425,this[_0x54fc4e(0x755)]=_0x373425,this[_0x54fc4e(0x676)]=_0x2c383c||_0x54fc4e(0x56c);if(_0x373425<=0x0)this['opacity']=_0x4c49e1;},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xaa4)]=function(){const _0x340bea=_0x16d1ef;if(this['constructor'][_0x340bea(0x8c4)]===_0x340bea(0x5f2))return;if(this['_opacityDuration']<=0x0)return;const _0x355b9e=this['_opacityDuration'],_0x1f5595=this[_0x340bea(0x755)],_0x94524b=this[_0x340bea(0x676)];if(Imported[_0x340bea(0x6ce)]){if('IjFmV'!==_0x340bea(0x32f))this[_0x340bea(0x981)]=this['applyEasing'](this['opacity'],this[_0x340bea(0x173)],_0x355b9e,_0x1f5595,_0x94524b);else{const _0x26bc4d=_0x4b0f85[_0x340bea(0x8c3)][_0x340bea(0x58d)];if(this[_0x340bea(0xb30)]===_0x14365b)_0x55c77a+=_0x26bc4d[_0x340bea(0x65f)][_0x340bea(0x2ff)]||0x0,_0x5d626a+=_0x26bc4d['Actor'][_0x340bea(0x91f)]||0x0;else this[_0x340bea(0xb30)]===_0x109c40&&(_0x581831+=_0x26bc4d[_0x340bea(0xb6b)][_0x340bea(0x2ff)]||0x0,_0x524b04+=_0x26bc4d['Enemy'][_0x340bea(0x91f)]||0x0);this[_0x340bea(0xa74)]&&(_0xf97ad0=this['_battler'][_0x340bea(0x83a)]??_0x4c2f76,_0x29232e=this[_0x340bea(0xa74)][_0x340bea(0x58e)]??_0x3e29a7),_0x174b69[_0x340bea(0x8c3)][_0x340bea(0x2e8)][_0x340bea(0x2c7)](this,_0x141db1,_0x1ec0a3),this[_0x340bea(0x344)]=this['_homeX'],this['_targetHomeY']=this[_0x340bea(0x9ea)],this[_0x340bea(0x329)]=0x0,this[_0x340bea(0x70d)]=0x0,this[_0x340bea(0x376)]=_0x340bea(0x56c);}}else this[_0x340bea(0x981)]=(this[_0x340bea(0x981)]*(_0x355b9e-0x1)+this[_0x340bea(0x173)])/_0x355b9e;this[_0x340bea(0xb43)]--;if(this[_0x340bea(0xb43)]<=0x0)this[_0x340bea(0x841)]();},Sprite_Battler['prototype'][_0x16d1ef(0x841)]=function(){const _0x1f2c53=_0x16d1ef;this[_0x1f2c53(0x981)]=this[_0x1f2c53(0x173)];},Sprite_Battler[_0x16d1ef(0xa5b)]['isChangingOpacity']=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x16d1ef(0xa5b)]['updateShadow']=function(){const _0x2b59df=_0x16d1ef;this[_0x2b59df(0x525)]['visible']=this['_battler'][_0x2b59df(0x649)](),this[_0x2b59df(0x1ea)]();},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x1ea)]=function(){const _0x4fcec5=_0x16d1ef;if(!this[_0x4fcec5(0x525)])return;this[_0x4fcec5(0x525)]['y']=this[_0x4fcec5(0xb72)]-this['y']-0x2;},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xab4)]=function(){const _0x27983e=_0x16d1ef;if(!this['_battler'])return;this[_0x27983e(0x46a)]=this[_0x27983e(0xa74)][_0x27983e(0x1c6)](),this['_shadowScaleY']=this[_0x27983e(0xa74)][_0x27983e(0x79f)]();},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x1c6)]=function(){const _0x2c08bc=_0x16d1ef,_0x43b9d0=this[_0x2c08bc(0x71d)]()?this[_0x2c08bc(0x509)]():this[_0x2c08bc(0x336)]();if(_0x43b9d0){if(_0x2c08bc(0x2cd)===_0x2c08bc(0x2cd)){const _0x30fb93=_0x43b9d0[_0x2c08bc(0x954)];if(_0x30fb93[_0x2c08bc(0xaf1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x30fb93[_0x2c08bc(0xaf1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}else this[_0x2c08bc(0x552)]();}return 0x1;},Game_BattlerBase[_0x16d1ef(0xa5b)][_0x16d1ef(0x79f)]=function(){const _0x5ee484=_0x16d1ef,_0x19a0f9=this[_0x5ee484(0x71d)]()?this[_0x5ee484(0x509)]():this['enemy']();if(_0x19a0f9){const _0x271b4a=_0x19a0f9[_0x5ee484(0x954)];if(_0x271b4a['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x271b4a[_0x5ee484(0xaf1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i)){if('gEfPA'!==_0x5ee484(0x1ec))_0x3f1d23[_0x5ee484(0x4bf)]=!![],this['makeSuccess'](_0x3e3249);else return Number(RegExp['$1'])||0x0;}}}return 0x1;},Sprite_Battler[_0x16d1ef(0xa5b)]['updateScale']=function(){const _0x530f31=_0x16d1ef;if(this[_0x530f31(0xb30)]===Sprite_SvEnemy)return;this[_0x530f31(0x8c8)](),this[_0x530f31(0xb4e)]();},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xb4e)]=function(){const _0x464cc1=_0x16d1ef,_0x27b22a=this[_0x464cc1(0x156)];_0x27b22a&&(_0x27b22a[_0x464cc1(0x9fa)]['x']=this[_0x464cc1(0x9ac)](),_0x27b22a['scale']['y']=this[_0x464cc1(0x9a5)]());},Sprite_Battler[_0x16d1ef(0xa5b)]['mainSpriteScaleX']=function(){const _0x11b557=_0x16d1ef;let _0x35d8cc=0x1;return _0x35d8cc*=this[_0x11b557(0xaf7)],_0x35d8cc*=this['_growX'],_0x35d8cc;},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x9a5)]=function(){return 0x1*this['_growY'];},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x753)]=function(){const _0x405f05=_0x16d1ef;return this[_0x405f05(0x7d5)]*this[_0x405f05(0x9ac)]();},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x584)]=function(){const _0x194bf7=_0x16d1ef;return this[_0x194bf7(0x842)]*this['mainSpriteScaleY']();},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x64d)]=function(_0x294c9f,_0x20d45c,_0x10801b,_0x49d4a7){const _0x3fcc1f=_0x16d1ef;if(!this[_0x3fcc1f(0x2bf)]())return;if(!this[_0x3fcc1f(0x156)])return;if(this[_0x3fcc1f(0x8e3)]===_0x294c9f&&this[_0x3fcc1f(0xaad)]===_0x20d45c)return;this[_0x3fcc1f(0x8e3)]=_0x294c9f,this[_0x3fcc1f(0xaad)]=_0x20d45c,this[_0x3fcc1f(0x3c1)]=_0x10801b,this[_0x3fcc1f(0x7c9)]=_0x10801b,this[_0x3fcc1f(0xa04)]=_0x49d4a7||_0x3fcc1f(0x56c),_0x10801b<=0x0&&(this[_0x3fcc1f(0x305)]=this['_targetGrowX'],this[_0x3fcc1f(0x815)]=this[_0x3fcc1f(0xaad)]);},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x8c8)]=function(){const _0x837597=_0x16d1ef;if(this[_0x837597(0x3c1)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x24ec84=this[_0x837597(0x3c1)],_0x2b3587=this['_growWholeDuration'],_0x38ba12=this['_growEasing'];Imported[_0x837597(0x6ce)]?(this['_growX']=this['applyEasing'](this[_0x837597(0x305)],this[_0x837597(0x8e3)],_0x24ec84,_0x2b3587,_0x38ba12),this[_0x837597(0x815)]=this[_0x837597(0x592)](this[_0x837597(0x815)],this[_0x837597(0xaad)],_0x24ec84,_0x2b3587,_0x38ba12)):(this['_growX']=(this[_0x837597(0x305)]*(_0x24ec84-0x1)+this[_0x837597(0x8e3)])/_0x24ec84,this['_growY']=(this[_0x837597(0x815)]*(_0x24ec84-0x1)+this[_0x837597(0xaad)])/_0x24ec84);this[_0x837597(0x3c1)]--;if(this['_growDuration']<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x5a1)]=function(){const _0x2c437=_0x16d1ef;this['_growX']=this[_0x2c437(0x8e3)],this[_0x2c437(0x815)]=this['_targetGrowY'];},Sprite_Battler['prototype'][_0x16d1ef(0x200)]=function(){const _0x358c56=_0x16d1ef;return this[_0x358c56(0x3c1)]>0x0;},Sprite_Battler['prototype'][_0x16d1ef(0x358)]=function(_0x133b88,_0x1ac1c8,_0x4560b2,_0x3157a1){const _0x3b2d3f=_0x16d1ef;if(!this[_0x3b2d3f(0x2bf)]())return;if(!this[_0x3b2d3f(0x156)])return;if(this[_0x3b2d3f(0xbdd)]===_0x133b88&&this[_0x3b2d3f(0x1ff)]===_0x1ac1c8)return;this[_0x3b2d3f(0xbdd)]=_0x133b88,this['_targetSkewY']=_0x1ac1c8,this[_0x3b2d3f(0x81b)]=_0x4560b2,this['_skewWholeDuration']=_0x4560b2,this[_0x3b2d3f(0x43e)]=_0x3157a1||_0x3b2d3f(0x56c),_0x4560b2<=0x0&&(this['_distortionSprite']['skew']['x']=this[_0x3b2d3f(0xbdd)],this[_0x3b2d3f(0x156)][_0x3b2d3f(0x7d0)]['y']=this['_targetSkewY']);},Sprite_Battler[_0x16d1ef(0xa5b)]['updateSkew']=function(){const _0x5bca44=_0x16d1ef;if(this[_0x5bca44(0x81b)]<=0x0)return;if(!this[_0x5bca44(0x156)])return;const _0xece5e2=this[_0x5bca44(0x81b)],_0x3c3804=this[_0x5bca44(0x1ee)],_0x25b2fd=this[_0x5bca44(0x43e)],_0xc76caf=this[_0x5bca44(0x156)];Imported[_0x5bca44(0x6ce)]?_0x5bca44(0x752)===_0x5bca44(0x752)?(_0xc76caf[_0x5bca44(0x7d0)]['x']=this[_0x5bca44(0x592)](_0xc76caf['skew']['x'],this[_0x5bca44(0xbdd)],_0xece5e2,_0x3c3804,_0x25b2fd),_0xc76caf[_0x5bca44(0x7d0)]['y']=this[_0x5bca44(0x592)](_0xc76caf[_0x5bca44(0x7d0)]['y'],this['_targetSkewY'],_0xece5e2,_0x3c3804,_0x25b2fd)):(this['_frontAttachmentSprite']&&this[_0x5bca44(0x339)](this[_0x5bca44(0x5da)]),this[_0x5bca44(0x73d)]&&this[_0x5bca44(0xab3)](this['_backAttachmentSprite'])):(_0xc76caf[_0x5bca44(0x7d0)]['x']=(_0xc76caf[_0x5bca44(0x7d0)]['x']*(_0xece5e2-0x1)+this[_0x5bca44(0xbdd)])/_0xece5e2,_0xc76caf[_0x5bca44(0x7d0)]['y']=(_0xc76caf[_0x5bca44(0x7d0)]['y']*(_0xece5e2-0x1)+this['_targetSkewY'])/_0xece5e2);this[_0x5bca44(0x81b)]--;if(this[_0x5bca44(0x81b)]<=0x0)this[_0x5bca44(0xb20)]();},Sprite_Battler['prototype'][_0x16d1ef(0xb20)]=function(){const _0xe321cc=_0x16d1ef;this[_0xe321cc(0x156)][_0xe321cc(0x7d0)]['x']=this[_0xe321cc(0xbdd)],this[_0xe321cc(0x156)][_0xe321cc(0x7d0)]['y']=this['_targetSkewY'];},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x294)]=function(){return this['_skewDuration']>0x0;},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x796)]=function(_0x2b75c7,_0x5b8e8a,_0xf36ee2,_0xafaa44){const _0x4ab728=_0x16d1ef;if(!this['canMove']())return;if(!this[_0x4ab728(0x156)])return;if(this[_0x4ab728(0x67c)]===_0x2b75c7)return;this[_0x4ab728(0x67c)]=_0x2b75c7,this[_0x4ab728(0x607)]=_0x5b8e8a,this[_0x4ab728(0x13e)]=_0x5b8e8a,this[_0x4ab728(0x269)]=_0xf36ee2||_0x4ab728(0x56c),this['_angleRevertOnFinish']=_0xafaa44;if(this[_0x4ab728(0x4b1)]===undefined){if(_0x4ab728(0x704)!==_0x4ab728(0x704)){if(_0x46debc[_0x4ab728(0x3c0)]())return![];}else this['_angleRevertOnFinish']=!![];}if(_0x5b8e8a<=0x0){this['_currentAngle']=_0x2b75c7;if(this[_0x4ab728(0x4b1)]){if(_0x4ab728(0xb36)!==_0x4ab728(0xb36)){const _0x1c3838=this[_0x4ab728(0x88a)]();['xp',_0x4ab728(0x7ee),'border'][_0x4ab728(0x4f8)](_0x1c3838)&&this[_0x4ab728(0x8ca)][_0x4ab728(0x1fb)](),(_0x1c3838===_0x4ab728(0x6a0)||this[_0x4ab728(0x134)]())&&(this[_0x4ab728(0x41c)][_0x4ab728(0x1fb)](),this['_itemWindow'][_0x4ab728(0x1fb)]());}else this[_0x4ab728(0x67c)]=0x0,this['_currentAngle']=0x0;}}},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x3b8)]=function(){const _0x5d2597=_0x16d1ef;this[_0x5d2597(0x84e)](),this[_0x5d2597(0x31b)]();},Sprite_Battler['prototype']['updateAngleCalculations']=function(){const _0x4557df=_0x16d1ef;if(this[_0x4557df(0x607)]<=0x0)return;const _0x36847b=this[_0x4557df(0x607)],_0x1a96a8=this[_0x4557df(0x13e)],_0xcda208=this['_angleEasing'];if(Imported[_0x4557df(0x6ce)]){if('lOYdF'==='CRPdE')return _0x5959bd(_0x41e006['$1'])||0x0;else this[_0x4557df(0x2dc)]=this['applyEasing'](this[_0x4557df(0x2dc)],this[_0x4557df(0x67c)],_0x36847b,_0x1a96a8,_0xcda208);}else this[_0x4557df(0x2dc)]=(this[_0x4557df(0x2dc)]*(_0x36847b-0x1)+this['_targetAngle'])/_0x36847b;this[_0x4557df(0x607)]--;if(this[_0x4557df(0x607)]<=0x0)this[_0x4557df(0xa89)]();},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xa89)]=function(){const _0xfa6042=_0x16d1ef;this[_0xfa6042(0x2dc)]=this[_0xfa6042(0x67c)];if(this['_angleRevertOnFinish']){if(_0xfa6042(0x8f1)==='mEXRJ')this[_0xfa6042(0x67c)]=0x0,this[_0xfa6042(0x2dc)]=0x0;else{let _0x50019d=0x1;return _0x50019d*=this['_flipScaleX'],_0x50019d*=this[_0xfa6042(0x305)],_0x50019d;}}},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x2fd)]=function(){const _0x30a82e=_0x16d1ef;return this[_0x30a82e(0x607)]>0x0;},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x31b)]=function(){const _0x12cc6d=_0x16d1ef;if(!this[_0x12cc6d(0x156)])return;const _0x45bcdf=this[_0x12cc6d(0x2dc)],_0x42a600=this['scale']['x'],_0xbb8856=this[_0x12cc6d(0xa74)]['isActor']()?-0x1:0x1;this[_0x12cc6d(0x156)][_0x12cc6d(0x1d1)]=_0x45bcdf*_0x42a600*_0xbb8856;const _0x31d490=this[_0x12cc6d(0x156)][_0x12cc6d(0x9fa)]['y'];this[_0x12cc6d(0x156)]['y']=this[_0x12cc6d(0x842)]*-0.5*(0x2-_0x31d490),this['_distortionSprite']['y']=Math[_0x12cc6d(0xa1b)](this[_0x12cc6d(0x156)]['y']);const _0x38af69=[this[_0x12cc6d(0x959)],this[_0x12cc6d(0x955)],this[_0x12cc6d(0x2cb)]];for(const _0xbb2885 of _0x38af69){if(!_0xbb2885)continue;_0xbb2885['y']=this[_0x12cc6d(0x842)]*0.5;}this['_shadowSprite']&&(_0x12cc6d(0x5db)!=='bdZka'?this['isTpb']()?this[_0x12cc6d(0xb28)]():_0x33570f[_0x12cc6d(0x8c3)][_0x12cc6d(0x7c1)][_0x12cc6d(0x2c7)](this):(this[_0x12cc6d(0x46a)]=this[_0x12cc6d(0x46a)]??0x1,this[_0x12cc6d(0x474)]=this['_shadowScaleY']??0x1,this[_0x12cc6d(0x525)][_0x12cc6d(0x9fa)]['x']=this[_0x12cc6d(0x156)][_0x12cc6d(0x9fa)]['x']*this['_shadowScaleX'],this['_shadowSprite'][_0x12cc6d(0x9fa)]['y']=this['_distortionSprite'][_0x12cc6d(0x9fa)]['y']*this['_shadowScaleY']));},VisuMZ['BattleCore'][_0x16d1ef(0x152)]=Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x4e9)],Sprite_Actor['prototype'][_0x16d1ef(0x4e9)]=function(){const _0x3ae730=_0x16d1ef;VisuMZ['BattleCore']['Sprite_Actor_createStateSprite']['call'](this);if(VisuMZ[_0x3ae730(0x8c3)]['Settings'][_0x3ae730(0xa27)][_0x3ae730(0x207)]){if('qRRlB'===_0x3ae730(0x1e4))return null;else this[_0x3ae730(0x20e)]();}},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x1d2)],Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x1d2)]=function(){const _0x185eeb=_0x16d1ef;VisuMZ[_0x185eeb(0x8c3)]['Settings'][_0x185eeb(0xa27)][_0x185eeb(0x977)]&&this[_0x185eeb(0x20e)](),VisuMZ['BattleCore'][_0x185eeb(0x349)][_0x185eeb(0x2c7)](this);},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x20e)]=function(){const _0x2f16fe=_0x16d1ef;if(!ConfigManager[_0x2f16fe(0x9d7)])return;if(this[_0x2f16fe(0xb30)]===Sprite_SvEnemy)return;const _0x2afa1b=VisuMZ[_0x2f16fe(0x8c3)]['Settings'][_0x2f16fe(0xa27)],_0x15548b=new Sprite_HpGauge();_0x15548b[_0x2f16fe(0x186)]['x']=_0x2afa1b[_0x2f16fe(0x608)],_0x15548b['anchor']['y']=_0x2afa1b[_0x2f16fe(0x812)],_0x15548b['scale']['x']=_0x15548b[_0x2f16fe(0x9fa)]['y']=_0x2afa1b[_0x2f16fe(0xad2)],this[_0x2f16fe(0xb76)]=_0x15548b,this[_0x2f16fe(0x339)](this[_0x2f16fe(0xb76)]),Spriteset_Battle['ANTI_TINT_UI']&&BattleManager[_0x2f16fe(0x92a)](this[_0x2f16fe(0xb76)]);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x3d9)]=Sprite_Battler['prototype'][_0x16d1ef(0x401)],Sprite_Battler['prototype'][_0x16d1ef(0x401)]=function(_0x4f9021){const _0x20d1c1=_0x16d1ef,_0x4d1d1b=this[_0x20d1c1(0xa74)];VisuMZ[_0x20d1c1(0x8c3)][_0x20d1c1(0x3d9)][_0x20d1c1(0x2c7)](this,_0x4f9021),this[_0x20d1c1(0x58b)](_0x4f9021);if(_0x4d1d1b!==_0x4f9021)this[_0x20d1c1(0xab4)]();},Sprite_Battler['prototype'][_0x16d1ef(0x58b)]=function(_0x4d28c4){const _0x22db00=_0x16d1ef;if(!_0x4d28c4)return;if(!this[_0x22db00(0xb76)])return;if(_0x4d28c4[_0x22db00(0x71d)]()){}else{if(_0x4d28c4[_0x22db00(0x8fc)]()){if(this['constructor']===Sprite_SvEnemy&&!_0x4d28c4[_0x22db00(0x649)]())return;}}this[_0x22db00(0xb76)][_0x22db00(0x706)](_0x4d28c4,'hp');},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xb42)]=function(){return this['_battler']&&this['_battler']['hasStaticSvBattler']();},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x6c7)]=function(){const _0x1ff089=_0x16d1ef,_0xdc67c1=this['_mainSprite']['bitmap'];if(!_0xdc67c1)return;const _0x45d20b=_0xdc67c1[_0x1ff089(0x7d5)];let _0x4d6d1a=_0xdc67c1[_0x1ff089(0x842)];if(this['_battler'][_0x1ff089(0x8ae)]()){if(_0x1ff089(0xab1)===_0x1ff089(0x7b6))_0xf286fb[_0x1ff089(0x36a)]();else{if(this[_0x1ff089(0xa99)])_0x4d6d1a=Math[_0x1ff089(0x26b)](0x0,this[_0x1ff089(0xa99)]['height']-0x4);}}this['_mainSprite'][_0x1ff089(0x38f)](0x0,0x0,_0x45d20b,_0x4d6d1a),this[_0x1ff089(0x38f)](0x0,0x0,_0x45d20b,_0x4d6d1a);},Sprite_Battler['prototype'][_0x16d1ef(0x7c4)]=function(){const _0xda45df=_0x16d1ef;if(!this[_0xda45df(0xa74)])return;if(!this[_0xda45df(0xb76)])return;const _0x5b1480=VisuMZ[_0xda45df(0x8c3)][_0xda45df(0x58d)][_0xda45df(0xa27)],_0x1d80a9=this[_0xda45df(0xb76)];_0x1d80a9[_0xda45df(0x7f9)]=this[_0xda45df(0x521)]();const _0x8149f6=_0x5b1480[_0xda45df(0x2ff)],_0x59fc56=_0x5b1480['OffsetY'];_0x1d80a9['x']=_0x8149f6,_0x1d80a9['x']+=this[_0xda45df(0xa74)]['battleUIOffsetX'](),_0x1d80a9['y']=-this[_0xda45df(0x842)]+_0x59fc56,_0x1d80a9['y']+=this[_0xda45df(0xa74)][_0xda45df(0xa28)](),Spriteset_Battle[_0xda45df(0x69d)]&&SceneManager[_0xda45df(0x438)]['_spriteset']&&(_0x1d80a9['x']+=this['x'],_0x1d80a9['y']+=this['y']);},Sprite_Battler[_0x16d1ef(0xa5b)]['isVisualHpGaugeDisplayed']=function(){const _0x56cedf=_0x16d1ef;if(!this[_0x56cedf(0xa74)])return![];if(this[_0x56cedf(0xa74)][_0x56cedf(0x71d)]())return!![];if(this[_0x56cedf(0xa74)][_0x56cedf(0x403)]())return![];if(this[_0x56cedf(0x981)]<=0x0)return![];const _0x4686fd=this[_0x56cedf(0xa74)]['enemy']()[_0x56cedf(0x954)];if(_0x4686fd[_0x56cedf(0xaf1)](/<SHOW HP GAUGE>/i))return!![];if(_0x4686fd[_0x56cedf(0xaf1)](/<HIDE HP GAUGE>/i))return![];const _0x380e45=VisuMZ[_0x56cedf(0x8c3)][_0x56cedf(0x58d)][_0x56cedf(0xa27)];if(_0x380e45['RequiresDefeat']){if(_0x380e45[_0x56cedf(0xaa7)]&&BattleManager[_0x56cedf(0x880)]())return!![];if(this['_battler'][_0x56cedf(0x154)])return![];return this[_0x56cedf(0xa74)][_0x56cedf(0xb22)]();}return!![];},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_Battler_isMoving']=Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x314)],Sprite_Battler[_0x16d1ef(0xa5b)]['isMoving']=function(){const _0x5560f0=_0x16d1ef;if(!this[_0x5560f0(0xa74)])return![];if(this[_0x5560f0(0x329)]>0x0)return!![];return VisuMZ[_0x5560f0(0x8c3)][_0x5560f0(0x69e)]['call'](this);},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_Battler_startMove']=Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x19f)],Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x19f)]=function(_0x1a153f,_0x17a08c,_0x1d77f4){const _0x5cc76e=_0x16d1ef;if(this[_0x5cc76e(0x2bf)]()){if(_0x5cc76e(0x19c)!==_0x5cc76e(0x19c)){if(_0x59cf25[_0x5cc76e(0x4be)](_0x52c7c3))return![];}else VisuMZ[_0x5cc76e(0x8c3)]['Sprite_Battler_startMove'][_0x5cc76e(0x2c7)](this,_0x1a153f,_0x17a08c,_0x1d77f4);}},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x2bf)]=function(){const _0x29bd65=_0x16d1ef;if(this[_0x29bd65(0xa74)]&&this[_0x29bd65(0xa74)][_0x29bd65(0x8ae)]())return![];if(this[_0x29bd65(0xa74)]&&!this[_0x29bd65(0xa74)][_0x29bd65(0x4fb)]())return![];return $gameSystem[_0x29bd65(0xb9b)]();},Sprite_Battler['prototype'][_0x16d1ef(0x937)]=function(){},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x402)]=function(){const _0x3be4ee=_0x16d1ef;this[_0x3be4ee(0x19f)](0x0,0x0,0xc);},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0x210)]=function(){},Sprite_Battler[_0x16d1ef(0xa5b)][_0x16d1ef(0xb45)]=function(){const _0x39017c=_0x16d1ef,_0x14f1af=VisuMZ[_0x39017c(0x8c3)]['Settings']['Actor'],_0x1274f3=this[_0x39017c(0xa74)]&&this[_0x39017c(0xa74)][_0x39017c(0x71d)]()?0x1:-0x1,_0xe8db5d=this['_baseX']-this['_homeX']+_0x1274f3*_0x14f1af[_0x39017c(0x348)],_0x5b4a03=this[_0x39017c(0xb72)]-this[_0x39017c(0x9ea)]+_0x1274f3*_0x14f1af[_0x39017c(0x42c)],_0x19b05b=_0x14f1af[_0x39017c(0x391)];this[_0x39017c(0x19f)](_0xe8db5d,_0x5b4a03,_0x19b05b);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x530)]=Sprite_Actor[_0x16d1ef(0xa5b)]['initMembers'],Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x14c)]=function(){const _0x4cd63f=_0x16d1ef;VisuMZ['BattleCore'][_0x4cd63f(0x530)][_0x4cd63f(0x2c7)](this),this[_0x4cd63f(0x908)]();},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x354)]=function(){const _0x5ba970=_0x16d1ef;return this['_distortionSprite']||this[_0x5ba970(0x959)]||this;},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x59f)],Sprite_Actor[_0x16d1ef(0xa5b)]['moveToStartPosition']=function(){},Sprite_Actor[_0x16d1ef(0xa5b)]['moveToStartPositionBattleCore']=function(_0x58df84){const _0x267b37=_0x16d1ef;if(SceneManager[_0x267b37(0x138)]())return;if(!_0x58df84)return;if(!_0x58df84[_0x267b37(0x2bf)]())return;VisuMZ['BattleCore']['Sprite_Actor_moveToStartPosition'][_0x267b37(0x2c7)](this);},VisuMZ['BattleCore'][_0x16d1ef(0x5e5)]=Sprite_Actor[_0x16d1ef(0xa5b)]['setActorHome'],Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x7d8)]=function(_0x240263){const _0x43bf36=_0x16d1ef;if(VisuMZ['BattleCore'][_0x43bf36(0x58d)][_0x43bf36(0x65f)][_0x43bf36(0x55a)])VisuMZ[_0x43bf36(0x8c3)][_0x43bf36(0x58d)]['Actor'][_0x43bf36(0x55a)]['call'](this,_0x240263);else{if(_0x43bf36(0x529)==='ulZHS'){if(!_0x169d86[_0x43bf36(0x880)]()){const _0x1bb408=_0x787eca[_0x43bf36(0xb5f)](_0x1c2c3a['x'],_0x314b07['y']);if(this[_0x43bf36(0x99d)]&&this[_0x43bf36(0x65e)][_0x1bb408])return this[_0x43bf36(0x65e)][_0x1bb408];}return _0x4c4d00['BattleCore']['Game_Map_battleback2Name'][_0x43bf36(0x2c7)](this);}else VisuMZ[_0x43bf36(0x8c3)]['Sprite_Actor_setActorHome'][_0x43bf36(0x2c7)](this,_0x240263);}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x6f2)]=Sprite_Actor[_0x16d1ef(0xa5b)]['setBattler'],Sprite_Actor['prototype'][_0x16d1ef(0x401)]=function(_0x5babb4){const _0x3152f8=_0x16d1ef;VisuMZ[_0x3152f8(0x8c3)]['Sprite_Actor_setBattler'][_0x3152f8(0x2c7)](this,_0x5babb4),this[_0x3152f8(0x83e)](_0x5babb4);},Sprite_Actor['prototype'][_0x16d1ef(0x83e)]=function(_0x3523f6){const _0x24d68b=_0x16d1ef;if(!_0x3523f6)return;if(!this['_mainSprite'])return;this['_mainSprite'][_0x24d68b(0x186)]['x']=this[_0x24d68b(0x316)]['svBattlerAnchorX'](),this['_mainSprite'][_0x24d68b(0x186)]['y']=this[_0x24d68b(0x316)][_0x24d68b(0x75c)](),this['updateShadowVisibility']();},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_Actor_update']=Sprite_Actor[_0x16d1ef(0xa5b)]['update'],Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x3e1)]=function(){const _0x431832=_0x16d1ef;VisuMZ[_0x431832(0x8c3)][_0x431832(0x915)][_0x431832(0x2c7)](this),this[_0x431832(0x316)]&&(this[_0x431832(0x5d4)](),this[_0x431832(0xa61)]());},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x41a)]=Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x70e)],Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x70e)]=function(){const _0x237946=_0x16d1ef;VisuMZ[_0x237946(0x8c3)][_0x237946(0x41a)][_0x237946(0x2c7)](this),this[_0x237946(0x959)]&&this['_mainSprite'][_0x237946(0xb74)]&&this[_0x237946(0xa74)]&&(this[_0x237946(0x959)][_0x237946(0xb74)]['smooth']!==this[_0x237946(0xa74)]['battlerSmoothImage']()&&(this[_0x237946(0x959)][_0x237946(0xb74)][_0x237946(0x185)]=this[_0x237946(0xa74)][_0x237946(0x7a1)]()));},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x4d1)],Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x4d1)]=function(){const _0x4dc0d4=_0x16d1ef;VisuMZ['BattleCore']['Sprite_Actor_updateShadow'][_0x4dc0d4(0x2c7)](this),this[_0x4dc0d4(0x4b7)]();},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x4b7)]=function(){const _0x4db434=_0x16d1ef;if(!this['_mainSprite'])return;if(!this['_shadowSprite'])return;this[_0x4db434(0x76c)](),this['updateShadowPosition']();},Sprite_Actor[_0x16d1ef(0xa5b)]['updateStateSprite']=function(){const _0x3937d1=_0x16d1ef;this[_0x3937d1(0x917)][_0x3937d1(0x9fa)]['x']=0x1/(this[_0x3937d1(0x9fa)]['x']||0.001),this['_stateSprite'][_0x3937d1(0x9fa)]['y']=0x1/(this[_0x3937d1(0x9fa)]['y']||0.001);},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0xa61)]=function(){const _0x3fb947=_0x16d1ef;if(!$gameSystem[_0x3fb947(0xb9b)]()&&this['constructor']===Sprite_Actor){const _0x59e7ad=Scene_Battle[_0x3fb947(0xa5b)][_0x3fb947(0x88a)]();[_0x3fb947(0xa35),_0x3fb947(0x85a),_0x3fb947(0x7ee),_0x3fb947(0x6a0)][_0x3fb947(0x4f8)](_0x59e7ad)&&(this[_0x3fb947(0x981)]=0x0);}},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x153)]=function(){const _0x48a0f1=_0x16d1ef,_0x217d87=this[_0x48a0f1(0x316)];if(_0x217d87){if(_0x48a0f1(0x983)!==_0x48a0f1(0x610)){const _0x9e4257=_0x217d87[_0x48a0f1(0x3da)]();if(_0x217d87['isInputting']()||_0x217d87[_0x48a0f1(0x92e)]())_0x48a0f1(0x447)!==_0x48a0f1(0x447)?(_0x941f14+=_0x1a0c26[_0x48a0f1(0xb6b)][_0x48a0f1(0x2ff)]||0x0,_0x1a6337+=_0x35ff3e['Enemy']['OffsetY']||0x0):this['startMotion']('walk');else{if(_0x9e4257===0x3)this[_0x48a0f1(0x862)]('dead');else{if(_0x9e4257===0x2)this['startMotion'](_0x48a0f1(0x21e));else{if(this[_0x48a0f1(0x31c)])this[_0x48a0f1(0x862)](_0x48a0f1(0x77a));else{if(_0x217d87['isCharging']())this[_0x48a0f1(0x862)](_0x48a0f1(0xbc7));else{if(_0x217d87['isChanting']()){if(_0x48a0f1(0x458)!==_0x48a0f1(0x458))return this[_0x48a0f1(0x2ac)][_0x48a0f1(0x7dc)]();else this[_0x48a0f1(0x862)]('chant');}else{if(_0x217d87[_0x48a0f1(0x18c)]()||_0x217d87[_0x48a0f1(0x2f7)]())this['startMotion']('guard');else{if(_0x9e4257===0x1)this[_0x48a0f1(0x862)](_0x48a0f1(0x763));else{if(_0x217d87[_0x48a0f1(0xa84)]()){if(_0x48a0f1(0x492)===_0x48a0f1(0x330))return this[_0x48a0f1(0x223)];else this[_0x48a0f1(0x862)](_0x48a0f1(0x4eb));}else{if(_0x217d87[_0x48a0f1(0x1c1)]())this['startMotion'](_0x48a0f1(0xb21));else{if(_0x217d87[_0x48a0f1(0x27b)]())this['startMotion']('wait');else{if(_0x48a0f1(0x50e)!==_0x48a0f1(0x50e))return _0x53c2cd[_0x48a0f1(0x8c3)][_0x48a0f1(0x58d)][_0x48a0f1(0x591)][_0x48a0f1(0x623)];else this[_0x48a0f1(0x862)](_0x48a0f1(0xb21));}}}}}}}}}}}}else _0x1f23b3[_0x518441][_0x48a0f1(0x2c7)](this,_0x5a4edc);}},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x210)]=function(){const _0x3b7d02=0xa,_0x5671da=0x12c*_0x3b7d02,_0x6430c2=0x1e*_0x3b7d02;this['startMove'](_0x5671da,0x0,_0x6430c2);},Sprite_Actor[_0x16d1ef(0xa5b)]['onMoveEnd']=function(){const _0x423ad3=_0x16d1ef;Sprite_Battler[_0x423ad3(0xa5b)][_0x423ad3(0x4b8)][_0x423ad3(0x2c7)](this);},Sprite_Actor[_0x16d1ef(0xa5b)]['motionSpeed']=function(){const _0x160d3a=_0x16d1ef;return Sprite_Battler[_0x160d3a(0x267)];},Sprite_Weapon['prototype'][_0x16d1ef(0x5c1)]=function(){const _0x41b724=_0x16d1ef;return Sprite_Battler[_0x41b724(0x267)];},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x7fe)]=function(){},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x9c0)]=function(){},Sprite_Actor['prototype'][_0x16d1ef(0x508)]=function(){const _0x386e4a=_0x16d1ef;if(this[_0x386e4a(0xa6f)]&&++this[_0x386e4a(0x9a2)]>=this['motionSpeed']()){if(this['_motion']['loop'])_0x386e4a(0x219)===_0x386e4a(0x8cb)?this['_tpbNeedsPartyCommand']=![]:this[_0x386e4a(0x6d8)]=(this[_0x386e4a(0x6d8)]+0x1)%0x4;else{if(this[_0x386e4a(0x6d8)]<0x2){if(_0x386e4a(0x4a9)===_0x386e4a(0x4a9))this[_0x386e4a(0x6d8)]++;else{this['_cursorSprite']=new _0x403813();for(let _0x23a3b7=0x0;_0x23a3b7<0x9;_0x23a3b7++){this['_cursorSprite'][_0x386e4a(0x339)](new _0x47dcd0());}this[_0x386e4a(0x3a5)][_0x386e4a(0x339)](this['_cursorSprite']);}}else _0x386e4a(0xbc1)===_0x386e4a(0x90f)?this[_0x386e4a(0x6c7)]():this[_0x386e4a(0x153)]();}this[_0x386e4a(0x9a2)]=0x0;}},Sprite_Actor[_0x16d1ef(0xa5b)]['forceMotion']=function(_0xeb219d){const _0x392b26=_0x16d1ef;if(_0xeb219d===_0x392b26(0xa56))this['_checkOn']=!![];if(this['_battler']&&this['_battler'][_0x392b26(0x8ae)]()){this['_motion']=Sprite_Actor[_0x392b26(0x722)][_0x392b26(0x306)];return;}const _0x5d2378=Sprite_Actor[_0x392b26(0x722)][_0xeb219d];this[_0x392b26(0xa6f)]=_0x5d2378,this['_motionCount']=0x0,this[_0x392b26(0x6d8)]=0x0;},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0xb81)]=function(_0x322054){const _0x4230bb=_0x16d1ef;if(this[_0x4230bb(0xb42)]())return;this['adjustWeaponSpriteOffset'](),this['_weaponSprite']['setup'](_0x322054),this['_actor'][_0x4230bb(0xa37)]();},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x96d)]=function(){const _0x9c44fc=_0x16d1ef;let _0x380d08=-0x10,_0x3bf5aa=this[_0x9c44fc(0x842)]*0.5;const _0x245de3=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x1463b3=this[_0x9c44fc(0xa74)][_0x9c44fc(0x84f)]()['map'](_0x4cd966=>_0x4cd966&&_0x4cd966[_0x9c44fc(0x954)][_0x9c44fc(0xaf1)](_0x245de3)?Number(RegExp['$1']):0x0),_0x2a3a77=this['_battler']['traitObjects']()[_0x9c44fc(0x526)](_0x260ab3=>_0x260ab3&&_0x260ab3[_0x9c44fc(0x954)][_0x9c44fc(0xaf1)](_0x245de3)?Number(RegExp['$2']):0x0);_0x380d08=_0x1463b3[_0x9c44fc(0x828)]((_0x293358,_0x394279)=>_0x293358+_0x394279,_0x380d08),_0x3bf5aa=_0x2a3a77[_0x9c44fc(0x828)]((_0x28ba7b,_0x5e5849)=>_0x28ba7b+_0x5e5849,_0x3bf5aa),this[_0x9c44fc(0x866)]['x']=_0x380d08,this[_0x9c44fc(0x866)]['y']=_0x3bf5aa,this[_0x9c44fc(0x866)]['update']();},Sprite_Weapon[_0x16d1ef(0xa5b)][_0x16d1ef(0x706)]=function(_0x453652){const _0x4d6c1b=_0x16d1ef;this[_0x4d6c1b(0x8b1)]=_0x453652,this[_0x4d6c1b(0x850)]=-0x1,this[_0x4d6c1b(0x6d8)]=0x0,this[_0x4d6c1b(0x2c3)](),this['updateFrame']();},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x17e)]=function(){},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x937)]=function(){const _0x1f15ed=_0x16d1ef,_0xee8b3a=VisuMZ['BattleCore'][_0x1f15ed(0x58d)][_0x1f15ed(0x7ec)],_0x47d7c3=_0xee8b3a[_0x1f15ed(0xa6e)],_0x1da034=_0xee8b3a[_0x1f15ed(0x3f4)],_0x547f38=_0xee8b3a['StepDuration'];this[_0x1f15ed(0x19f)](-_0x47d7c3,-_0x1da034,_0x547f38);},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_Actor_updateFrame']=Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x57e)],Sprite_Actor['prototype']['updateFrame']=function(){const _0x37eff6=_0x16d1ef;if(this[_0x37eff6(0xb42)]()){if(_0x37eff6(0x255)===_0x37eff6(0x255))this[_0x37eff6(0x6c7)]();else{let _0x1aa49d=_0x515691[_0x37eff6(0x8c3)][_0x37eff6(0x361)][_0x37eff6(0x2c7)](this);const _0x4331de=_0xa50fb8[_0x37eff6(0x8c3)][_0x37eff6(0x58d)];if(_0x4331de['AutoBattle'][_0x37eff6(0x7de)]&&_0x4331de[_0x37eff6(0x849)][_0x37eff6(0x6c0)])_0x1aa49d+=0x2;if(_0x4331de[_0x37eff6(0xa27)][_0x37eff6(0x7de)]&&_0x4331de[_0x37eff6(0xa27)][_0x37eff6(0x6c0)])_0x1aa49d+=0x1;return _0x1aa49d;}}else this['applyFreezeMotionFrames'](),VisuMZ['BattleCore'][_0x37eff6(0xa6a)][_0x37eff6(0x2c7)](this);},Sprite_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x8a0)]=function(){const _0x58711d=_0x16d1ef;if(this[_0x58711d(0xa74)]&&this[_0x58711d(0xa74)][_0x58711d(0x936)]){const _0xe67cf5=this[_0x58711d(0xa74)]['_freezeMotionData'];this['_motion']=Sprite_Actor[_0x58711d(0x722)][_0xe67cf5[_0x58711d(0xba8)]],this[_0x58711d(0x6d8)]=_0xe67cf5[_0x58711d(0x5ca)];const _0x1bd948=this['_weaponSprite'];_0x1bd948[_0x58711d(0x2e0)](_0xe67cf5['weaponImageId'],_0xe67cf5[_0x58711d(0x5ca)]),this[_0x58711d(0x96d)]();}},Sprite_Weapon[_0x16d1ef(0xa5b)][_0x16d1ef(0x2e0)]=function(_0x533c36,_0x4eee01){const _0x5b1230=_0x16d1ef;this[_0x5b1230(0x8b1)]=_0x533c36,this['_animationCount']=-Infinity,this[_0x5b1230(0x6d8)]=_0x4eee01,this[_0x5b1230(0x2c3)](),this[_0x5b1230(0x57e)]();},Sprite_Enemy[_0x16d1ef(0xa5b)]['initMembers']=function(){const _0x378391=_0x16d1ef;Sprite_Battler[_0x378391(0xa5b)][_0x378391(0x14c)][_0x378391(0x2c7)](this),this[_0x378391(0x180)]=null,this[_0x378391(0x24b)]=![],this['_battlerName']='',this[_0x378391(0x60d)]=0x0,this[_0x378391(0xa55)]=null,this[_0x378391(0xa72)]=0x0,this[_0x378391(0x7e1)]=0x0,this[_0x378391(0x54a)](),this[_0x378391(0x1d2)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x33e)]=Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x3e1)],Sprite_Enemy[_0x16d1ef(0xa5b)]['update']=function(){const _0x3628aa=_0x16d1ef;VisuMZ[_0x3628aa(0x8c3)]['Sprite_Enemy_update'][_0x3628aa(0x2c7)](this),this['updateShadowVisibility']();},Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x54a)]=function(){const _0x1bd3a3=_0x16d1ef;this[_0x1bd3a3(0x959)]=new Sprite(),this[_0x1bd3a3(0x959)][_0x1bd3a3(0x186)]['x']=0.5,this[_0x1bd3a3(0x959)]['anchor']['y']=0x1,this[_0x1bd3a3(0x339)](this[_0x1bd3a3(0x959)]),this['attachSpritesToDistortionSprite']();},Sprite_Enemy[_0x16d1ef(0xa5b)]['mainSprite']=function(){const _0x3c8e6a=_0x16d1ef;return this[_0x3c8e6a(0x156)]||this[_0x3c8e6a(0x959)]||this;},Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x2c3)]=function(_0xc36fd6){const _0x47d1ad=_0x16d1ef;this[_0x47d1ad(0xb74)]=new Bitmap(0x1,0x1);if(this[_0x47d1ad(0x649)]()){if(_0x47d1ad(0x1ca)!==_0x47d1ad(0x1ca)){const _0x47a167=_0x4a417d[_0x47d1ad(0x5d3)]('['+_0x1716b3['$1'][_0x47d1ad(0xaf1)](/\d+/g)+']');for(const _0x23d409 of _0x47a167){if(!_0x5257d2[_0x47d1ad(0x4be)](_0x23d409))return!![];}return![];}else{const _0x5337b6=this[_0x47d1ad(0x180)][_0x47d1ad(0x601)]();this[_0x47d1ad(0xb74)]=new Bitmap(_0x5337b6['width'],_0x5337b6[_0x47d1ad(0x842)]),this[_0x47d1ad(0x959)][_0x47d1ad(0xb74)]=new Bitmap(0x1,0x1);}}else{if($gameSystem[_0x47d1ad(0xb9b)]())'egovX'===_0x47d1ad(0x45b)?this[_0x47d1ad(0x157)](_0x47d1ad(0x6fe)):(this[_0x47d1ad(0x959)][_0x47d1ad(0xb74)]=ImageManager['loadSvEnemy'](_0xc36fd6),this[_0x47d1ad(0x959)][_0x47d1ad(0xb74)][_0x47d1ad(0x6bf)](this[_0x47d1ad(0xb39)][_0x47d1ad(0x9f7)](this)));else{if(_0x47d1ad(0xa2d)===_0x47d1ad(0x26c)){const _0x235cca=_0x54f3df[_0x47d1ad(0x954)];if(_0x235cca['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x3f7a3c=_0x3e684f(_0x22d8c0['$1']),_0xfa78d7=_0x566e2d[_0x47d1ad(0x8c3)][_0x47d1ad(0x6d9)](_0x36cd88,_0x47d1ad(0x39a));_0x3f84f3['BattleCore']['createTargetsJS'](_0x3f7a3c,_0xfa78d7);}if(_0x235cca[_0x47d1ad(0xaf1)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0xb9733=_0x1e3430(_0x11eb48['$1']),_0x378e9c=_0x29c7dc[_0x47d1ad(0x8c3)][_0x47d1ad(0x6d9)](_0x4274f9,'CommandVisible');_0x59299b['BattleCore'][_0x47d1ad(0xa08)](_0xb9733,_0x378e9c);}}else this[_0x47d1ad(0x959)][_0x47d1ad(0xb74)]=ImageManager[_0x47d1ad(0x793)](_0xc36fd6),this[_0x47d1ad(0x959)][_0x47d1ad(0xb74)][_0x47d1ad(0x6bf)](this[_0x47d1ad(0xb39)][_0x47d1ad(0x9f7)](this));}}},Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0xb39)]=function(){const _0x248d16=_0x16d1ef,_0xb37fbd=this['_mainSprite']['bitmap'];_0xb37fbd&&(this['bitmap']=new Bitmap(_0xb37fbd['width'],_0xb37fbd[_0x248d16(0x842)]));},VisuMZ['BattleCore'][_0x16d1ef(0xb04)]=Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0xa33)],Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0xa33)]=function(_0x245098){const _0x43ce9f=_0x16d1ef;this['_mainSprite']&&(_0x43ce9f(0x4da)===_0x43ce9f(0x4da)?this[_0x43ce9f(0x959)][_0x43ce9f(0xa33)](_0x245098):_0xb90117[_0x43ce9f(0x92a)](this[_0x43ce9f(0xb76)]));},VisuMZ['BattleCore']['Sprite_Enemy_initVisibility']=Sprite_Enemy['prototype'][_0x16d1ef(0x3ef)],Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x3ef)]=function(){const _0x15c831=_0x16d1ef;if(this[_0x15c831(0x3b3)]()){if(_0x15c831(0x338)==='sZCYG'){const _0x52d63e=_0x5f0115[_0x15c831(0xb02)]();this[_0x15c831(0x8ad)](_0x15c831(0x360),[_0x276ae3],_0x37e17b,_0x2ff801),this[_0x15c831(0x8ad)]('performMoveToPoint',_0x4e4487,_0x52d63e[_0x15c831(0x953)],_0x52d63e['_homeY'],_0xd3d13e,![],_0x15c831(0x56c)),this[_0x15c831(0x8ad)](_0x15c831(0x80f),[_0x37b55c],'evade'),this[_0x15c831(0x8ad)](_0x15c831(0xaa0)),this['push'](_0x15c831(0x80f),[_0x145623],_0x15c831(0xb21));}else VisuMZ[_0x15c831(0x8c3)][_0x15c831(0x392)]['call'](this);}else this['_appeared']=!this['_enemy'][_0x15c831(0x403)](),!this[_0x15c831(0x24b)]&&(this['opacity']=0x0);},VisuMZ['BattleCore'][_0x16d1ef(0x569)]=Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x5de)],Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x5de)]=function(){const _0x257149=_0x16d1ef;if(this['allowCollapse']())VisuMZ[_0x257149(0x8c3)][_0x257149(0x569)]['call'](this);},Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x57e)]=function(){const _0x388fc3=_0x16d1ef;Sprite_Battler[_0x388fc3(0xa5b)][_0x388fc3(0x57e)]['call'](this);const _0x5823f3=this['mainSprite']()||this;if(!_0x5823f3)return;if(!_0x5823f3[_0x388fc3(0xb74)]){if('ugqtR'!=='sQFdF')_0x5823f3['bitmap']=new Bitmap(this['width'],this[_0x388fc3(0x842)]);else return _0x33e6d9[_0x388fc3(0x8c3)]['Settings']['Damage'][_0x388fc3(0x728)][_0x388fc3(0x2c7)](this,_0x5602e3,_0x3de3a5);}this[_0x388fc3(0xa55)]===_0x388fc3(0x423)?this[_0x388fc3(0x959)]['setFrame'](0x0,0x0,this[_0x388fc3(0x959)][_0x388fc3(0x7d5)],this['_effectDuration']):_0x5823f3[_0x388fc3(0x38f)](0x0,0x0,_0x5823f3[_0x388fc3(0xb74)][_0x388fc3(0x7d5)],this[_0x388fc3(0xb74)][_0x388fc3(0x842)]);},VisuMZ['BattleCore']['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x870)],Sprite_Enemy['prototype'][_0x16d1ef(0x870)]=function(){const _0xfce89f=_0x16d1ef;if(this[_0xfce89f(0x3b3)]())VisuMZ['BattleCore'][_0xfce89f(0x744)]['call'](this);},Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x314)]=function(){const _0x449eef=_0x16d1ef;return Sprite_Battler[_0x449eef(0xa5b)][_0x449eef(0x314)][_0x449eef(0x2c7)](this);},VisuMZ['BattleCore']['Sprite_Enemy_updateStateSprite']=Sprite_Enemy['prototype'][_0x16d1ef(0x5d4)],Sprite_Enemy[_0x16d1ef(0xa5b)]['updateStateSprite']=function(){const _0x2835e8=_0x16d1ef;VisuMZ[_0x2835e8(0x8c3)][_0x2835e8(0x2bc)]['call'](this),this[_0x2835e8(0x620)]();},Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x620)]=function(){const _0x30c180=_0x16d1ef,_0xfde9bc=VisuMZ[_0x30c180(0x8c3)]['Settings'][_0x30c180(0xb6b)];if(_0xfde9bc[_0x30c180(0x667)]&&!_0xfde9bc['NameLegacy']){this[_0x30c180(0x281)][_0x30c180(0x981)]=0x0;return;}this[_0x30c180(0x281)]['x']=0x0,this[_0x30c180(0x281)]['x']+=this['_battler'][_0x30c180(0x337)](),this['_stateIconSprite']['y']=-this[_0x30c180(0xb74)][_0x30c180(0x842)]-this['_stateIconSprite'][_0x30c180(0x842)]-0x4,this[_0x30c180(0x281)]['y']+=this[_0x30c180(0xa74)][_0x30c180(0xa28)](),this['_stateIconSprite']['scale']['x']=0x1/(this[_0x30c180(0x9fa)]['x']||0.001),this[_0x30c180(0x281)][_0x30c180(0x9fa)]['y']=0x1/(this[_0x30c180(0x9fa)]['y']||0.001),this['hasSvBattler']()&&(this['_svBattlerSprite'][_0x30c180(0x917)][_0x30c180(0x9fa)]['x']=-0x1/(this[_0x30c180(0x9fa)]['x']||0.001),this['_svBattlerSprite'][_0x30c180(0x917)][_0x30c180(0x9fa)]['y']=0x1/(this[_0x30c180(0x9fa)]['y']||0.001));},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x394)]=Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x401)],Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x401)]=function(_0x1a8289){const _0x3bd35c=_0x16d1ef;VisuMZ['BattleCore']['Sprite_Enemy_setBattler'][_0x3bd35c(0x2c7)](this,_0x1a8289),this[_0x3bd35c(0x98c)](_0x1a8289);},Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x98c)]=function(_0x1d92c7){const _0x4e9c04=_0x16d1ef;!this[_0x4e9c04(0x955)]&&(this[_0x4e9c04(0x955)]=new Sprite_SvEnemy(_0x1d92c7),this['attachSpritesToDistortionSprite']()),this[_0x4e9c04(0x955)][_0x4e9c04(0x401)](_0x1d92c7);},Sprite_Enemy[_0x16d1ef(0xa5b)]['hasSvBattler']=function(){const _0x36fdff=_0x16d1ef;return this[_0x36fdff(0x180)]&&this[_0x36fdff(0x180)]['hasSvBattler']();},Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x3b3)]=function(){const _0x496b92=_0x16d1ef;if(this[_0x496b92(0x649)]()){if('dSPUm'!==_0x496b92(0x32b)){if(_0x509c1e[_0x496b92(0x48e)][_0x496b92(0x963)]===0x3)return![];}else return this['_enemy'][_0x496b92(0x3b3)]();}else return!![];},Sprite_Enemy[_0x16d1ef(0xa5b)]['refreshMotion']=function(){const _0x14f5b2=_0x16d1ef;this['hasSvBattler']()&&this[_0x14f5b2(0x955)][_0x14f5b2(0x153)]();},Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x795)]=function(_0x592f5d){const _0x136db9=_0x16d1ef;if(this[_0x136db9(0x649)]())this[_0x136db9(0x955)][_0x136db9(0x795)](_0x592f5d);},Sprite_Enemy[_0x16d1ef(0xa5b)]['forceWeaponAnimation']=function(_0x1b77e7){const _0x39a889=_0x16d1ef;if(this[_0x39a889(0x649)]())this[_0x39a889(0x955)][_0x39a889(0xb81)](_0x1b77e7);},Sprite_Enemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x937)]=function(){const _0x40667d=_0x16d1ef,_0x2622c3=VisuMZ[_0x40667d(0x8c3)]['Settings'][_0x40667d(0x7ec)],_0x1ee8c2=_0x2622c3['StepDistanceX'],_0x192598=_0x2622c3['StepDistanceY'],_0x59d231=_0x2622c3['StepDuration'];this['startMove'](_0x1ee8c2,_0x192598,_0x59d231);};function Sprite_SvEnemy(){const _0x21c5ee=_0x16d1ef;this[_0x21c5ee(0x839)](...arguments);}Sprite_SvEnemy[_0x16d1ef(0xa5b)]=Object[_0x16d1ef(0x94e)](Sprite_Actor['prototype']),Sprite_SvEnemy['prototype'][_0x16d1ef(0xb30)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)]=function(_0x19e477){const _0x209a28=_0x16d1ef;Sprite_Actor[_0x209a28(0xa5b)][_0x209a28(0x839)][_0x209a28(0x2c7)](this,_0x19e477),this[_0x209a28(0x9fa)]['x']=-0x1,this[_0x209a28(0x917)][_0x209a28(0x9fa)]['x']=-0x1;},Sprite_SvEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x1fd)]=function(){},Sprite_SvEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x59f)]=function(){},Sprite_SvEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x7d8)]=function(_0x508b69){},Sprite_SvEnemy[_0x16d1ef(0xa5b)]['updateShadow']=function(){},Sprite_SvEnemy['prototype']['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x5d4)]=function(){const _0x56e08a=_0x16d1ef;this['_stateSprite'][_0x56e08a(0x7f9)]=![];},Sprite_SvEnemy['prototype'][_0x16d1ef(0x70e)]=function(){const _0x4a5796=_0x16d1ef;Sprite_Battler[_0x4a5796(0xa5b)][_0x4a5796(0x70e)][_0x4a5796(0x2c7)](this);const _0x4b4e16=this[_0x4a5796(0x316)]['svBattlerName']();this['_battlerName']!==_0x4b4e16&&(_0x4a5796(0x8aa)!==_0x4a5796(0x8aa)?!_0x433854['battleMembers']()[_0x4a5796(0x4f8)](this[_0x4a5796(0x881)])&&(this['_tpbSceneChangeCacheActor']=null):(this[_0x4a5796(0x772)]=_0x4b4e16,this[_0x4a5796(0x959)]['bitmap']=ImageManager[_0x4a5796(0x55b)](_0x4b4e16)));if(this[_0x4a5796(0x959)]&&this[_0x4a5796(0x959)]['bitmap']&&this['_battler']){if(this['_mainSprite'][_0x4a5796(0xb74)]['smooth']!==this['_battler'][_0x4a5796(0x7a1)]()){if(_0x4a5796(0x738)==='qJyAn')return this[_0x4a5796(0x601)]()[_0x4a5796(0x15f)];else this[_0x4a5796(0x959)][_0x4a5796(0xb74)][_0x4a5796(0x185)]=this[_0x4a5796(0xa74)][_0x4a5796(0x7a1)]();}}},Sprite_SvEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x210)]=function(){},Sprite_SvEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x19f)]=function(_0x17a900,_0x215a64,_0x3e9319){const _0x55f697=_0x16d1ef;if(this[_0x55f697(0x223)])this[_0x55f697(0x223)][_0x55f697(0x19f)](_0x17a900,_0x215a64,_0x3e9319);},Sprite_SvEnemy['prototype'][_0x16d1ef(0x153)]=function(){const _0x1d750d=_0x16d1ef,_0x5f4da7=this[_0x1d750d(0x316)];if(_0x5f4da7){if(_0x1d750d(0x9a4)!==_0x1d750d(0x9a4)){this['removeAnimationFromContainer'](_0x1f444d);for(const _0x42526a of _0x2b7252[_0x1d750d(0x1ab)]){_0x42526a[_0x1d750d(0x8dd)]&&_0x42526a[_0x1d750d(0x8dd)]();}_0x2b110b['destroy']();}else{const _0x3034a8=_0x5f4da7[_0x1d750d(0x3da)]();if(_0x5f4da7[_0x1d750d(0x4c9)]()||_0x5f4da7['isActing']())_0x1d750d(0x633)===_0x1d750d(0x633)?this[_0x1d750d(0x862)](_0x1d750d(0xb21)):_0x200585['setWaitMode']('battleAnimation');else{if(_0x3034a8===0x3){if(_0x1d750d(0x246)===_0x1d750d(0x246))this[_0x1d750d(0x862)](_0x1d750d(0x306));else return _0x9e5d27[_0x1d750d(0x13c)]();}else{if(_0x3034a8===0x2)_0x1d750d(0x624)===_0x1d750d(0x44a)?_0x33f8b2=_0x34e356[_0x1d750d(0x808)]:this['startMotion'](_0x1d750d(0x21e));else{if(_0x5f4da7[_0x1d750d(0x32a)]())this[_0x1d750d(0x862)](_0x1d750d(0x285));else{if(_0x5f4da7['isGuard']()||_0x5f4da7[_0x1d750d(0x2f7)]())this[_0x1d750d(0x862)](_0x1d750d(0xa31));else{if(_0x3034a8===0x1){if(_0x1d750d(0x9bf)!==_0x1d750d(0x9bf)){_0x44f567['changeAtbCastTime'](_0x1e4ae2);if(_0x1e2041)_0x232899[_0x1d750d(0xad5)]();}else this['startMotion'](_0x1d750d(0x763));}else{if(_0x5f4da7['isDying']())this[_0x1d750d(0x862)](_0x1d750d(0x4eb));else _0x5f4da7[_0x1d750d(0x1c1)]()?this[_0x1d750d(0x862)]('walk'):this[_0x1d750d(0x862)](_0x5f4da7['svBattlerData']()[_0x1d750d(0x895)]||'walk');}}}}}}}}},Sprite_SvEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x783)]=function(){const _0x243f02=_0x16d1ef;if(this['parent']){if(_0x243f02(0xbc2)==='RUzdB')_0x4e7b76+=_0x3fcb19[_0x243f02(0x372)];else return this[_0x243f02(0x223)][_0x243f02(0x67b)]===0x0&&this[_0x243f02(0x223)][_0x243f02(0x172)]===0x0;}else return!![];},Sprite_SvEnemy['prototype'][_0x16d1ef(0xa59)]=function(){},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x225)]=Sprite_Animation[_0x16d1ef(0xa5b)]['targetSpritePosition'],Sprite_Animation[_0x16d1ef(0xa5b)][_0x16d1ef(0x39d)]=function(_0x1b40c5){const _0x1d54e2=_0x16d1ef;if(_0x1b40c5['_distortionSprite'])return this['targetDistortionSpritePosition'](_0x1b40c5);else{if('tVXuN'==='dMCwT')_0x2c4d1c[_0x1d54e2(0x8c3)][_0x1d54e2(0xb5e)]&&_0x174e83['BattleCore'][_0x1d54e2(0xb5e)][_0x1d54e2(0x2c7)](this,_0x57596a),_0x5caafe['BattleCore']['Parse_Notetags_TraitObjects'](_0x2ad7ff);else return VisuMZ[_0x1d54e2(0x8c3)][_0x1d54e2(0x225)][_0x1d54e2(0x2c7)](this,_0x1b40c5);}},Sprite_Animation[_0x16d1ef(0xa5b)][_0x16d1ef(0x3b1)]=function(_0x59d866){const _0x1b1322=_0x16d1ef;let _0x2ce39e=_0x59d866['x'],_0x56320f=_0x59d866['y'],_0x5bd2a1=_0x59d866[_0x1b1322(0x842)],_0x12d0e1=_0x59d866[_0x1b1322(0x156)][_0x1b1322(0x9fa)]['y'];_0x59d866['x']=_0x59d866['_baseX']+_0x59d866[_0x1b1322(0x98e)](),_0x59d866['y']=_0x59d866[_0x1b1322(0xb72)]+_0x59d866['extraPositionY'](),_0x59d866[_0x1b1322(0x842)]*=_0x12d0e1;let _0x5a92ed=VisuMZ[_0x1b1322(0x8c3)]['Sprite_Animation_targetSpritePosition'][_0x1b1322(0x2c7)](this,_0x59d866);return _0x59d866['x']=_0x2ce39e,_0x59d866['y']=_0x56320f,_0x59d866[_0x1b1322(0x842)]=_0x5bd2a1,_0x5a92ed;},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x7b0)]=Sprite_AnimationMV[_0x16d1ef(0xa5b)][_0x16d1ef(0x2a2)],Sprite_AnimationMV[_0x16d1ef(0xa5b)][_0x16d1ef(0x2a2)]=function(){const _0x2b05c0=_0x16d1ef;VisuMZ[_0x2b05c0(0x8c3)]['Sprite_AnimationMV_updatePosition'][_0x2b05c0(0x2c7)](this);if(this[_0x2b05c0(0x48e)][_0x2b05c0(0x963)]===0x3){if(_0x2b05c0(0x522)!==_0x2b05c0(0x522))_0x32c48f+=_0x53dd77(_0x2f744a['$2']);else{if(this['x']===0x0)this['x']=Math['round'](Graphics[_0x2b05c0(0x7d5)]/0x2);if(this['y']===0x0)this['y']=Math[_0x2b05c0(0x5d9)](Graphics[_0x2b05c0(0x842)]/0x2);}}},Sprite_Damage[_0x16d1ef(0xa5b)][_0x16d1ef(0x597)]=function(_0x27524b){const _0x387184=_0x16d1ef,_0x224723=_0x27524b[_0x387184(0x7f8)]()||_0x27524b[_0x387184(0x8cd)]();if(_0x224723[_0x387184(0x4d3)]||_0x224723[_0x387184(0x62e)]){if(_0x387184(0x5b8)===_0x387184(0x5b8))this[_0x387184(0x892)]=0x0,this[_0x387184(0x874)]();else{const _0x544dd9=new _0x396672(0x0,0x0,_0x57026f[_0x387184(0x7d5)],_0x41db66['height']);this[_0x387184(0xb65)]=new _0x16d3d2(_0x544dd9),this[_0x387184(0xb65)][_0x387184(0x981)]=0x0,this[_0x387184(0x339)](this['_commandNameWindow']),this[_0x387184(0xb00)]();}}else{if(_0x224723[_0x387184(0x827)])_0x387184(0x918)!==_0x387184(0x918)?_0x3a1b3b=_0x2a707a[_0x387184(0x352)](_0x281dd0):(this['_colorType']=_0x224723[_0x387184(0x5a4)]>=0x0?0x0:0x1,this[_0x387184(0x12f)](_0x224723[_0x387184(0x5a4)]));else{if(_0x27524b[_0x387184(0x341)]()&&_0x224723['mpDamage']!==0x0){if(_0x387184(0xbe2)!=='gWCVh')this['_colorType']=_0x224723['mpDamage']>=0x0?0x2:0x3,this[_0x387184(0x12f)](_0x224723[_0x387184(0x754)]);else{if(this[_0x387184(0x8e2)]())return _0x5ce2f8;return _0x5624df=this[_0x387184(0xbd0)](_0x16bcae),_0x1a3bdd=this[_0x387184(0x426)](_0x1f2a9b),_0x237342;}}}}_0x224723['critical']&&this[_0x387184(0x18f)]();},Sprite_Damage[_0x16d1ef(0xa5b)][_0x16d1ef(0x706)]=function(_0x302798){},Sprite_Damage[_0x16d1ef(0xa5b)][_0x16d1ef(0x12f)]=function(_0x45f3ab){const _0x323ccf=_0x16d1ef;let _0x18540a=this[_0x323ccf(0x9bb)](_0x45f3ab);const _0x282b8e=this['fontSize'](),_0x166561=Math[_0x323ccf(0x481)](_0x282b8e*0.75);for(let _0x58d330=0x0;_0x58d330<_0x18540a[_0x323ccf(0xa40)];_0x58d330++){if(_0x323ccf(0x4c7)!==_0x323ccf(0x4c7)){if(this[_0x323ccf(0x607)]<=0x0)return;const _0x2b3e5d=this[_0x323ccf(0x607)],_0x198846=this[_0x323ccf(0x13e)],_0x9dc649=this[_0x323ccf(0x269)];_0x4d97cd['VisuMZ_0_CoreEngine']?this[_0x323ccf(0x2dc)]=this['applyEasing'](this[_0x323ccf(0x2dc)],this[_0x323ccf(0x67c)],_0x2b3e5d,_0x198846,_0x9dc649):this['_currentAngle']=(this['_currentAngle']*(_0x2b3e5d-0x1)+this['_targetAngle'])/_0x2b3e5d;this['_angleDuration']--;if(this[_0x323ccf(0x607)]<=0x0)this[_0x323ccf(0xa89)]();}else{const _0x909845=this[_0x323ccf(0x688)](_0x166561,_0x282b8e);_0x909845[_0x323ccf(0xb74)][_0x323ccf(0x7fb)](_0x18540a[_0x58d330],0x0,0x0,_0x166561,_0x282b8e,_0x323ccf(0x4a0)),_0x909845['x']=(_0x58d330-(_0x18540a[_0x323ccf(0xa40)]-0x1)/0x2)*_0x166561,_0x909845['dy']=-_0x58d330;}}},Sprite_Damage[_0x16d1ef(0xa5b)][_0x16d1ef(0x9bb)]=function(_0x2f06bb){const _0x36f01f=_0x16d1ef;let _0x2c3a77=Math[_0x36f01f(0xaf4)](_0x2f06bb)[_0x36f01f(0x9a8)]();this['useDigitGrouping']()&&(_0x2c3a77=VisuMZ['GroupDigits'](_0x2c3a77));const _0x20a9c8=VisuMZ[_0x36f01f(0x8c3)]['Settings'][_0x36f01f(0x6c4)];let _0xf5052='',_0x4e87e2='';switch(this[_0x36f01f(0x892)]){case 0x0:_0xf5052=_0x20a9c8[_0x36f01f(0x85c)]||'-%1',_0x4e87e2=TextManager['hp'];if(_0x2f06bb===0x0)_0xf5052='%1';break;case 0x1:_0xf5052=_0x20a9c8['hpHealingFmt']||'+%1',_0x4e87e2=TextManager['hp'];break;case 0x2:_0xf5052=_0x20a9c8['mpDamageFmt']||'-%1\x20MP',_0x4e87e2=TextManager['mp'];break;case 0x3:_0xf5052=_0x20a9c8[_0x36f01f(0x94f)]||_0x36f01f(0x5f1),_0x4e87e2=TextManager['mp'];break;}return _0xf5052[_0x36f01f(0x86a)](_0x2c3a77,_0x4e87e2)[_0x36f01f(0x699)]();},Sprite_Damage[_0x16d1ef(0xa5b)][_0x16d1ef(0xadc)]=function(){const _0x47eb3e=_0x16d1ef;return Imported[_0x47eb3e(0x6ce)]?VisuMZ[_0x47eb3e(0x95a)][_0x47eb3e(0x58d)][_0x47eb3e(0x3f0)][_0x47eb3e(0x238)]:![];},Sprite_Damage[_0x16d1ef(0xa5b)][_0x16d1ef(0x18f)]=function(){const _0x2e21fd=_0x16d1ef,_0x608997=VisuMZ[_0x2e21fd(0x8c3)][_0x2e21fd(0x58d)][_0x2e21fd(0x6c4)];this['_flashColor']=_0x608997['CriticalColor'][_0x2e21fd(0x777)](0x0),this[_0x2e21fd(0x1b3)]=_0x608997[_0x2e21fd(0x24d)];},Sprite_Damage['prototype'][_0x16d1ef(0x9e8)]=function(_0x23fc78,_0x502b0c){const _0x41833c=_0x16d1ef;this['_flashColor']=_0x502b0c[_0x41833c(0x198)]||[0x0,0x0,0x0,0x0],this[_0x41833c(0x821)]=JsonEx[_0x41833c(0x504)](this[_0x41833c(0x821)]),this[_0x41833c(0x1b3)]=_0x502b0c['flashDuration']||0x0;const _0xc4492d=this[_0x41833c(0xad1)](),_0x15352c=Math[_0x41833c(0x481)](_0xc4492d*0x1e),_0xbb034=this['createChildSprite'](_0x15352c,_0xc4492d);_0xbb034[_0x41833c(0xb74)][_0x41833c(0x324)]=ColorManager[_0x41833c(0x70f)](_0x502b0c[_0x41833c(0x324)]),_0xbb034[_0x41833c(0xb74)][_0x41833c(0x7fb)](_0x23fc78,0x0,0x0,_0x15352c,_0xc4492d,_0x41833c(0x4a0)),_0xbb034['dy']=0x0;},Sprite_Damage[_0x16d1ef(0xa5b)]['setupIconTextPopup']=function(_0x37c2b3,_0x28ceb7,_0xa45bb9){const _0x380979=_0x16d1ef,_0x1dd47d=Math['max'](this[_0x380979(0xad1)](),ImageManager[_0x380979(0x4b5)]),_0x459321=Math[_0x380979(0x481)](_0x1dd47d*0x1e),_0x2fbcc2=this[_0x380979(0x688)](_0x459321,_0x1dd47d),_0x4f9b02=ImageManager[_0x380979(0x372)]/0x2,_0x1d76a5=_0x2fbcc2['bitmap']['measureTextWidth'](_0x28ceb7+'\x20');_0x2fbcc2[_0x380979(0xb74)][_0x380979(0x324)]=ColorManager[_0x380979(0x70f)](_0xa45bb9[_0x380979(0x324)]),_0x2fbcc2[_0x380979(0xb74)][_0x380979(0x7fb)](_0x28ceb7,_0x4f9b02,0x0,_0x459321-_0x4f9b02,_0x1dd47d,_0x380979(0x4a0));const _0x3e4634=Math[_0x380979(0x5d9)]((_0x1dd47d-ImageManager[_0x380979(0x4b5)])/0x2),_0xc74150=_0x459321/0x2-ImageManager[_0x380979(0x372)]-_0x1d76a5/0x2+_0x4f9b02/0x2,_0x5ac72f=ImageManager[_0x380979(0x642)]('IconSet'),_0x1d9dae=ImageManager[_0x380979(0x372)],_0xf1127=ImageManager[_0x380979(0x4b5)],_0x3db8e3=_0x37c2b3%0x10*_0x1d9dae,_0x3aea49=Math[_0x380979(0x481)](_0x37c2b3/0x10)*_0xf1127;_0x2fbcc2['bitmap']['blt'](_0x5ac72f,_0x3db8e3,_0x3aea49,_0x1d9dae,_0xf1127,_0xc74150,_0x3e4634),this[_0x380979(0x821)]=_0xa45bb9[_0x380979(0x198)]||[0x0,0x0,0x0,0x0],this[_0x380979(0x821)]=JsonEx[_0x380979(0x504)](this[_0x380979(0x821)]),this[_0x380979(0x1b3)]=_0xa45bb9[_0x380979(0x7dd)]||0x0,_0x2fbcc2['dy']=0x0;},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x475)]=Sprite_Damage[_0x16d1ef(0xa5b)][_0x16d1ef(0x688)],Sprite_Damage[_0x16d1ef(0xa5b)][_0x16d1ef(0x688)]=function(_0x5725e5,_0x4f73a9){const _0x5929c6=_0x16d1ef;return _0x4f73a9=Math[_0x5929c6(0x5d9)](_0x4f73a9*1.2),VisuMZ[_0x5929c6(0x8c3)][_0x5929c6(0x475)][_0x5929c6(0x2c7)](this,_0x5725e5,_0x4f73a9);},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon[_0x16d1ef(0xa5b)][_0x16d1ef(0x57e)],Sprite_StateIcon[_0x16d1ef(0xa5b)]['updateFrame']=function(){const _0x2aacdc=_0x16d1ef;VisuMZ[_0x2aacdc(0x8c3)][_0x2aacdc(0x43f)][_0x2aacdc(0x2c7)](this),this[_0x2aacdc(0x981)]=this[_0x2aacdc(0x7ae)]>0x0?0xff:0x0;},VisuMZ[_0x16d1ef(0x8c3)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon[_0x16d1ef(0xa5b)][_0x16d1ef(0x2c3)],Sprite_Weapon['prototype']['loadBitmap']=function(){const _0x15284a=_0x16d1ef;VisuMZ[_0x15284a(0x8c3)][_0x15284a(0x5e1)][_0x15284a(0x2c7)](this);if(this[_0x15284a(0xb74)]){if(_0x15284a(0x51f)==='VVxbo')this[_0x15284a(0xb74)][_0x15284a(0x185)]=VisuMZ['BattleCore']['Settings'][_0x15284a(0x65f)]['SmoothImage'];else return _0x51f2e5[_0x15284a(0x80b)];}};function _0x3da9(_0x55ace7,_0x166a91){const _0x4b9d37=_0x4b9d();return _0x3da9=function(_0x3da96b,_0x546378){_0x3da96b=_0x3da96b-0x12e;let _0x492377=_0x4b9d37[_0x3da96b];return _0x492377;},_0x3da9(_0x55ace7,_0x166a91);}function Sprite_HpGauge(){const _0x32b662=_0x16d1ef;this[_0x32b662(0x839)](...arguments);}Sprite_HpGauge[_0x16d1ef(0xa5b)]=Object[_0x16d1ef(0x94e)](Sprite_Gauge[_0x16d1ef(0xa5b)]),Sprite_HpGauge[_0x16d1ef(0xa5b)][_0x16d1ef(0xb30)]=Sprite_HpGauge,Sprite_HpGauge[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)]=function(){const _0x41e49d=_0x16d1ef;Sprite_Gauge[_0x41e49d(0xa5b)][_0x41e49d(0x839)][_0x41e49d(0x2c7)](this);},Sprite_HpGauge[_0x16d1ef(0xa5b)][_0x16d1ef(0x665)]=function(){return 0x0;},Sprite_HpGauge[_0x16d1ef(0xa5b)][_0x16d1ef(0x25c)]=function(){const _0x115574=_0x16d1ef;this[_0x115574(0xb74)][_0x115574(0x721)]();const _0x145be5=this[_0x115574(0x97e)]();!isNaN(_0x145be5)&&(_0x115574(0x1be)!==_0x115574(0x1be)?(this[_0x115574(0x917)][_0x115574(0x9fa)]['x']=0x1/(this['scale']['x']||0.001),this[_0x115574(0x917)]['scale']['y']=0x1/(this[_0x115574(0x9fa)]['y']||0.001)):this[_0x115574(0xa5d)]());};function Sprite_EnemyName(){const _0x53b6e1=_0x16d1ef;this[_0x53b6e1(0x839)](...arguments);}Sprite_EnemyName['prototype']=Object[_0x16d1ef(0x94e)](Sprite_Name[_0x16d1ef(0xa5b)]),Sprite_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0xb30)]=Sprite_EnemyName,Sprite_EnemyName[_0x16d1ef(0xa5b)]['initialize']=function(){const _0x48b756=_0x16d1ef;Sprite_Name[_0x48b756(0xa5b)][_0x48b756(0x839)][_0x48b756(0x2c7)](this),this[_0x48b756(0x1cd)]();},Sprite_EnemyName[_0x16d1ef(0xa5b)]['initMembers']=function(){const _0xa381b2=_0x16d1ef;Sprite_Name['prototype'][_0xa381b2(0x14c)][_0xa381b2(0x2c7)](this),this['opacity']=0x0,this[_0xa381b2(0x989)]=null,this[_0xa381b2(0x186)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName['prototype'][_0x16d1ef(0x1cd)]=function(){const _0x3264b0=_0x16d1ef;if(VisuMZ['BattleCore']['Settings'][_0x3264b0(0xb6b)][_0x3264b0(0x667)]){if('WemqR'!==_0x3264b0(0x6c6))return _0x1e4ffb[_0x3264b0(0x8c3)][_0x3264b0(0x58d)]['Enemy'][_0x3264b0(0x374)];else this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x3264b0(0x339)](this['_stateIconSprite']);}},Sprite_EnemyName['prototype']['bitmapWidth']=function(){const _0x5643f4=_0x16d1ef;return Graphics[_0x5643f4(0xb26)];},Sprite_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0x9c5)]=function(){const _0x309fcc=_0x16d1ef;return this[_0x309fcc(0x7f6)]=this[_0x309fcc(0x7f6)]||Window_Base[_0x309fcc(0xa5b)]['lineHeight']()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0xad1)]=function(){const _0x2851cb=_0x16d1ef;return VisuMZ[_0x2851cb(0x8c3)][_0x2851cb(0x58d)][_0x2851cb(0xb6b)][_0x2851cb(0x7ca)]||$gameSystem[_0x2851cb(0x1c3)]();},Sprite_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0x23b)]=function(_0x4ab79a){const _0x198b44=_0x16d1ef;this[_0x198b44(0x989)]=_0x4ab79a;},Sprite_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0x3e1)]=function(){const _0x211627=_0x16d1ef;Sprite_Name['prototype'][_0x211627(0x3e1)][_0x211627(0x2c7)](this),this['updateLink'](),this[_0x211627(0x2a2)](),this['updateAttachedSprites'](),this['updateOpacity']();},Sprite_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0x25c)]=function(){const _0x13c48e=_0x16d1ef;this[_0x13c48e(0x913)]=undefined;const _0x3a6182=this[_0x13c48e(0x8c4)](),_0x3ad8fa=this[_0x13c48e(0xb3d)](),_0x521a5b=Window_Base[_0x13c48e(0xa5b)][_0x13c48e(0x61e)]();this[_0x13c48e(0xa2c)](),this[_0x13c48e(0xb74)][_0x13c48e(0x721)](),this[_0x13c48e(0xb74)]['drawText'](_0x3a6182,0x0,0x0,_0x3ad8fa,_0x521a5b,_0x13c48e(0x4a0));},Sprite_EnemyName['prototype']['updateLink']=function(){const _0x55ad7c=_0x16d1ef;if(!this[_0x55ad7c(0x989)])return;this[_0x55ad7c(0xa74)]!==this[_0x55ad7c(0x989)][_0x55ad7c(0xa74)]&&this[_0x55ad7c(0x706)](this[_0x55ad7c(0x989)]['_battler']);},Sprite_EnemyName['prototype'][_0x16d1ef(0x2a2)]=function(){const _0x585035=_0x16d1ef;if(!this[_0x585035(0x989)])return;this[_0x585035(0x7f6)]=this['_lineHeight']||Window_Base[_0x585035(0xa5b)][_0x585035(0x61e)](),this['x']=this['_linkedSprite'][_0x585035(0x37a)],this['y']=this[_0x585035(0x989)][_0x585035(0xb72)]-this['_lineHeight']*0.5;const _0x39511d=VisuMZ['BattleCore']['Settings'][_0x585035(0xb6b)];this['x']+=_0x39511d[_0x585035(0x686)]||0x0,this['y']+=_0x39511d[_0x585035(0x8e1)]||0x0;},Sprite_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0x7e9)]=function(){const _0x434597=_0x16d1ef;this[_0x434597(0xb1f)]();},Sprite_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0xb1f)]=function(){const _0x218400=_0x16d1ef;if(!this[_0x218400(0x281)])return;this['_battler']!==this[_0x218400(0x281)][_0x218400(0xa74)]&&this[_0x218400(0x281)]['setup'](this[_0x218400(0xa74)]);const _0x485685=this[_0x218400(0x1ac)]();this['_lineHeight']=this[_0x218400(0x7f6)]||Window_Base[_0x218400(0xa5b)][_0x218400(0x61e)](),this['_stateIconSprite']['x']=Math[_0x218400(0x5d9)]((_0x485685+ImageManager['iconWidth'])/0x2)+0x8,this['_stateIconSprite']['y']=this[_0x218400(0x7f6)]/0x2;const _0x22b227=VisuMZ['BattleCore'][_0x218400(0x58d)][_0x218400(0xb6b)];this[_0x218400(0x281)]['x']+=_0x22b227[_0x218400(0xa83)]||0x0,this[_0x218400(0x281)]['y']+=_0x22b227['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0xaa4)]=function(){const _0x4b0c80=_0x16d1ef,_0x2d8de0=this[_0x4b0c80(0x9c3)]();if(_0x2d8de0&&this[_0x4b0c80(0x981)]<0xff)this['opacity']+=0x10;else!_0x2d8de0&&this[_0x4b0c80(0x981)]>0x0&&(this[_0x4b0c80(0x981)]-=0x10);},Sprite_EnemyName[_0x16d1ef(0xa5b)]['visibilityState']=function(){const _0x5b817b=_0x16d1ef;if(this[_0x5b817b(0x53a)]()){if(_0x5b817b(0x6e0)!==_0x5b817b(0x78a))return![];else _0x3de983[_0x5b817b(0x8c3)]['Window_BattleLog_displayEvasion']['call'](this,_0x463adf);}else{if(!this[_0x5b817b(0xa74)])return![];else{if(this[_0x5b817b(0xa74)][_0x5b817b(0x8ae)]()){if('sBSeY'===_0x5b817b(0x1f6))return![];else this[_0x5b817b(0x709)]();}else{if(!this[_0x5b817b(0xa74)][_0x5b817b(0x363)]())return![];else{if(this[_0x5b817b(0x4c2)]()){if(_0x5b817b(0x4cb)===_0x5b817b(0x5a3))_0x3361dd[_0x5b817b(0x8c3)][_0x5b817b(0x259)]['call'](this),this['updateOnceParallelInterpreters']();else return!![];}else{if(this[_0x5b817b(0x861)]())return!![];else{if(this[_0x5b817b(0xb66)]())return!![];else{if(this[_0x5b817b(0x981)]>0x0){if(_0x5b817b(0x57b)===_0x5b817b(0x9b4))this[_0x5b817b(0x158)]();else return![];}}}}}}}}},Sprite_EnemyName['prototype'][_0x16d1ef(0x53a)]=function(){const _0xe444c0=_0x16d1ef;return VisuMZ[_0xe444c0(0x8c3)]['Settings']['Enemy'][_0xe444c0(0x1c0)];},Sprite_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0x4c2)]=function(){return![];},Sprite_EnemyName[_0x16d1ef(0xa5b)]['isAlwaysVisible']=function(){const _0x1bf672=_0x16d1ef;return VisuMZ['BattleCore'][_0x1bf672(0x58d)][_0x1bf672(0xb6b)][_0x1bf672(0xa1d)];},Sprite_EnemyName['prototype']['isIncludedInEnemyWindow']=function(){const _0x1da391=_0x16d1ef;if(VisuMZ[_0x1da391(0x8c3)][_0x1da391(0x58d)][_0x1da391(0xb6b)][_0x1da391(0x1d4)]){if('AgJOK'==='AgJOK')return this[_0x1da391(0xa74)][_0x1da391(0x4f3)]();else _0x31d57b['BattleCore']['Window_BattleLog_performMiss'][_0x1da391(0x2c7)](this,_0x5e36c1),this[_0x1da391(0xaf2)]();}else{if(_0x1da391(0x9cb)!==_0x1da391(0x5cf))return SceneManager[_0x1da391(0x438)]['_enemyWindow']&&SceneManager[_0x1da391(0x438)][_0x1da391(0x8ff)][_0x1da391(0x29e)]&&SceneManager[_0x1da391(0x438)][_0x1da391(0x8ff)][_0x1da391(0xa18)][_0x1da391(0x4f8)](this[_0x1da391(0xa74)]);else{const _0x30538f=this['item']()['scope'];if(_0x30538f[_0x1da391(0xaf1)](/RANDOM/i))return![];if(_0x30538f[_0x1da391(0xaf1)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x30538f['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return _0x8766a9[_0x1da391(0x8c3)][_0x1da391(0x48f)][_0x1da391(0x2c7)](this);}}},Sprite_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0x1ac)]=function(){const _0x42dd8a=_0x16d1ef;if(!this[_0x42dd8a(0xa74)])return 0x0;if(this[_0x42dd8a(0x913)])return this['_cacheTextWidth'];const _0x5e1e56=this['name']();return this[_0x42dd8a(0xa2c)](),this[_0x42dd8a(0x913)]=this[_0x42dd8a(0xb74)][_0x42dd8a(0x50a)](_0x5e1e56)||0x1,this[_0x42dd8a(0x913)];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x68c)]=Sprite_Battleback[_0x16d1ef(0xa5b)][_0x16d1ef(0x680)],Sprite_Battleback['prototype'][_0x16d1ef(0x680)]=function(){const _0x11be34=_0x16d1ef,_0x447670=VisuMZ[_0x11be34(0x8c3)][_0x11be34(0x58d)][_0x11be34(0x6a6)];if(!_0x447670){if(_0x11be34(0x2d0)===_0x11be34(0x2d0))return VisuMZ[_0x11be34(0x8c3)][_0x11be34(0x68c)][_0x11be34(0x2c7)](this);else this['_waitCount']=_0x412d;}const _0x591dd8=String(_0x447670['DefaultStyle'])||'MZ';switch(_0x591dd8){case'MZ':VisuMZ[_0x11be34(0x8c3)][_0x11be34(0x68c)]['call'](this);break;case _0x11be34(0x816):this[_0x11be34(0x8a4)]();break;case _0x11be34(0xa26):this[_0x11be34(0x7a2)]();break;case _0x11be34(0x5e2):this[_0x11be34(0x62a)]();break;case _0x11be34(0x809):this[_0x11be34(0x7b3)]();break;}},Sprite_Battleback['prototype'][_0x16d1ef(0x8a4)]=function(){const _0x238c13=_0x16d1ef;this[_0x238c13(0x7d5)]=Graphics[_0x238c13(0x7d5)],this[_0x238c13(0x842)]=Graphics[_0x238c13(0x842)];const _0x33a744=0x1;this[_0x238c13(0x9fa)]['x']=_0x33a744,this[_0x238c13(0x9fa)]['y']=_0x33a744,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x16d1ef(0x7a2)]=function(){const _0x1fbd4a=_0x16d1ef;this[_0x1fbd4a(0x7d5)]=Graphics['width'],this[_0x1fbd4a(0x842)]=Graphics[_0x1fbd4a(0x842)];const _0x5be7e6=this[_0x1fbd4a(0x7d5)]/this[_0x1fbd4a(0xb74)][_0x1fbd4a(0x7d5)],_0x50edd9=this[_0x1fbd4a(0x842)]/this[_0x1fbd4a(0xb74)][_0x1fbd4a(0x842)],_0x6da19c=Math[_0x1fbd4a(0x26b)](_0x5be7e6,_0x50edd9);this['scale']['x']=_0x6da19c,this[_0x1fbd4a(0x9fa)]['y']=_0x6da19c,this['x']=(Graphics['width']-this[_0x1fbd4a(0x7d5)])/0x2,this['y']=Graphics[_0x1fbd4a(0x842)]-this['height'];},Sprite_Battleback[_0x16d1ef(0xa5b)]['adjustPosition_ScaleDown']=function(){const _0x2b611c=_0x16d1ef;this[_0x2b611c(0x7d5)]=Graphics[_0x2b611c(0x7d5)],this[_0x2b611c(0x842)]=Graphics[_0x2b611c(0x842)];const _0x2a4e31=Math['min'](0x1,this[_0x2b611c(0x7d5)]/this[_0x2b611c(0xb74)][_0x2b611c(0x7d5)]),_0x6e4dc4=Math[_0x2b611c(0x457)](0x1,this[_0x2b611c(0x842)]/this[_0x2b611c(0xb74)][_0x2b611c(0x842)]),_0x7c541b=Math['max'](_0x2a4e31,_0x6e4dc4);this[_0x2b611c(0x9fa)]['x']=_0x7c541b,this['scale']['y']=_0x7c541b,this['x']=(Graphics[_0x2b611c(0x7d5)]-this[_0x2b611c(0x7d5)])/0x2,this['y']=Graphics['height']-this[_0x2b611c(0x842)];},Sprite_Battleback['prototype']['adjustPosition_ScaleUp']=function(){const _0x5933bd=_0x16d1ef;this[_0x5933bd(0x7d5)]=Graphics['width'],this[_0x5933bd(0x842)]=Graphics['height'];const _0x173adc=Math[_0x5933bd(0x26b)](0x1,this[_0x5933bd(0x7d5)]/this['bitmap'][_0x5933bd(0x7d5)]),_0x356463=Math[_0x5933bd(0x26b)](0x1,this[_0x5933bd(0x842)]/this[_0x5933bd(0xb74)][_0x5933bd(0x842)]),_0x3ca0bb=Math[_0x5933bd(0x26b)](_0x173adc,_0x356463);this['scale']['x']=_0x3ca0bb,this[_0x5933bd(0x9fa)]['y']=_0x3ca0bb,this['x']=(Graphics[_0x5933bd(0x7d5)]-this[_0x5933bd(0x7d5)])/0x2,this['y']=Graphics['height']-this[_0x5933bd(0x842)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x58d)][_0x16d1ef(0x66d)][_0x16d1ef(0x68a)]??!![],Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x93c)]=function(){const _0x4bfdf4=_0x16d1ef;if(!$gameSystem[_0x4bfdf4(0xb9b)]())return![];return![];},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x73e)]=function(){return 0x0;},Spriteset_Battle['prototype'][_0x16d1ef(0x362)]=function(){return 0x0;},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x540)]=Spriteset_Battle[_0x16d1ef(0xa5b)]['createLowerLayer'],Spriteset_Battle[_0x16d1ef(0xa5b)]['createLowerLayer']=function(){const _0x1f270b=_0x16d1ef;VisuMZ['BattleCore'][_0x1f270b(0x540)][_0x1f270b(0x2c7)](this),this[_0x1f270b(0x925)](),this[_0x1f270b(0x8f6)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x57d)]=Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x3e1)],Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x3e1)]=function(){const _0x313aea=_0x16d1ef;VisuMZ[_0x313aea(0x8c3)][_0x313aea(0x57d)][_0x313aea(0x2c7)](this),this[_0x313aea(0x579)](),this[_0x313aea(0xa3f)]();},Spriteset_Battle[_0x16d1ef(0xa5b)]['createWeather']=function(){const _0x1c22ea=_0x16d1ef;this['_weather']=new Weather(),this[_0x1c22ea(0xb16)]['addChild'](this[_0x1c22ea(0x4f6)]);},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xa3f)]=function(){const _0x61c9f5=_0x16d1ef;this['_weather']['type']=$gameScreen[_0x61c9f5(0x2f9)](),this['_weather'][_0x61c9f5(0xa03)]=$gameScreen['weatherPower']();},Game_Interpreter[_0x16d1ef(0xa5b)][_0x16d1ef(0x612)]=function(_0x4c76c8){const _0x2a03f0=_0x16d1ef;$gameScreen[_0x2a03f0(0xb37)](_0x4c76c8[0x0],_0x4c76c8[0x1],_0x4c76c8[0x2]);if(_0x4c76c8[0x3])this[_0x2a03f0(0xbc7)](_0x4c76c8[0x2]);return!![];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x961)]=Game_Interpreter[_0x16d1ef(0xa5b)][_0x16d1ef(0x929)],Game_Interpreter[_0x16d1ef(0xa5b)][_0x16d1ef(0x929)]=function(_0x2b11d7){const _0x53fbf6=_0x16d1ef;return SceneManager[_0x53fbf6(0x37d)]()?(SceneManager['_scene'][_0x53fbf6(0x71a)][_0x53fbf6(0x7e5)](_0x2b11d7[0x0],_0x2b11d7[0x1]),!![]):VisuMZ['BattleCore'][_0x53fbf6(0x961)][_0x53fbf6(0x2c7)](this,_0x2b11d7);},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xb88)]=function(_0xce3e05,_0x149718){const _0xcb4010=_0x16d1ef;_0xce3e05[_0xcb4010(0xb74)]=_0x149718;},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x7e5)]=function(_0x2b631c,_0x625fc0){const _0x48e972=_0x16d1ef;_0x2b631c=_0x2b631c||'',_0x625fc0=_0x625fc0||'';_0x2b631c===''&&_0x625fc0===''&&(_0x2b631c=this['_back1Sprite'][_0x48e972(0x972)](),_0x625fc0=this['_back2Sprite'][_0x48e972(0x283)]());const _0x480860=ImageManager['loadBattleback1'](_0x2b631c),_0x44e547=ImageManager['loadBattleback2'](_0x625fc0);_0x480860[_0x48e972(0x6bf)](this['updateBattlebackBitmap1'][_0x48e972(0x9f7)](this,this['_back1Sprite'],this[_0x48e972(0x7bb)],_0x480860,_0x44e547));},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x452)]=function(_0x203f1d,_0xe3aaa,_0x18f4d2,_0xfed2d1){const _0x3f08db=_0x16d1ef;_0xfed2d1[_0x3f08db(0x6bf)](this[_0x3f08db(0x6b9)]['bind'](this,_0x203f1d,_0xe3aaa,_0x18f4d2,_0xfed2d1));},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x6b9)]=function(_0x1bd287,_0x60c4b6,_0x374ddd,_0x4047d4){const _0x2138b1=_0x16d1ef;_0x1bd287[_0x2138b1(0xb74)]=_0x374ddd,_0x60c4b6[_0x2138b1(0xb74)]=_0x4047d4,_0x1bd287['adjustPosition'](),_0x60c4b6[_0x2138b1(0x680)]();},VisuMZ['BattleCore'][_0x16d1ef(0x6d7)]=Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x5f4)],Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x5f4)]=function(){const _0x4b414a=_0x16d1ef;VisuMZ[_0x4b414a(0x8c3)][_0x4b414a(0x6d7)][_0x4b414a(0x2c7)](this),this[_0x4b414a(0xb10)]();},Spriteset_Battle['prototype']['createBattleFieldBattleCore']=function(){const _0x488d3c=_0x16d1ef;this[_0x488d3c(0x69f)](),this[_0x488d3c(0x556)](),this[_0x488d3c(0x826)](),this[_0x488d3c(0xac2)](),this['adjustFlippedBattlefield']();},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x69f)]=function(){const _0xdf2a65=_0x16d1ef;this[_0xdf2a65(0x7e2)]=new Sprite(),this[_0xdf2a65(0xb16)][_0xdf2a65(0x339)](this[_0xdf2a65(0x7e2)]);},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x826)]=function(){const _0x1b3317=_0x16d1ef;this[_0x1b3317(0x8ec)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this['addChild'](this[_0x1b3317(0x8ec)]):'ZEbJg'===_0x1b3317(0x56f)?this[_0x1b3317(0x8ad)](_0x1b3317(0x253),_0x5b167c):this[_0x1b3317(0xb16)]['addChild'](this[_0x1b3317(0x8ec)]);},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xac2)]=function(){const _0x5b889b=_0x16d1ef;this[_0x5b889b(0x476)]=new Sprite(),this[_0x5b889b(0x476)]['x']=this[_0x5b889b(0xb16)]['x'],this[_0x5b889b(0x476)]['y']=this[_0x5b889b(0xb16)]['y'],this['addChild'](this[_0x5b889b(0x476)]);},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x909)]=function(){const _0x1ad99f=_0x16d1ef;if(!this[_0x1ad99f(0x93c)]())return;this['_battlerContainer']['scale']['x']=-0x1,this[_0x1ad99f(0x7e2)]['x']=this[_0x1ad99f(0xb16)][_0x1ad99f(0x7d5)],this[_0x1ad99f(0x8e9)][_0x1ad99f(0x9fa)]['x']=-0x1,this[_0x1ad99f(0x8e9)]['x']=this[_0x1ad99f(0xb16)][_0x1ad99f(0x7d5)],this[_0x1ad99f(0x8ec)][_0x1ad99f(0x9fa)]['x']=-0x1,this['_animationContainer']['x']=this[_0x1ad99f(0xb16)]['width'],this[_0x1ad99f(0x476)]['scale']['x']=-0x1,this['_damageContainer']['x']=this[_0x1ad99f(0xb16)]['x']+this[_0x1ad99f(0xb16)][_0x1ad99f(0x7d5)];},Spriteset_Battle['prototype'][_0x16d1ef(0x62f)]=function(){const _0x2b48b9=_0x16d1ef;if(Imported[_0x2b48b9(0x6ce)]&&this[_0x2b48b9(0xa53)]()){if(_0x2b48b9(0xa01)!==_0x2b48b9(0xa01)){this['_flashColor']=_0x4f4563['flashColor']||[0x0,0x0,0x0,0x0],this[_0x2b48b9(0x821)]=_0x371960[_0x2b48b9(0x504)](this[_0x2b48b9(0x821)]),this['_flashDuration']=_0x15a046[_0x2b48b9(0x7dd)]||0x0;const _0x4858cb=this[_0x2b48b9(0xad1)](),_0x55e8b4=_0x503c7f[_0x2b48b9(0x481)](_0x4858cb*0x1e),_0x4863d0=this[_0x2b48b9(0x688)](_0x55e8b4,_0x4858cb);_0x4863d0[_0x2b48b9(0xb74)][_0x2b48b9(0x324)]=_0x10d165['getColor'](_0x321b84['textColor']),_0x4863d0[_0x2b48b9(0xb74)]['drawText'](_0x13ed73,0x0,0x0,_0x55e8b4,_0x4858cb,_0x2b48b9(0x4a0)),_0x4863d0['dy']=0x0;}else this[_0x2b48b9(0x6c8)]();}const _0x10e19c=$gameTroop['members'](),_0xf41c62=[];for(const _0x594829 of _0x10e19c){_0xf41c62[_0x2b48b9(0x8ad)](new Sprite_Enemy(_0x594829));}_0xf41c62['sort'](this['compareEnemySprite'][_0x2b48b9(0x9f7)](this));for(const _0x335e96 of _0xf41c62){'IbHha'!==_0x2b48b9(0x674)?this[_0x2b48b9(0x7e2)][_0x2b48b9(0x339)](_0x335e96):_0x2c8686[_0x2b48b9(0x8c3)][_0x2b48b9(0x315)][_0x2b48b9(0x2c7)](this,_0x64c02a);}this[_0x2b48b9(0x536)]=_0xf41c62;},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xa06)]=function(){const _0x7e697e=_0x16d1ef;this['_actorSprites']=[];for(let _0x194c4b=0x0;_0x194c4b<$gameParty[_0x7e697e(0x2d1)]();_0x194c4b++){const _0x74db57=$gameParty[_0x7e697e(0x2a7)]()[_0x194c4b],_0x7a816c=new Sprite_Actor();_0x7a816c[_0x7e697e(0x2b3)](_0x74db57),_0x7a816c[_0x7e697e(0x401)](_0x74db57),_0x7a816c[_0x7e697e(0x3e1)](),this[_0x7e697e(0x206)][_0x7e697e(0x8ad)](_0x7a816c),this[_0x7e697e(0x7e2)][_0x7e697e(0x339)](_0x7a816c);}},Spriteset_Battle['prototype']['createAnimationSprite']=function(_0x5ea70f,_0xd14bc3,_0x987e5a,_0x948a2e){const _0x5a22ff=_0x16d1ef,_0x36f932=this[_0x5a22ff(0x8ce)](_0xd14bc3),_0x3f9770=new(_0x36f932?Sprite_AnimationMV:Sprite_Animation)(),_0x21a19c=this['makeTargetSprites'](_0x5ea70f);this[_0x5a22ff(0x25d)](_0x5ea70f[0x0])&&(_0x987e5a=!_0x987e5a),_0x3f9770[_0x5a22ff(0x1ab)]=_0x5ea70f,_0x3f9770['setup'](_0x21a19c,_0xd14bc3,_0x987e5a,_0x948a2e),this[_0x5a22ff(0x7d2)](_0x3f9770);},Spriteset_Battle['prototype'][_0x16d1ef(0x7d2)]=function(_0x3b0d56){const _0x4323bf=_0x16d1ef;if(this[_0x4323bf(0x2ce)](_0x3b0d56)){if(_0x4323bf(0x231)!==_0x4323bf(0x32d))this[_0x4323bf(0xa12)]()[_0x4323bf(0x339)](_0x3b0d56);else return _0xf5eba7[_0x4323bf(0x8c3)][_0x4323bf(0x58d)][_0x4323bf(0x93b)][_0x4323bf(0xa43)];}else _0x4323bf(0xacd)!==_0x4323bf(0x179)?this[_0x4323bf(0x8ec)][_0x4323bf(0x339)](_0x3b0d56):_0x416fc3['BattleCore'][_0x4323bf(0x58d)][_0x4323bf(0x65f)]['HomePosJS']['call'](this,_0x3f12f9);this[_0x4323bf(0x20d)]['push'](_0x3b0d56);},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x2ce)]=function(_0x2675ab){const _0x3cae70=_0x16d1ef;if(!_0x2675ab)return![];if(!_0x2675ab[_0x3cae70(0x48e)])return![];if(!_0x2675ab[_0x3cae70(0x1ab)][0x0])return![];if(_0x2675ab[_0x3cae70(0x1ab)][0x0]['isActor']&&!_0x2675ab[_0x3cae70(0x1ab)][0x0]['isActor']())return![];if($gameSystem['isSideView']())return![];if(!this[_0x3cae70(0xa12)]())return![];if(_0x2675ab[_0x3cae70(0xb30)]===Sprite_Animation){if(_0x2675ab[_0x3cae70(0x48e)][_0x3cae70(0x49f)]!==0x0)return![];}else{if(_0x2675ab[_0x3cae70(0xb30)]===Sprite_AnimationMV){if(_0x2675ab[_0x3cae70(0x48e)][_0x3cae70(0x963)]===0x3)return![];}}return!![];const _0x537f93=Window_BattleStatus[_0x3cae70(0xa5b)][_0x3cae70(0x88a)]();return['xp',_0x3cae70(0x7ee)]['contains'](_0x537f93);},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xa12)]=function(){const _0x2f9315=_0x16d1ef;if(!SceneManager['_scene'])return null;if(!SceneManager['_scene'][_0x2f9315(0x2f5)])return null;if(!SceneManager[_0x2f9315(0x438)][_0x2f9315(0x2f5)][_0x2f9315(0x4d8)])return null;return SceneManager[_0x2f9315(0x438)][_0x2f9315(0x2f5)][_0x2f9315(0x4d8)];},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x29c)]=function(_0x22a40e){const _0x345ccb=_0x16d1ef;this[_0x345ccb(0xbda)](_0x22a40e);for(const _0x4679f1 of _0x22a40e[_0x345ccb(0x1ab)]){if(_0x345ccb(0x561)!==_0x345ccb(0x634))_0x4679f1[_0x345ccb(0x8dd)]&&(_0x345ccb(0x1c8)!==_0x345ccb(0x252)?_0x4679f1[_0x345ccb(0x8dd)]():_0x1e5727[_0x345ccb(0x971)]=_0x517a4e['max'](0x1,_0xde3884(_0x5a3d1b['$1'])));else return _0x246e1['aliveMembers']()[_0x345ccb(0x787)](_0xc764a=>_0xc764a!==_0x1b311f);}_0x22a40e[_0x345ccb(0x3bb)]();},Spriteset_Battle[_0x16d1ef(0xa5b)]['removeAnimationFromContainer']=function(_0x29a116){const _0x4bf76e=_0x16d1ef;this[_0x4bf76e(0x20d)]['remove'](_0x29a116),this[_0x4bf76e(0x2ce)](_0x29a116)?this[_0x4bf76e(0xa12)]()['removeChild'](_0x29a116):this[_0x4bf76e(0x8ec)][_0x4bf76e(0x656)](_0x29a116);},VisuMZ['BattleCore'][_0x16d1ef(0x654)]=Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xae7)],Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xae7)]=function(){const _0x5b222a=_0x16d1ef;VisuMZ[_0x5b222a(0x8c3)][_0x5b222a(0x654)][_0x5b222a(0x2c7)](this),this[_0x5b222a(0x573)]();},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x573)]=function(){const _0x16d3aa=_0x16d1ef;this[_0x16d3aa(0x7e2)][_0x16d3aa(0x4ef)]['sort'](this['compareBattlerSprites'][_0x16d3aa(0x9f7)](this)),this[_0x16d3aa(0x53b)]();},Spriteset_Battle['prototype']['compareBattlerSprites']=function(_0x22ecd5,_0x2099e8){const _0x24bccb=_0x16d1ef;if(VisuMZ[_0x24bccb(0x8c3)]['Settings'][_0x24bccb(0x65f)][_0x24bccb(0x33f)]){if(_0x24bccb(0x1b1)===_0x24bccb(0x1b1)){if(_0x22ecd5[_0x24bccb(0xa74)]&&_0x2099e8['_battler']){if(_0x24bccb(0xbc9)===_0x24bccb(0x320)){if(this[_0x24bccb(0x8ae)]())return;this['_immortal']=!![],this[_0x24bccb(0x4bf)]=![];}else{if(_0x22ecd5[_0x24bccb(0xa74)]['isActor']()&&_0x2099e8[_0x24bccb(0xa74)][_0x24bccb(0x8fc)]())return 0x1;else{if(_0x2099e8[_0x24bccb(0xa74)]['isActor']()&&_0x22ecd5[_0x24bccb(0xa74)]['isEnemy']())return-0x1;}}}}else this[_0x24bccb(0x205)](_0x539494,_0x48961c);}if(_0x22ecd5[_0x24bccb(0xb72)]!==_0x2099e8[_0x24bccb(0xb72)]){if('NlbQa'===_0x24bccb(0x648)){this['contents'][_0x24bccb(0x721)]();const _0x4f6f2b=_0x29e45f[_0x24bccb(0x8c3)]['Settings'][_0x24bccb(0x849)][_0x24bccb(0x7f1)],_0x26c56c=_0x4f6f2b[_0x24bccb(0x86a)](this[_0x24bccb(0x622)](),this[_0x24bccb(0xb7b)]()),_0xa81e07=this['textSizeEx'](_0x26c56c)[_0x24bccb(0x7d5)],_0x58752e=_0x443e3c[_0x24bccb(0x481)]((this['innerWidth']-_0xa81e07)/0x2);this[_0x24bccb(0x1c2)](_0x26c56c,_0x58752e,0x0,_0xa81e07);}else return _0x22ecd5[_0x24bccb(0xb72)]-_0x2099e8[_0x24bccb(0xb72)];}else{if('IaalA'===_0x24bccb(0x63b)){const _0x2af895=_0x4fabdd(_0x2c0a96['$1']);return[_0x16308d[_0x24bccb(0x9fe)]()[_0x2af895]];}else return _0x2099e8[_0x24bccb(0x818)]-_0x22ecd5['spriteId'];}},Spriteset_Battle['prototype']['putActiveBattlerOnTop']=function(){const _0x4551f9=_0x16d1ef;if(!VisuMZ[_0x4551f9(0x8c3)]['Settings'][_0x4551f9(0x65f)]['PrioritySortActive'])return;const _0x15b7cf=BattleManager[_0x4551f9(0x515)];if(_0x15b7cf){if(_0x15b7cf['isActor']()&&!$gameSystem[_0x4551f9(0xb9b)]())return;const _0x33e4bd=_0x15b7cf[_0x4551f9(0xb02)]();if(_0x33e4bd&&_0x15b7cf['isActor']())this['_battlerContainer'][_0x4551f9(0x339)](_0x33e4bd);}},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x148)]=function(){const _0x291df8=_0x16d1ef;for(const _0x445b5c of $gameParty[_0x291df8(0x888)]()){if('KGAMK'!==_0x291df8(0xb54))this[_0x291df8(0xa92)]();else{if(!_0x445b5c)continue;if(!_0x445b5c['battler']())continue;_0x445b5c[_0x291df8(0xb02)]()[_0x291df8(0x31c)]=!![],_0x445b5c['battler']()['retreat']();}}},Spriteset_Battle['prototype'][_0x16d1ef(0x556)]=function(){const _0x36fe29=_0x16d1ef;this['_uiContainer']=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this['addChild'](this['_uiContainer']):this[_0x36fe29(0xb16)][_0x36fe29(0x339)](this[_0x36fe29(0x8e9)]),SceneManager['_scene'][_0x36fe29(0x8e9)]=this[_0x36fe29(0x8e9)];},Spriteset_Battle['prototype']['createEnemyNames']=function(){const _0x4ac899=_0x16d1ef;if(VisuMZ[_0x4ac899(0x8c3)][_0x4ac899(0x58d)]['Enemy'][_0x4ac899(0x696)])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x4ac899(0x92a)](this['_enemyNameContainer']);for(const _0x10dde6 of this[_0x4ac899(0x536)]){if(_0x4ac899(0x534)!==_0x4ac899(0x534))_0x4e14e9[_0x4ac899(0x8c3)]['ParseItemNotetags'][_0x4ac899(0x2c7)](this,_0x9ec128);else{const _0x5b3a98=new Sprite_EnemyName();this[_0x4ac899(0x30b)]['addChild'](_0x5b3a98),_0x5b3a98['linkSprite'](_0x10dde6);}}},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x579)]=function(){const _0x16ad95=_0x16d1ef;if(!this[_0x16ad95(0x476)])return;if(!this[_0x16ad95(0x8e9)])return;const _0x22b7ef=Spriteset_Battle[_0x16ad95(0x69d)]?this[_0x16ad95(0x476)]['x']:0x0,_0x3a7acb=Spriteset_Battle[_0x16ad95(0x69d)]?this[_0x16ad95(0x476)]['y']:0x0,_0x499420=Imported[_0x16ad95(0x3b9)]?this[_0x16ad95(0xb16)]['x']:0x0,_0x809725=Imported[_0x16ad95(0x3b9)]?this[_0x16ad95(0xb16)]['y']:0x0;this[_0x16ad95(0x8e9)]['x']=_0x22b7ef+_0x499420,this['_uiContainer']['y']=_0x3a7acb+_0x809725;},BattleManager[_0x16d1ef(0x92a)]=function(_0x3e013d){const _0x3d977b=_0x16d1ef;if(!SceneManager[_0x3d977b(0x438)][_0x3d977b(0x8e9)])return;SceneManager['_scene']['_uiContainer']['addChild'](_0x3e013d);},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0xa49)]=function(){return![];},Spriteset_Battle['prototype'][_0x16d1ef(0x671)]=function(){const _0x3b72c8=_0x16d1ef;return this[_0x3b72c8(0x9aa)]()[_0x3b72c8(0xba9)](_0x41afdc=>_0x41afdc[_0x3b72c8(0x28f)]());},Spriteset_Battle[_0x16d1ef(0xa5b)]['isAnyoneJumping']=function(){const _0x46a131=_0x16d1ef;return this['battlerSprites']()[_0x46a131(0xba9)](_0x11c347=>_0x11c347[_0x46a131(0x76f)]());},Spriteset_Battle[_0x16d1ef(0xa5b)][_0x16d1ef(0x3ad)]=function(){const _0x16e624=_0x16d1ef;return this[_0x16e624(0x9aa)]()[_0x16e624(0xba9)](_0x2b1ff2=>_0x2b1ff2['isGrowing']());},Spriteset_Battle[_0x16d1ef(0xa5b)]['isAnyoneSkewing']=function(){const _0x40468e=_0x16d1ef;return this[_0x40468e(0x9aa)]()['some'](_0x74e806=>_0x74e806[_0x40468e(0x294)]());},Spriteset_Battle[_0x16d1ef(0xa5b)]['isAnyoneSpinning']=function(){const _0x19b1e9=_0x16d1ef;return this[_0x19b1e9(0x9aa)]()['some'](_0x1125ed=>_0x1125ed[_0x19b1e9(0x2fd)]());},Spriteset_Battle['prototype'][_0x16d1ef(0x86e)]=function(){const _0x45fab1=_0x16d1ef;return this[_0x45fab1(0x9aa)]()[_0x45fab1(0xba9)](_0x144de9=>_0x144de9[_0x45fab1(0x876)]());},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x21b)]=Window_ItemList[_0x16d1ef(0xa5b)]['maxCols'],Window_ItemList[_0x16d1ef(0xa5b)][_0x16d1ef(0x636)]=function(){const _0x52d1bc=_0x16d1ef;return SceneManager['isSceneBattle']()?SceneManager[_0x52d1bc(0x438)][_0x52d1bc(0x88a)]()===_0x52d1bc(0x6a0)?VisuMZ[_0x52d1bc(0x8c3)][_0x52d1bc(0x58d)]['BattleLayout'][_0x52d1bc(0x359)]:VisuMZ[_0x52d1bc(0x8c3)][_0x52d1bc(0x58d)][_0x52d1bc(0x66d)]['SkillItemStandardCols']:VisuMZ[_0x52d1bc(0x8c3)][_0x52d1bc(0x21b)][_0x52d1bc(0x2c7)](this);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x663)]=Window_SkillList[_0x16d1ef(0xa5b)]['maxCols'],Window_SkillList['prototype'][_0x16d1ef(0x636)]=function(){const _0x389120=_0x16d1ef;if(SceneManager[_0x389120(0x37d)]()){if(SceneManager[_0x389120(0x438)]['battleLayoutStyle']()===_0x389120(0x6a0))return VisuMZ[_0x389120(0x8c3)][_0x389120(0x58d)][_0x389120(0x66d)][_0x389120(0x359)];else{if('NYotN'===_0x389120(0xbac))return VisuMZ[_0x389120(0x8c3)][_0x389120(0x58d)][_0x389120(0x66d)]['SkillItemStandardCols'];else _0x338e2a['actionBattleCoreJS'](_0x389120(0x287));}}else return VisuMZ[_0x389120(0x8c3)]['Window_SkillList_maxCols']['call'](this);},VisuMZ['BattleCore'][_0x16d1ef(0x640)]=Window_Options[_0x16d1ef(0xa5b)][_0x16d1ef(0x74f)],Window_Options['prototype'][_0x16d1ef(0x74f)]=function(){const _0x273156=_0x16d1ef;VisuMZ[_0x273156(0x8c3)][_0x273156(0x640)][_0x273156(0x2c7)](this),this[_0x273156(0xadf)](),this[_0x273156(0x9bd)]();},Window_Options[_0x16d1ef(0xa5b)]['addAutoBattleCommands']=function(){const _0xde8265=_0x16d1ef;VisuMZ['BattleCore'][_0xde8265(0x58d)][_0xde8265(0x849)][_0xde8265(0x7de)]&&(_0xde8265(0x22e)===_0xde8265(0x519)?(this[_0xde8265(0x6e8)](),this[_0xde8265(0x5ae)]()):(this[_0xde8265(0x290)](),this[_0xde8265(0x3fd)]()));},Window_Options[_0x16d1ef(0xa5b)][_0x16d1ef(0x9bd)]=function(){const _0xa43ed1=_0x16d1ef;if(!VisuMZ[_0xa43ed1(0x8c3)][_0xa43ed1(0x58d)]['HpGauge'][_0xa43ed1(0x87f)])return;const _0x327393=TextManager[_0xa43ed1(0x9d7)],_0xbcba19=_0xa43ed1(0x9d7);this[_0xa43ed1(0x7c7)](_0x327393,_0xbcba19);},Window_Options[_0x16d1ef(0xa5b)][_0x16d1ef(0x290)]=function(){const _0x2e8718=_0x16d1ef,_0x3c7f0f=TextManager[_0x2e8718(0x7d7)],_0x181575='autoBattleAtStart';this[_0x2e8718(0x7c7)](_0x3c7f0f,_0x181575);},Window_Options['prototype']['addBattleCoreAutoBattleStyleCommand']=function(){const _0x4dfb5=_0x16d1ef,_0x5468ee=TextManager['autoBattleStyle'],_0x34bf4f='autoBattleUseSkills';this[_0x4dfb5(0x7c7)](_0x5468ee,_0x34bf4f);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x638)]=Window_Options[_0x16d1ef(0xa5b)][_0x16d1ef(0x412)],Window_Options[_0x16d1ef(0xa5b)]['statusText']=function(_0x2fdd54){const _0x1a4bc8=_0x16d1ef,_0x28d2d5=this[_0x1a4bc8(0x16f)](_0x2fdd54);if(_0x28d2d5===_0x1a4bc8(0x893)){if(_0x1a4bc8(0x843)===_0x1a4bc8(0x843))return this[_0x1a4bc8(0x4a2)]();else this[_0x1a4bc8(0x706)](_0x13f03a[_0x1a4bc8(0x85a)],0x0);}else return VisuMZ[_0x1a4bc8(0x8c3)][_0x1a4bc8(0x638)]['call'](this,_0x2fdd54);},Window_Options[_0x16d1ef(0xa5b)][_0x16d1ef(0x4a2)]=function(){const _0x1d0b27=_0x16d1ef,_0x4834d1=VisuMZ[_0x1d0b27(0x8c3)][_0x1d0b27(0x58d)][_0x1d0b27(0x849)],_0x4646ec=this['getConfigValue']('autoBattleUseSkills');return _0x4646ec?_0x4834d1[_0x1d0b27(0x7a0)]:_0x4834d1[_0x1d0b27(0x7ef)];},Window_ShopStatus[_0x16d1ef(0xa5b)]['getItemDamageAmountLabelBattleCore']=function(){const _0x1c0a2d=_0x16d1ef,_0x27ba3b=DataManager[_0x1c0a2d(0x657)](this[_0x1c0a2d(0x4f7)]),_0x9a5063=VisuMZ[_0x1c0a2d(0x7c3)][_0x27ba3b];if(!_0x9a5063)return this[_0x1c0a2d(0xaa5)]();const _0x80ced1=_0x1c0a2d(0xa7c)['format'](this['_item'][_0x1c0a2d(0x7a8)][_0x1c0a2d(0x427)]),_0x54db63=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item'][_0x1c0a2d(0x7a8)][_0x1c0a2d(0x427)]];return _0x9a5063[_0x80ced1][_0x1c0a2d(0x86a)](_0x54db63);},Window_ShopStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x666)]=function(){const _0x28078f=_0x16d1ef,_0x2f0fbb=DataManager[_0x28078f(0x657)](this[_0x28078f(0x4f7)]),_0x38b4d8=VisuMZ['DamageStyles'][_0x2f0fbb];if(!_0x38b4d8)return this['getItemDamageAmountTextOriginal']();return _0x38b4d8[_0x28078f(0x33b)]['call'](this);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x350)]=Window_PartyCommand['prototype'][_0x16d1ef(0x839)],Window_PartyCommand[_0x16d1ef(0xa5b)]['initialize']=function(_0x55c18c){const _0x53a84d=_0x16d1ef;VisuMZ['BattleCore'][_0x53a84d(0x350)][_0x53a84d(0x2c7)](this,_0x55c18c),this[_0x53a84d(0xae3)](_0x55c18c);},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0xae3)]=function(_0x2f8804){const _0x839cab=_0x16d1ef,_0x523410=new Rectangle(0x0,0x0,_0x2f8804[_0x839cab(0x7d5)],_0x2f8804[_0x839cab(0x842)]);this[_0x839cab(0xb65)]=new Window_Base(_0x523410),this[_0x839cab(0xb65)][_0x839cab(0x981)]=0x0,this[_0x839cab(0x339)](this[_0x839cab(0xb65)]),this[_0x839cab(0xb00)]();},Window_PartyCommand[_0x16d1ef(0xa5b)]['callUpdateHelp']=function(){const _0x2c406c=_0x16d1ef;Window_Command[_0x2c406c(0xa5b)][_0x2c406c(0x22f)]['call'](this);if(this[_0x2c406c(0xb65)])this[_0x2c406c(0xb00)]();},Window_PartyCommand[_0x16d1ef(0xa5b)]['updateCommandNameWindow']=function(){const _0x3f4a1e=_0x16d1ef,_0x364401=this[_0x3f4a1e(0xb65)];_0x364401[_0x3f4a1e(0xaee)]['clear']();const _0x3c4a01=this[_0x3f4a1e(0x820)](this[_0x3f4a1e(0x830)]());if(_0x3c4a01===_0x3f4a1e(0x95c)&&this[_0x3f4a1e(0x177)]()>0x0){if(_0x3f4a1e(0xae5)!=='EfVQT')this[_0x3f4a1e(0x775)](_0x96558d,_0x2103d0,_0xf3fac9);else{const _0x27dfb6=this[_0x3f4a1e(0x911)](this['index']());let _0x462f99=this[_0x3f4a1e(0xa6c)](this[_0x3f4a1e(0x830)]());_0x462f99=_0x462f99['replace'](/\\I\[(\d+)\]/gi,''),_0x364401[_0x3f4a1e(0x662)](),this['commandNameWindowDrawBackground'](_0x462f99,_0x27dfb6),this[_0x3f4a1e(0x61a)](_0x462f99,_0x27dfb6),this[_0x3f4a1e(0x183)](_0x462f99,_0x27dfb6);}}},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x6da)]=function(_0x2c2d00,_0x11a11f){},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x61a)]=function(_0x3702b1,_0x444814){const _0x45bf9b=_0x16d1ef,_0x40712e=this[_0x45bf9b(0xb65)];_0x40712e[_0x45bf9b(0x7fb)](_0x3702b1,0x0,_0x444814['y'],_0x40712e[_0x45bf9b(0xbd6)],_0x45bf9b(0x4a0));},Window_PartyCommand[_0x16d1ef(0xa5b)]['commandNameWindowCenter']=function(_0x38648a,_0x467e2e){const _0x57c850=_0x16d1ef,_0x45fb11=this[_0x57c850(0xb65)],_0x188067=$gameSystem['windowPadding'](),_0x188409=_0x467e2e['x']+Math[_0x57c850(0x481)](_0x467e2e['width']/0x2)+_0x188067;_0x45fb11['x']=_0x45fb11['width']/-0x2+_0x188409,_0x45fb11['y']=Math[_0x57c850(0x481)](_0x467e2e[_0x57c850(0x842)]/0x2);},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x2fc)]=function(){const _0x29b5aa=_0x16d1ef;this['addFightCommand'](),this[_0x29b5aa(0x979)](),this[_0x29b5aa(0xa97)](),this['addOptionsCommand'](),this[_0x29b5aa(0x4a8)]();},Window_PartyCommand['prototype'][_0x16d1ef(0x786)]=function(){const _0x2f1b02=_0x16d1ef,_0xf43fe7=this[_0x2f1b02(0x802)](),_0x7374dc=VisuMZ['BattleCore'][_0x2f1b02(0x58d)][_0x2f1b02(0x810)][_0x2f1b02(0xabf)],_0x1677db=_0xf43fe7===_0x2f1b02(0x980)?TextManager[_0x2f1b02(0x9ed)]:'\x5cI[%1]%2'['format'](_0x7374dc,TextManager[_0x2f1b02(0x9ed)]),_0xe814bb=this['isFightCommandEnabled']();this[_0x2f1b02(0x7c7)](_0x1677db,_0x2f1b02(0x9ed),_0xe814bb);},Window_PartyCommand['prototype'][_0x16d1ef(0xac3)]=function(){return!![];},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x979)]=function(){const _0x324ee8=_0x16d1ef;if(!this['isAutoBattleCommandAdded']())return;const _0x60f47d=this[_0x324ee8(0x802)](),_0x47efc1=VisuMZ[_0x324ee8(0x8c3)][_0x324ee8(0x58d)][_0x324ee8(0x810)]['CmdIconAutoBattle'],_0x6cadf2=_0x60f47d===_0x324ee8(0x980)?TextManager[_0x324ee8(0x3fa)]:'\x5cI[%1]%2'[_0x324ee8(0x86a)](_0x47efc1,TextManager[_0x324ee8(0x3fa)]),_0x22b11c=this['isAutoBattleCommandEnabled']();this['addCommand'](_0x6cadf2,_0x324ee8(0x3fa),_0x22b11c);},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x477)]=function(){const _0x46b126=_0x16d1ef;return VisuMZ['BattleCore'][_0x46b126(0x58d)]['PartyCmd'][_0x46b126(0x568)];},Window_PartyCommand[_0x16d1ef(0xa5b)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x16d1ef(0xa97)]=function(){},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0xa78)]=function(){const _0x50acee=_0x16d1ef;if(!this[_0x50acee(0xb0f)]())return;const _0x2323b0=this[_0x50acee(0x802)](),_0x3e49ae=VisuMZ['BattleCore'][_0x50acee(0x58d)][_0x50acee(0x810)][_0x50acee(0x51a)],_0x482a07=_0x2323b0==='text'?TextManager[_0x50acee(0xa07)]:_0x50acee(0x7f7)['format'](_0x3e49ae,TextManager['options']),_0x37b665=this[_0x50acee(0xb34)]();this[_0x50acee(0x7c7)](_0x482a07,_0x50acee(0xa07),_0x37b665);},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0xb0f)]=function(){const _0x193bb6=_0x16d1ef;return VisuMZ[_0x193bb6(0x8c3)]['Settings'][_0x193bb6(0x810)][_0x193bb6(0x311)];},Window_PartyCommand[_0x16d1ef(0xa5b)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x4a8)]=function(){const _0x25eb25=_0x16d1ef,_0x5698a5=this['commandStyle'](),_0x1ee898=VisuMZ[_0x25eb25(0x8c3)][_0x25eb25(0x58d)][_0x25eb25(0x810)][_0x25eb25(0x1a6)],_0x333673=_0x5698a5===_0x25eb25(0x980)?TextManager['escape']:_0x25eb25(0x7f7)[_0x25eb25(0x86a)](_0x1ee898,TextManager[_0x25eb25(0x77a)]),_0xda9108=this['isEscapeCommandEnabled']();this[_0x25eb25(0x7c7)](_0x333673,_0x25eb25(0x77a),_0xda9108);},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x273)]=function(){const _0x213f1b=_0x16d1ef;return BattleManager[_0x213f1b(0x13c)]();},Window_PartyCommand['prototype'][_0x16d1ef(0xa0c)]=function(){const _0x4f8d20=_0x16d1ef;return VisuMZ[_0x4f8d20(0x8c3)][_0x4f8d20(0x58d)][_0x4f8d20(0x810)][_0x4f8d20(0x4dc)];},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x8e4)]=function(_0x39a30c){const _0x6e9eef=_0x16d1ef,_0x472f63=this[_0x6e9eef(0x820)](_0x39a30c);if(_0x472f63===_0x6e9eef(0x554))this[_0x6e9eef(0xb46)](_0x39a30c);else{if(_0x472f63===_0x6e9eef(0x95c)){if(_0x6e9eef(0x2a6)===_0x6e9eef(0x2a6))this['drawItemStyleIcon'](_0x39a30c);else return _0x998596(_0x397a12['$1'])[_0x6e9eef(0x31e)](/[\r\n]+/);}else Window_Command[_0x6e9eef(0xa5b)]['drawItem'][_0x6e9eef(0x2c7)](this,_0x39a30c);}},Window_PartyCommand[_0x16d1ef(0xa5b)]['commandStyle']=function(){const _0x24b310=_0x16d1ef;return VisuMZ[_0x24b310(0x8c3)][_0x24b310(0x58d)][_0x24b310(0x810)]['CmdStyle'];},Window_PartyCommand[_0x16d1ef(0xa5b)]['commandStyleCheck']=function(_0x425686){const _0x5efa4f=_0x16d1ef;if(_0x425686<0x0)return _0x5efa4f(0x980);const _0x2eff3f=this[_0x5efa4f(0x802)]();if(_0x2eff3f!=='auto')return _0x2eff3f;else{if(this['maxItems']()>0x0){const _0x54fdbd=this[_0x5efa4f(0xa6c)](_0x425686);if(_0x54fdbd[_0x5efa4f(0xaf1)](/\\I\[(\d+)\]/i)){if(_0x5efa4f(0x36b)!==_0x5efa4f(0xa5c)){const _0x1f93f6=this['itemLineRect'](_0x425686),_0x524acf=this[_0x5efa4f(0x655)](_0x54fdbd)[_0x5efa4f(0x7d5)];return _0x524acf<=_0x1f93f6['width']?_0x5efa4f(0x554):_0x5efa4f(0xb0e)!==_0x5efa4f(0x886)?'icon':0x0;}else return _0x3da981[_0x5efa4f(0x3c9)][0x0];}}}return _0x5efa4f(0x980);},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0xb46)]=function(_0x4515b1){const _0x21f834=_0x16d1ef,_0x2d407c=this[_0x21f834(0x911)](_0x4515b1),_0x39a9b9=this['commandName'](_0x4515b1),_0x59f992=this[_0x21f834(0x655)](_0x39a9b9)[_0x21f834(0x7d5)];this[_0x21f834(0x202)](this['isCommandEnabled'](_0x4515b1));const _0x299424=this['itemTextAlign']();if(_0x299424===_0x21f834(0x766))this[_0x21f834(0x1c2)](_0x39a9b9,_0x2d407c['x']+_0x2d407c['width']-_0x59f992,_0x2d407c['y'],_0x59f992);else{if(_0x299424===_0x21f834(0x4a0)){const _0x3c855f=_0x2d407c['x']+Math[_0x21f834(0x481)]((_0x2d407c['width']-_0x59f992)/0x2);this[_0x21f834(0x1c2)](_0x39a9b9,_0x3c855f,_0x2d407c['y'],_0x59f992);}else this['drawTextEx'](_0x39a9b9,_0x2d407c['x'],_0x2d407c['y'],_0x59f992);}},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x90c)]=function(_0x28d578){const _0x510f2f=_0x16d1ef;this[_0x510f2f(0xa6c)](_0x28d578)[_0x510f2f(0xaf1)](/\\I\[(\d+)\]/i);const _0x431803=Number(RegExp['$1'])||0x0,_0x300f09=this['itemLineRect'](_0x28d578),_0x4d2d90=_0x300f09['x']+Math[_0x510f2f(0x481)]((_0x300f09['width']-ImageManager[_0x510f2f(0x372)])/0x2),_0x4f8f3c=_0x300f09['y']+(_0x300f09[_0x510f2f(0x842)]-ImageManager[_0x510f2f(0x4b5)])/0x2;this['drawIcon'](_0x431803,_0x4d2d90,_0x4f8f3c);},Window_PartyCommand[_0x16d1ef(0xa5b)]['hide']=function(){},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x9b6)]=function(){const _0x2e905a=_0x16d1ef;Window_Command['prototype']['activate'][_0x2e905a(0x2c7)](this);const _0x5cf37e=this[_0x2e905a(0x88a)]();if(_0x5cf37e===_0x2e905a(0x6a0)){if(_0x2e905a(0x625)!=='AjkYT')this[_0x2e905a(0x528)]();else{const _0x29854a=_0x6eecd5[_0x19678c];_0x29854a?this['setup'](_0x29854a[_0x2e905a(0x85a)],0x0):this['terminate']();}}},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x88a)]=function(){const _0x368c98=_0x16d1ef;if(this[_0x368c98(0x950)])return this['_battleLayoutStyle'];return this[_0x368c98(0x950)]=SceneManager[_0x368c98(0x438)][_0x368c98(0x88a)](),this[_0x368c98(0x950)];},Window_PartyCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x178)]=function(){const _0xf11dd6=_0x16d1ef,_0x1fbb12=VisuMZ['BattleCore']['Settings']['PartyCmd'],_0x138cb0=this[_0xf11dd6(0x37f)]();switch(_0x138cb0){case _0xf11dd6(0x9ed):this[_0xf11dd6(0x4ed)][_0xf11dd6(0x450)](_0x1fbb12[_0xf11dd6(0x410)]);break;case _0xf11dd6(0x3fa):this[_0xf11dd6(0x4ed)][_0xf11dd6(0x450)](_0x1fbb12[_0xf11dd6(0xa7a)]);break;case _0xf11dd6(0xa07):this[_0xf11dd6(0x4ed)][_0xf11dd6(0x450)](_0x1fbb12['HelpOptions']);break;case _0xf11dd6(0x77a):this[_0xf11dd6(0x4ed)][_0xf11dd6(0x450)](_0x1fbb12[_0xf11dd6(0x399)]);break;default:this[_0xf11dd6(0x4ed)]['setText']('');break;}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xb59)]=Window_ActorCommand['prototype']['initialize'],Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)]=function(_0x1fb91c){const _0x126e1a=_0x16d1ef;VisuMZ[_0x126e1a(0x8c3)][_0x126e1a(0xb59)][_0x126e1a(0x2c7)](this,_0x1fb91c),this['createCommandNameWindow'](_0x1fb91c);},Window_ActorCommand['prototype'][_0x16d1ef(0xae3)]=function(_0x28fca5){const _0xceaee=_0x16d1ef,_0x4d7f01=new Rectangle(0x0,0x0,_0x28fca5['width'],_0x28fca5[_0xceaee(0x842)]);this[_0xceaee(0xb65)]=new Window_Base(_0x4d7f01),this['_commandNameWindow']['opacity']=0x0,this['addChild'](this[_0xceaee(0xb65)]),this['updateCommandNameWindow']();},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x22f)]=function(){const _0x2d3d40=_0x16d1ef;Window_Command[_0x2d3d40(0xa5b)]['callUpdateHelp']['call'](this);if(this[_0x2d3d40(0xb65)])this[_0x2d3d40(0xb00)]();},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0xb00)]=function(){const _0x670494=_0x16d1ef,_0x5a6958=this[_0x670494(0xb65)];_0x5a6958[_0x670494(0xaee)][_0x670494(0x721)]();const _0x9d45f3=this[_0x670494(0x820)](this[_0x670494(0x830)]());if(_0x9d45f3===_0x670494(0x95c)&&this['maxItems']()>0x0){const _0x129775=this[_0x670494(0x911)](this[_0x670494(0x830)]());let _0x25503a=this[_0x670494(0xa6c)](this[_0x670494(0x830)]());_0x25503a=_0x25503a[_0x670494(0x541)](/\\I\[(\d+)\]/gi,''),_0x5a6958[_0x670494(0x662)](),this[_0x670494(0x6da)](_0x25503a,_0x129775),this[_0x670494(0x61a)](_0x25503a,_0x129775),this[_0x670494(0x183)](_0x25503a,_0x129775);}},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x6da)]=function(_0x54b5e6,_0x26dc05){},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x61a)]=function(_0x3d6745,_0x4958c0){const _0x518a1d=_0x16d1ef,_0x17da71=this[_0x518a1d(0xb65)];_0x17da71[_0x518a1d(0x7fb)](_0x3d6745,0x0,_0x4958c0['y'],_0x17da71[_0x518a1d(0xbd6)],'center');},Window_ActorCommand['prototype'][_0x16d1ef(0x183)]=function(_0x44bb91,_0x5c9bca){const _0x575803=_0x16d1ef,_0x52b6d9=this['_commandNameWindow'],_0x2e2d6b=$gameSystem[_0x575803(0x1a1)](),_0x148f54=_0x5c9bca['x']+Math[_0x575803(0x481)](_0x5c9bca[_0x575803(0x7d5)]/0x2)+_0x2e2d6b;_0x52b6d9['x']=_0x52b6d9[_0x575803(0x7d5)]/-0x2+_0x148f54,_0x52b6d9['y']=Math[_0x575803(0x481)](_0x5c9bca['height']/0x2);},Window_ActorCommand[_0x16d1ef(0xa5b)]['makeCommandList']=function(){const _0x27afc5=_0x16d1ef;if(!this[_0x27afc5(0x316)])return;const _0x3bfe52=this[_0x27afc5(0x316)]['battleCommands']();for(const _0x2325e4 of _0x3bfe52){this['makeBattleCommand'](_0x2325e4[_0x27afc5(0xaff)]()[_0x27afc5(0x699)]());}},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x9b9)]=function(_0x2fd1b0){const _0x3c7d3b=_0x16d1ef;_0x2fd1b0===_0x3c7d3b(0x162)&&this[_0x3c7d3b(0xa92)]();if([_0x3c7d3b(0x998),_0x3c7d3b(0x5e3)][_0x3c7d3b(0x4f8)](_0x2fd1b0)){if('CDzLv'===_0x3c7d3b(0x428)){if(!_0x293e54[_0x3c7d3b(0x37d)]())return;if(!_0x2432f6[_0x3c7d3b(0x1c5)])return;_0x58cbb7[_0x3c7d3b(0x5ea)](_0x14b981,_0x44f599);const _0x1435c3=_0x3c28fd[_0x3c7d3b(0xb38)](),_0x44df11=_0xc1b75e[_0x3c7d3b(0x7b2)];if(!_0x1435c3)return;const _0x50fdaf=_0x5e9731[_0x3c7d3b(0x71a)];if(!_0x50fdaf)return;_0x50fdaf['createActionSequenceProjectile'](_0xef180a);if(_0x44df11)_0x1435c3[_0x3c7d3b(0x13b)](_0x3c7d3b(0x40d));}else this[_0x3c7d3b(0x386)]();}_0x2fd1b0===_0x3c7d3b(0x60f)&&this['addGuardCommand']();if(_0x2fd1b0==='ITEM'){if(_0x3c7d3b(0x5c7)===_0x3c7d3b(0x15a))return this[_0x3c7d3b(0x7fd)]();else this[_0x3c7d3b(0x2e2)]();}_0x2fd1b0===_0x3c7d3b(0x334)&&this[_0x3c7d3b(0x4a8)]();_0x2fd1b0==='AUTO\x20BATTLE'&&this[_0x3c7d3b(0x979)]();if(_0x2fd1b0[_0x3c7d3b(0xaf1)](/STYPE: (\d+)/i)){const _0x5deb39=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x5deb39);}else{if(_0x2fd1b0['match'](/STYPE: (.*)/i)){const _0x2c01c0=DataManager[_0x3c7d3b(0x4a3)](RegExp['$1']);this[_0x3c7d3b(0x460)](_0x2c01c0);}}if(_0x2fd1b0===_0x3c7d3b(0x280)){if(_0x3c7d3b(0x9d6)===_0x3c7d3b(0xbc6))return _0x3674d4[_0x3c7d3b(0x8c3)][_0x3c7d3b(0x58d)][_0x3c7d3b(0x65f)][_0x3c7d3b(0xa1e)];else this['addSingleSkillCommands']();}if(_0x2fd1b0[_0x3c7d3b(0xaf1)](/SKILL: (\d+)/i)){const _0x283655=Number(RegExp['$1']);this[_0x3c7d3b(0x19e)]($dataSkills[_0x283655]);}else{if(_0x2fd1b0[_0x3c7d3b(0xaf1)](/SKILL: (.*)/i)){const _0x31c035=DataManager[_0x3c7d3b(0x3ae)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x31c035]);}}_0x2fd1b0==='PARTY'&&Imported[_0x3c7d3b(0x854)]&&this[_0x3c7d3b(0xa45)]();[_0x3c7d3b(0x317),_0x3c7d3b(0x69a)][_0x3c7d3b(0x4f8)](_0x2fd1b0)&&Imported[_0x3c7d3b(0x8c5)]&&this[_0x3c7d3b(0x158)]();if(_0x2fd1b0===_0x3c7d3b(0x416)&&Imported[_0x3c7d3b(0x518)]){if(_0x3c7d3b(0x78b)!==_0x3c7d3b(0x78b)){const _0x7b6c2f=new _0x4aaeef(_0xda25f7);this[_0x3c7d3b(0x30b)][_0x3c7d3b(0x339)](_0x7b6c2f);}else this[_0x3c7d3b(0x512)](!![]);}},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0xa92)]=function(){const _0x48a551=_0x16d1ef,_0x32d053=$dataSkills[this[_0x48a551(0x316)][_0x48a551(0x577)]()];if(!_0x32d053)return;if(!this[_0x48a551(0x489)](_0x32d053))return;const _0x5f2696=this[_0x48a551(0x802)](),_0x5492fe=DataManager[_0x48a551(0x567)](_0x32d053),_0x4d252f=DataManager['battleCommandIcon'](_0x32d053),_0x9b6090=_0x5f2696===_0x48a551(0x980)?_0x5492fe:_0x48a551(0x7f7)[_0x48a551(0x86a)](_0x4d252f,_0x5492fe);this[_0x48a551(0x7c7)](_0x9b6090,'attack',this['_actor']['canAttack']());},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x17d)]=function(){const _0x2f7fac=_0x16d1ef,_0x2e228f=$dataSkills[this[_0x2f7fac(0x316)][_0x2f7fac(0xa60)]()];if(!_0x2e228f)return;if(!this[_0x2f7fac(0x489)](_0x2e228f))return;const _0x519d9d=this[_0x2f7fac(0x802)](),_0x17c8b9=DataManager['battleCommandName'](_0x2e228f),_0x8f10b9=DataManager['battleCommandIcon'](_0x2e228f),_0x342e52=_0x519d9d==='text'?_0x17c8b9:_0x2f7fac(0x7f7)[_0x2f7fac(0x86a)](_0x8f10b9,_0x17c8b9);this[_0x2f7fac(0x7c7)](_0x342e52,_0x2f7fac(0xa31),this[_0x2f7fac(0x316)][_0x2f7fac(0x1a3)]());},Window_ActorCommand['prototype'][_0x16d1ef(0x2e2)]=function(){const _0x2b1c1c=_0x16d1ef,_0x4cd822=this[_0x2b1c1c(0x802)](),_0x5d73ca=VisuMZ['BattleCore'][_0x2b1c1c(0x58d)]['ActorCmd'][_0x2b1c1c(0x6b3)],_0x34c8b4=_0x4cd822===_0x2b1c1c(0x980)?TextManager[_0x2b1c1c(0x74a)]:_0x2b1c1c(0x7f7)['format'](_0x5d73ca,TextManager['item']),_0x870614=this[_0x2b1c1c(0x331)]();this[_0x2b1c1c(0x7c7)](_0x34c8b4,_0x2b1c1c(0x74a),_0x870614);},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x331)]=function(){const _0x44b470=_0x16d1ef;return this['_actor']&&this[_0x44b470(0x316)][_0x44b470(0x23f)]();},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x386)]=function(){const _0x1bf8fe=_0x16d1ef,_0x561c03=this[_0x1bf8fe(0x316)][_0x1bf8fe(0xb6d)]();for(const _0x3b8db9 of _0x561c03){_0x1bf8fe(0xb93)==='LRSkg'?(_0x50cdee[_0x1bf8fe(0x6f4)]=_0x36bebc['_ptbActionCost']||{},_0x2af115[_0x1bf8fe(0x6f4)][_0x1bf8fe(0x7aa)]=0x0):this[_0x1bf8fe(0x460)](_0x3b8db9);}},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x460)]=function(_0x3ccf52){const _0xdd2ac4=_0x16d1ef;let _0x56ae9b=$dataSystem[_0xdd2ac4(0xb6d)][_0x3ccf52];if(!_0x56ae9b)return;let _0x82caf=_0x56ae9b;const _0x496728=this[_0xdd2ac4(0x802)]();if(_0x496728===_0xdd2ac4(0x980))_0x82caf=_0x82caf[_0xdd2ac4(0x541)](/\x1I\[(\d+)\]/gi,''),_0x82caf=_0x82caf[_0xdd2ac4(0x541)](/\\I\[(\d+)\]/gi,'');else{if(!_0x56ae9b[_0xdd2ac4(0xaf1)](/\\I\[(\d+)\]/i)){if(_0xdd2ac4(0x2be)===_0xdd2ac4(0x2be)){const _0x370dd0=Imported[_0xdd2ac4(0xa3d)]?VisuMZ[_0xdd2ac4(0x66f)][_0xdd2ac4(0x58d)]['Skills']:VisuMZ[_0xdd2ac4(0x8c3)]['Settings']['ActorCmd'],_0x1b21d1=$dataSystem['magicSkills']['includes'](_0x3ccf52),_0x2fb462=_0x1b21d1?_0x370dd0[_0xdd2ac4(0x46b)]:_0x370dd0[_0xdd2ac4(0x233)];_0x82caf='\x5cI[%1]%2'[_0xdd2ac4(0x86a)](_0x2fb462,_0x56ae9b);}else this['_actorCommandWindow'][_0xdd2ac4(0x1fb)]();}}this[_0xdd2ac4(0x7c7)](_0x82caf,_0xdd2ac4(0x2b0),!![],_0x3ccf52);},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x197)]=function(){const _0x257510=_0x16d1ef,_0xf9a428=this[_0x257510(0x316)][_0x257510(0xb6d)](),_0x41bd51=this[_0x257510(0x316)][_0x257510(0xad6)]();for(const _0x5b46b9 of _0x41bd51){if(!_0x5b46b9)continue;if(Imported[_0x257510(0xa3d)]){if(this['noSimilarSTypes'](_0x5b46b9))continue;if(this['isHiddenSkill'](_0x5b46b9))continue;}else{if(!_0xf9a428[_0x257510(0x4f8)](_0x5b46b9[_0x257510(0x54c)])){if('kAfnw'===_0x257510(0xa3c))continue;else this[_0x257510(0xaf2)]();}}this[_0x257510(0x19e)](_0x5b46b9);}},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x9cf)]=function(_0x3b4d03){const _0x996b76=_0x16d1ef,_0x28c505=this[_0x996b76(0x316)][_0x996b76(0xb6d)](),_0xa39e1e=_0x28c505[_0x996b76(0x787)](_0x4c99fb=>DataManager[_0x996b76(0x3b6)](_0x3b4d03)[_0x996b76(0x4f8)](_0x4c99fb));return _0xa39e1e['length']<=0x0;},Window_ActorCommand[_0x16d1ef(0xa5b)]['isHiddenSkill']=function(_0x4c1564){const _0x3a7614=_0x16d1ef;if(!Window_SkillList[_0x3a7614(0xa5b)][_0x3a7614(0x8ef)]['call'](this,_0x4c1564))return!![];if(!Window_SkillList[_0x3a7614(0xa5b)][_0x3a7614(0x4fd)][_0x3a7614(0x2c7)](this,_0x4c1564))return!![];if(!Window_SkillList[_0x3a7614(0xa5b)][_0x3a7614(0x735)][_0x3a7614(0x2c7)](this,_0x4c1564))return!![];return![];},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x19e)]=function(_0xc7171){const _0x1eacb6=_0x16d1ef;if(!_0xc7171)return;if(!this[_0x1eacb6(0x489)](_0xc7171))return;const _0x12013f=this[_0x1eacb6(0x802)](),_0x43dfc8=DataManager['battleCommandName'](_0xc7171),_0xbf10d3=DataManager['battleCommandIcon'](_0xc7171),_0x3ef633=_0x12013f===_0x1eacb6(0x980)?_0x43dfc8:_0x1eacb6(0x7f7)['format'](_0xbf10d3,_0x43dfc8),_0x33cc77=this[_0x1eacb6(0x316)][_0x1eacb6(0x1d8)](_0xc7171);this[_0x1eacb6(0x7c7)](_0x3ef633,_0x1eacb6(0x6fb),_0x33cc77,_0xc7171['id']);},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x489)]=function(_0x22af23){const _0x3ba562=_0x16d1ef,_0x13eca2=_0x22af23[_0x3ba562(0x954)];if(_0x13eca2['match'](/<COMMAND REQUIRE LEARN>/i)){if(_0x3ba562(0xa6b)===_0x3ba562(0xb1e))this['selectNextActor']();else{if(!this[_0x3ba562(0x316)][_0x3ba562(0x7b7)](_0x22af23['id']))return![];}}if(_0x13eca2[_0x3ba562(0xaf1)](/<COMMAND REQUIRE ACCESS>/i)){if(_0x3ba562(0x342)===_0x3ba562(0x342)){if(!this[_0x3ba562(0x316)][_0x3ba562(0xac1)](_0x22af23['id']))return![];}else this[_0x3ba562(0x153)]();}const _0x3134b8=VisuMZ[_0x3ba562(0x8c3)][_0x3ba562(0x6d9)](_0x22af23,_0x3ba562(0x292));if(VisuMZ[_0x3ba562(0x8c3)]['JS'][_0x3134b8]){if(!VisuMZ['BattleCore']['JS'][_0x3134b8][_0x3ba562(0x2c7)](this,this[_0x3ba562(0x316)],_0x22af23))return![];}return VisuMZ[_0x3ba562(0x8c3)][_0x3ba562(0x5fe)](_0x22af23);},VisuMZ[_0x16d1ef(0x8c3)]['CheckSkillCommandShowSwitches']=function(_0x45a6e5){const _0x22341f=_0x16d1ef,_0x378793=_0x45a6e5[_0x22341f(0x954)];if(_0x378793[_0x22341f(0xaf1)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x299306=JSON['parse']('['+RegExp['$1'][_0x22341f(0xaf1)](/\d+/g)+']');for(const _0x13ad21 of _0x299306){if(_0x22341f(0xb99)===_0x22341f(0xb99)){if(!$gameSwitches[_0x22341f(0x4be)](_0x13ad21))return![];}else{if(!_0xd655f7[_0x22341f(0x37d)]())return;if(!this['battler']())return;if(_0x4dff73[_0x22341f(0xa40)]<=0x0)return;_0x4242bb=_0x216366||{},_0x20d3fa['textColor']=_0x1f8c84[_0x22341f(0x324)]||_0x22341f(0xba4),_0x37544c['flashColor']=_0x5455a9[_0x22341f(0x198)]||[0x0,0x0,0x0,0x0],_0x2a9039['flashDuration']=_0x18da56[_0x22341f(0x7dd)]||0x0,this['battler']()['setupTextPopup'](_0x22effe,_0x2461de);}}return!![];}if(_0x378793[_0x22341f(0xaf1)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x14ebe3=JSON['parse']('['+RegExp['$1'][_0x22341f(0xaf1)](/\d+/g)+']');for(const _0xf1b492 of _0x14ebe3){if(_0x22341f(0x135)===_0x22341f(0x135)){if(!$gameSwitches[_0x22341f(0x4be)](_0xf1b492))return![];}else{_0x59f2ec[_0x22341f(0x6ce)]&&this[_0x22341f(0xa53)]()&&this['repositionEnemiesByResolution']();const _0x30c5c3=_0x21df10[_0x22341f(0x9fe)](),_0x2635fc=[];for(const _0x1951b6 of _0x30c5c3){_0x2635fc[_0x22341f(0x8ad)](new _0x44043d(_0x1951b6));}_0x2635fc['sort'](this['compareEnemySprite'][_0x22341f(0x9f7)](this));for(const _0x3d8228 of _0x2635fc){this[_0x22341f(0x7e2)][_0x22341f(0x339)](_0x3d8228);}this[_0x22341f(0x536)]=_0x2635fc;}}return!![];}if(_0x378793[_0x22341f(0xaf1)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x16944f=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x1d42ad of _0x16944f){if($gameSwitches[_0x22341f(0x4be)](_0x1d42ad))return!![];}return![];}if(_0x378793[_0x22341f(0xaf1)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3de96e=JSON[_0x22341f(0x5d3)]('['+RegExp['$1'][_0x22341f(0xaf1)](/\d+/g)+']');for(const _0x3ac76e of _0x3de96e){if(!$gameSwitches[_0x22341f(0x4be)](_0x3ac76e))return!![];}return![];}if(_0x378793['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x59c6dc=JSON[_0x22341f(0x5d3)]('['+RegExp['$1'][_0x22341f(0xaf1)](/\d+/g)+']');for(const _0x131143 of _0x59c6dc){if(!$gameSwitches['value'](_0x131143))return!![];}return![];}if(_0x378793[_0x22341f(0xaf1)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x22341f(0x7ea)===_0x22341f(0x7ea)){const _0x36965d=JSON[_0x22341f(0x5d3)]('['+RegExp['$1'][_0x22341f(0xaf1)](/\d+/g)+']');for(const _0x5972f of _0x36965d){if($gameSwitches['value'](_0x5972f))return![];}return!![];}else return _0x1c06dc['weapons']()[_0x22341f(0xa40)]||0x1;}return!![];},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x4a8)]=function(){const _0x3fca6c=_0x16d1ef,_0x531eb3=this[_0x3fca6c(0x802)](),_0x42ceb0=VisuMZ[_0x3fca6c(0x8c3)][_0x3fca6c(0x58d)]['PartyCmd'][_0x3fca6c(0x1a6)],_0x455dbc=_0x531eb3==='text'?TextManager['escape']:_0x3fca6c(0x7f7)[_0x3fca6c(0x86a)](_0x42ceb0,TextManager[_0x3fca6c(0x77a)]),_0x3dc3ae=this[_0x3fca6c(0x273)]();this[_0x3fca6c(0x7c7)](_0x455dbc,_0x3fca6c(0x77a),_0x3dc3ae);},Window_ActorCommand['prototype']['isEscapeCommandEnabled']=function(){const _0x39e55c=_0x16d1ef;return BattleManager[_0x39e55c(0x13c)]();},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x979)]=function(){const _0x79721=_0x16d1ef,_0x55664a=this[_0x79721(0x802)](),_0x5072a6=VisuMZ[_0x79721(0x8c3)][_0x79721(0x58d)][_0x79721(0x810)][_0x79721(0x8ab)],_0x26e935=_0x55664a===_0x79721(0x980)?TextManager[_0x79721(0x3fa)]:_0x79721(0x7f7)[_0x79721(0x86a)](_0x5072a6,TextManager[_0x79721(0x3fa)]),_0x33c7ff=this[_0x79721(0x743)]();this[_0x79721(0x7c7)](_0x26e935,'autoBattle',_0x33c7ff);},Window_ActorCommand[_0x16d1ef(0xa5b)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0xa0c)]=function(){const _0x45cbdc=_0x16d1ef;return VisuMZ['BattleCore']['Settings']['ActorCmd'][_0x45cbdc(0x4dc)];},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x8e4)]=function(_0x4967a9){const _0x5460a6=_0x16d1ef,_0x49258d=this['commandStyleCheck'](_0x4967a9);if(_0x49258d===_0x5460a6(0x554))this['drawItemStyleIconText'](_0x4967a9);else{if(_0x49258d==='icon')this['drawItemStyleIcon'](_0x4967a9);else{if(_0x5460a6(0xb33)===_0x5460a6(0x424))return _0x464216[_0x5460a6(0x8c3)][_0x5460a6(0x68c)]['call'](this);else Window_Command['prototype'][_0x5460a6(0x8e4)]['call'](this,_0x4967a9);}}this[_0x5460a6(0x189)](_0x4967a9);},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x802)]=function(){const _0x5dc618=_0x16d1ef;return VisuMZ['BattleCore']['Settings'][_0x5dc618(0x6c1)][_0x5dc618(0xb18)];},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x820)]=function(_0x211667){const _0x9dd449=_0x16d1ef;if(_0x211667<0x0)return _0x9dd449(0x980);const _0x410a1c=this[_0x9dd449(0x802)]();if(_0x410a1c!=='auto')return _0x410a1c;else{if(this['maxItems']()>0x0){if('myAzE'!==_0x9dd449(0x506)){const _0x4a1802=this['commandName'](_0x211667);if(_0x4a1802['match'](/\\I\[(\d+)\]/i)){const _0x302d51=this['itemLineRect'](_0x211667),_0x5f5b90=this[_0x9dd449(0x655)](_0x4a1802)['width'];if(_0x5f5b90<=_0x302d51[_0x9dd449(0x7d5)]){if(_0x9dd449(0x470)===_0x9dd449(0x470))return _0x9dd449(0x554);else{if(!this[_0x9dd449(0xa74)])return![];if(this[_0x9dd449(0xa74)][_0x9dd449(0x71d)]())return!![];if(this[_0x9dd449(0xa74)][_0x9dd449(0x403)]())return![];if(this[_0x9dd449(0x981)]<=0x0)return![];const _0xf702aa=this[_0x9dd449(0xa74)]['enemy']()[_0x9dd449(0x954)];if(_0xf702aa['match'](/<SHOW HP GAUGE>/i))return!![];if(_0xf702aa['match'](/<HIDE HP GAUGE>/i))return![];const _0x51ce28=_0xe8af1f[_0x9dd449(0x8c3)]['Settings'][_0x9dd449(0xa27)];if(_0x51ce28['RequiresDefeat']){if(_0x51ce28[_0x9dd449(0xaa7)]&&_0x2a7a63[_0x9dd449(0x880)]())return!![];if(this['_battler']['_visualHpGauge_JustDied'])return![];return this['_battler'][_0x9dd449(0xb22)]();}return!![];}}else return _0x9dd449(0x95c);}}else{if(!_0x1ea9a4[_0x9dd449(0x37d)]())return;if(!_0x157993[_0x9dd449(0x3b9)])return;const _0x2cd422=_0x314202[_0x9dd449(0xb38)]();if(!_0x2cd422)return;_0x2cd422[_0x9dd449(0x13b)](_0x9dd449(0x3d6));}}}return'text';},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0xb46)]=function(_0x2d3e8b){const _0x474789=_0x16d1ef,_0x3a0e7c=this[_0x474789(0x911)](_0x2d3e8b),_0x2e6ee9=this[_0x474789(0xa6c)](_0x2d3e8b),_0x4646b0=this[_0x474789(0x655)](_0x2e6ee9)[_0x474789(0x7d5)];this[_0x474789(0x202)](this[_0x474789(0x94b)](_0x2d3e8b));const _0x15c906=this[_0x474789(0xa0c)]();if(_0x15c906===_0x474789(0x766))this['drawTextEx'](_0x2e6ee9,_0x3a0e7c['x']+_0x3a0e7c[_0x474789(0x7d5)]-_0x4646b0,_0x3a0e7c['y'],_0x4646b0);else{if(_0x15c906==='center'){const _0x327ca4=_0x3a0e7c['x']+Math[_0x474789(0x481)]((_0x3a0e7c[_0x474789(0x7d5)]-_0x4646b0)/0x2);this[_0x474789(0x1c2)](_0x2e6ee9,_0x327ca4,_0x3a0e7c['y'],_0x4646b0);}else this[_0x474789(0x1c2)](_0x2e6ee9,_0x3a0e7c['x'],_0x3a0e7c['y'],_0x4646b0);}},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x90c)]=function(_0x1950b5){const _0x396259=_0x16d1ef;this[_0x396259(0xa6c)](_0x1950b5)[_0x396259(0xaf1)](/\\I\[(\d+)\]/i);const _0x24a97a=Number(RegExp['$1'])||0x0,_0x1ea7f9=this['itemLineRect'](_0x1950b5),_0x581e2d=_0x1ea7f9['x']+Math[_0x396259(0x481)]((_0x1ea7f9[_0x396259(0x7d5)]-ImageManager[_0x396259(0x372)])/0x2),_0x267e06=_0x1ea7f9['y']+(_0x1ea7f9[_0x396259(0x842)]-ImageManager[_0x396259(0x4b5)])/0x2;this[_0x396259(0x366)](_0x24a97a,_0x581e2d,_0x267e06);},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x189)]=function(_0x2c3d2c){const _0x4670b8=_0x16d1ef;if(!(VisuMZ[_0x4670b8(0x8c3)][_0x4670b8(0x58d)]['ActorCmd'][_0x4670b8(0x543)]??!![]))return;const _0x2f86fd=this['commandSymbol'](_0x2c3d2c);if(![_0x4670b8(0x2a9),_0x4670b8(0xa31),_0x4670b8(0x6fb)]['includes'](_0x2f86fd))return;const _0x615e2f=this[_0x4670b8(0x911)](_0x2c3d2c);let _0x29c0e4=null;if(_0x2f86fd===_0x4670b8(0x2a9)){if(_0x4670b8(0x578)!==_0x4670b8(0x50c))_0x29c0e4=$dataSkills[this['_actor'][_0x4670b8(0x577)]()];else{let _0x23ec36='';if(_0x2dc806[_0x4670b8(0x4f8)](_0xd1477c))_0x23ec36='Actor-%1-%2'[_0x4670b8(0x86a)](_0x5f0321['id'],_0x5b0f2f);if(_0x1e8174[_0x4670b8(0x4f8)](_0x2d8912))_0x23ec36='Class-%1-%2'[_0x4670b8(0x86a)](_0x16d6d8['id'],_0x1ab850);if(_0x33237a[_0x4670b8(0x4f8)](_0x49bfe3))_0x23ec36=_0x4670b8(0x4c1)[_0x4670b8(0x86a)](_0x214047['id'],_0x5c5dd1);if(_0x498ed1[_0x4670b8(0x4f8)](_0x7be3dc))_0x23ec36=_0x4670b8(0x758)[_0x4670b8(0x86a)](_0x5df031['id'],_0xf22451);if(_0x3eb5f2['includes'](_0x45c2a9))_0x23ec36=_0x4670b8(0x8bc)[_0x4670b8(0x86a)](_0x1146b6['id'],_0x1cf7f4);if(_0x255bfb[_0x4670b8(0x4f8)](_0x4477db))_0x23ec36=_0x4670b8(0x53d)['format'](_0x3369e1['id'],_0x2d8ecd);if(_0x1b58e9[_0x4670b8(0x4f8)](_0x13b984))_0x23ec36=_0x4670b8(0x3cb)[_0x4670b8(0x86a)](_0x342f27['id'],_0x2a15c4);if(_0x31ac38[_0x4670b8(0x4f8)](_0x32711c))_0x23ec36='State-%1-%2'[_0x4670b8(0x86a)](_0x385f32['id'],_0x522148);return _0x23ec36;}}else _0x2f86fd==='guard'?_0x4670b8(0xb1b)!=='wetKT'?this[_0x4670b8(0x8ad)]('performDamage',_0x103d44):_0x29c0e4=$dataSkills[this['_actor'][_0x4670b8(0xa60)]()]:_0x29c0e4=$dataSkills[this[_0x4670b8(0x48d)][_0x2c3d2c][_0x4670b8(0x4c5)]];this[_0x4670b8(0x3e2)](this[_0x4670b8(0x316)],_0x29c0e4,_0x615e2f['x'],_0x615e2f['y'],_0x615e2f[_0x4670b8(0x7d5)]);},Window_ActorCommand['prototype'][_0x16d1ef(0x3e2)]=function(_0x239e29,_0x38335d,_0x490900,_0xe90d28,_0x3d5297){const _0x5cecfe=_0x16d1ef;if(!_0x38335d)return;if(Imported[_0x5cecfe(0xa3d)]){if(_0x5cecfe(0x639)===_0x5cecfe(0x1da)){const _0x259bb0=_0x287211[_0x5cecfe(0x8c3)][_0x5cecfe(0x48b)][_0x5cecfe(0x2c7)](this);return _0x259bb0[_0x5cecfe(0x7db)]=this[_0x5cecfe(0x7db)],_0x259bb0['autoBattleUseSkills']=this[_0x5cecfe(0x893)],_0x259bb0['visualHpGauge']=this['visualHpGauge'],_0x259bb0;}else Window_Command['prototype'][_0x5cecfe(0x3e2)]['call'](this,_0x239e29,_0x38335d,_0x490900,_0xe90d28,_0x3d5297);}else{if(_0x5cecfe(0x7cf)===_0x5cecfe(0x26a)){_0x557222[_0x5cecfe(0x8c3)][_0x5cecfe(0x778)][_0x5cecfe(0x2c7)](this,_0x5ba08d,_0x24fac3);if(!_0x41a573[_0x5cecfe(0x4bb)]())return;for(const _0x230aed of this[_0x5cecfe(0x4db)]()[_0x5cecfe(0xb8b)]()){if(_0x230aed===_0xddd7f4[_0x5cecfe(0x493)]()){let _0x39e294=_0x2420c4[_0x5cecfe(0x8eb)];_0x39e294*=_0x1642e3[_0x5cecfe(0x47b)](_0x230aed),_0x39e294*=this[_0x5cecfe(0x4db)]()['attackStatesRate'](_0x230aed),_0x39e294*=this[_0x5cecfe(0x56d)](_0x1d6664),_0x3c3b61['random']()<_0x39e294&&(_0x432666['_deathStateApplied']=!![],this['makeSuccess'](_0x226ad3));}}}else Window_SkillList[_0x5cecfe(0xa5b)][_0x5cecfe(0x3e2)]['call'](this,_0x38335d,_0x490900,_0xe90d28,_0x3d5297);}},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0xba2)]=function(){},Window_ActorCommand['prototype']['activate']=function(){const _0x31e5d4=_0x16d1ef;Window_Command[_0x31e5d4(0xa5b)]['activate']['call'](this);const _0x29eaa9=this['battleLayoutStyle']();_0x29eaa9==='border'&&this[_0x31e5d4(0x528)]();},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x88a)]=function(){const _0x1bc3bb=_0x16d1ef;if(this[_0x1bc3bb(0x950)])return this[_0x1bc3bb(0x950)];return this[_0x1bc3bb(0x950)]=SceneManager[_0x1bc3bb(0x438)][_0x1bc3bb(0x88a)](),this[_0x1bc3bb(0x950)];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x472)]=Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x706)],Window_ActorCommand[_0x16d1ef(0xa5b)]['setup']=function(_0x435d9d){const _0x162da2=_0x16d1ef,_0x13a70e=this[_0x162da2(0x88a)]();if(_0x435d9d&&['xp',_0x162da2(0x7ee)]['includes'](_0x13a70e)){if(_0x162da2(0x72e)===_0x162da2(0x72e))this[_0x162da2(0x3a8)](_0x435d9d);else{if(!_0x598373['isSceneBattle']())return;_0x434491[_0x162da2(0x5ea)](_0x3d6885,_0x4a48bc),_0x518bb8[_0x162da2(0x438)][_0x162da2(0x37b)](_0x428617[_0x162da2(0x26e)]);}}else{if(_0x435d9d&&['border'][_0x162da2(0x4f8)](_0x13a70e)){if('ngaWg'!==_0x162da2(0x514)){if(_0x4210a4[_0x162da2(0x86c)]())return _0x162da2(0x2c0);return _0x162da2(0xbdc);}else this[_0x162da2(0x565)](_0x435d9d),this[_0x162da2(0x528)]();}}VisuMZ[_0x162da2(0x8c3)][_0x162da2(0x472)]['call'](this,_0x435d9d);if(_0x435d9d&&$gameTroop[_0x162da2(0x888)]()[_0x162da2(0xa40)]>0x0&&_0x435d9d['battler']()){if(_0x162da2(0xab9)===_0x162da2(0xab9))_0x435d9d['battler']()[_0x162da2(0x937)]();else for(const _0x133803 of _0x401cb5[_0x162da2(0x187)]()){this['_logWindow'][_0x162da2(0x8ad)](_0x162da2(0x3fb),_0x47c854['emerge'][_0x162da2(0x86a)](_0x133803)),this[_0x162da2(0xb07)][_0x162da2(0x8ad)](_0x162da2(0xbc7)),_0x553ac9=!![];}}},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x3a8)]=function(_0x18a7dc){const _0xdd12b6=_0x16d1ef,_0x5f06fc=Math['round'](Graphics['boxWidth']/0x3),_0x5dc81b=Math['round'](Graphics['boxWidth']/$gameParty['battleMembers']()[_0xdd12b6(0xa40)]),_0x3dace2=Math[_0xdd12b6(0x457)](_0x5f06fc,_0x5dc81b),_0x57a860=this[_0xdd12b6(0x59d)](VisuMZ[_0xdd12b6(0x8c3)][_0xdd12b6(0x58d)][_0xdd12b6(0x66d)]['XPActorCommandLines']),_0x16c2e8=_0x5dc81b*_0x18a7dc['index']()+(_0x5dc81b-_0x3dace2)/0x2,_0x5e6738=SceneManager['_scene'][_0xdd12b6(0x2f5)]['y']-_0x57a860;this[_0xdd12b6(0x65c)](_0x16c2e8,_0x5e6738,_0x3dace2,_0x57a860),this[_0xdd12b6(0x837)](),this[_0xdd12b6(0x774)](0x1);},Window_ActorCommand['prototype'][_0x16d1ef(0x565)]=function(_0x19488b){const _0x5163a3=_0x16d1ef,_0x3fd7e4=SceneManager[_0x5163a3(0x438)][_0x5163a3(0x417)]();this[_0x5163a3(0x65c)](_0x3fd7e4['x'],_0x3fd7e4['y'],_0x3fd7e4['width'],_0x3fd7e4[_0x5163a3(0x842)]),this[_0x5163a3(0x837)](),this[_0x5163a3(0x774)](0x0);},Window_ActorCommand[_0x16d1ef(0xa5b)][_0x16d1ef(0x245)]=function(){const _0xdba621=_0x16d1ef;if(this[_0xdba621(0x906)]){const _0x2a84f4=this['_dimmerSprite']['bitmap'],_0x8bc864=this[_0xdba621(0x7d5)]-0x8,_0x4cadf6=this[_0xdba621(0x842)],_0x15ce98=this[_0xdba621(0x8cc)],_0x23a74f=ColorManager[_0xdba621(0x5a2)](),_0x24f38b=ColorManager[_0xdba621(0xaab)]();this[_0xdba621(0x906)]['x']=0x4,_0x2a84f4[_0xdba621(0x55d)](_0x8bc864,_0x4cadf6),_0x2a84f4['gradientFillRect'](0x0,0x0,_0x8bc864,_0x15ce98,_0x24f38b,_0x23a74f,!![]),_0x2a84f4[_0xdba621(0x149)](0x0,_0x15ce98,_0x8bc864,_0x4cadf6-_0x15ce98*0x2,_0x23a74f),_0x2a84f4['gradientFillRect'](0x0,_0x4cadf6-_0x15ce98,_0x8bc864,_0x15ce98,_0x23a74f,_0x24f38b,!![]),this[_0xdba621(0x906)][_0xdba621(0x38f)](0x0,0x0,_0x8bc864,_0x4cadf6);}},Window_ActorCommand['prototype'][_0x16d1ef(0x178)]=function(){const _0x42ed15=_0x16d1ef;if(!this[_0x42ed15(0x316)])return;const _0x827312=VisuMZ[_0x42ed15(0x8c3)][_0x42ed15(0x58d)][_0x42ed15(0x6c1)],_0x13fee8=this[_0x42ed15(0x37f)]();switch(_0x13fee8){case'attack':this[_0x42ed15(0xbb1)]($dataSkills[this[_0x42ed15(0x316)][_0x42ed15(0x577)]()]);break;case _0x42ed15(0xa31):this[_0x42ed15(0xbb1)]($dataSkills[this['_actor'][_0x42ed15(0xa60)]()]);break;case _0x42ed15(0x2b0):const _0x5f503a=_0x827312['HelpSkillType'],_0x1d8fad=_0x5f503a[_0x42ed15(0x86a)]($dataSystem['skillTypes'][this['currentExt']()]);this['_helpWindow'][_0x42ed15(0x450)](_0x1d8fad);break;case _0x42ed15(0x6fb):this[_0x42ed15(0xbb1)]($dataSkills[this[_0x42ed15(0x756)]()]);break;case _0x42ed15(0x74a):this['_helpWindow'][_0x42ed15(0x450)](_0x827312['HelpItem']);break;case _0x42ed15(0x77a):this[_0x42ed15(0x4ed)][_0x42ed15(0x450)](_0x827312[_0x42ed15(0x399)]);break;case _0x42ed15(0x3fa):this[_0x42ed15(0x4ed)][_0x42ed15(0x450)](_0x827312[_0x42ed15(0xa7a)]);break;default:this[_0x42ed15(0x4ed)][_0x42ed15(0x450)]('');break;}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x61c)]=Window_BattleStatus['prototype'][_0x16d1ef(0x839)],Window_BattleStatus['prototype']['initialize']=function(_0x3b73da){const _0x1121af=_0x16d1ef;VisuMZ[_0x1121af(0x8c3)][_0x1121af(0x61c)][_0x1121af(0x2c7)](this,_0x3b73da),this[_0x1121af(0x8b6)](),this['createAttachmentSprites']();},Window_BattleStatus['prototype']['battleLayoutStyle']=function(){const _0x1bfbb2=_0x16d1ef;if(this[_0x1bfbb2(0x950)])return this[_0x1bfbb2(0x950)];return this['_battleLayoutStyle']=SceneManager[_0x1bfbb2(0x438)][_0x1bfbb2(0x88a)](),this[_0x1bfbb2(0x950)];},Window_BattleStatus['prototype'][_0x16d1ef(0x8b6)]=function(){const _0x4681c1=_0x16d1ef;this[_0x4681c1(0x898)]=this['isFrameVisible']();const _0x1b1ce3=VisuMZ[_0x4681c1(0x8c3)][_0x4681c1(0x58d)][_0x4681c1(0x66d)];_0x1b1ce3['StatusWindowSkinHide']&&('GLCop'===_0x4681c1(0x9f4)?this[_0x4681c1(0xbbd)]='':this[_0x4681c1(0x981)]=0x0);},Window_BattleStatus['prototype'][_0x16d1ef(0x335)]=function(){const _0x1b6670=_0x16d1ef,_0x3f502b=VisuMZ[_0x1b6670(0x8c3)][_0x1b6670(0x58d)][_0x1b6670(0x66d)];if(_0x3f502b['StatusWindowSkinFilename']){if(_0x1b6670(0xa39)===_0x1b6670(0x4ec))this[_0x1b6670(0x3b5)]=this[_0x1b6670(0x3b5)]||[];else return!![];}const _0x549b55=this['battleLayoutStyle']();switch(_0x549b55){case _0x1b6670(0x85a):case _0x1b6670(0x6a0):return!![];break;case _0x1b6670(0xa35):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus['prototype'][_0x16d1ef(0x78e)]=function(){const _0x41caf9=_0x16d1ef;if(this[_0x41caf9(0x335)]()){if(_0x41caf9(0x54e)===_0x41caf9(0x54e))return 0x0;else _0x17ea57[_0x41caf9(0x8ad)](this[_0x41caf9(0xadb)]()[_0x41caf9(0x982)]());}else return 0xa;},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x636)]=function(){const _0x1ff4df=_0x16d1ef,_0x207b51=this[_0x1ff4df(0x88a)]();switch(_0x207b51){case _0x1ff4df(0x85a):return 0x1;break;case'xp':case _0x1ff4df(0x7ee):return $gameParty[_0x1ff4df(0x2a7)]()['length'];break;case _0x1ff4df(0xa35):default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus['prototype']['itemHeight']=function(){const _0x38ded8=_0x16d1ef,_0x261bd3=this['battleLayoutStyle']();switch(_0x261bd3){case _0x38ded8(0x85a):return Window_StatusBase['prototype']['itemHeight'][_0x38ded8(0x2c7)](this);break;case'default':case'xp':case _0x38ded8(0x7ee):default:return this[_0x38ded8(0x6b4)];break;}},Window_BattleStatus[_0x16d1ef(0xa5b)]['rowSpacing']=function(){const _0x866c27=_0x16d1ef,_0x51aea9=this[_0x866c27(0x88a)]();switch(_0x51aea9){case _0x866c27(0x85a):return Window_StatusBase[_0x866c27(0xa5b)][_0x866c27(0x890)]['call'](this);break;case _0x866c27(0xa35):case'xp':case _0x866c27(0x7ee):default:return 0x0;break;}},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x799)]=function(){const _0x398a67=_0x16d1ef;this['isFrameVisible']()?_0x398a67(0x669)===_0x398a67(0x5f7)?this['_floatHeight']=this[_0x398a67(0x1d6)]:Window_StatusBase['prototype'][_0x398a67(0x799)][_0x398a67(0x2c7)](this):this[_0x398a67(0x8cc)]=0x8;},Window_BattleStatus['prototype']['loadWindowskin']=function(){const _0x27cda3=_0x16d1ef,_0x20b7e0=VisuMZ[_0x27cda3(0x8c3)][_0x27cda3(0x58d)][_0x27cda3(0x66d)];_0x20b7e0[_0x27cda3(0x4a5)]?_0x27cda3(0x293)!=='NLmkD'?_0x523220[_0x27cda3(0x88b)](_0x27cda3(0x947),this[_0x27cda3(0x6aa)][_0x27cda3(0x9f7)](this)):this[_0x27cda3(0x3be)]=ImageManager[_0x27cda3(0x642)](_0x20b7e0[_0x27cda3(0x4a5)]):Window_StatusBase[_0x27cda3(0xa5b)][_0x27cda3(0x473)]['call'](this);},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x1f0)]=function(_0x10b837){const _0x3b53f7=_0x16d1ef,_0x4db27c=VisuMZ['BattleCore']['Settings'][_0x3b53f7(0x66d)];if(_0x4db27c[_0x3b53f7(0xbdf)])return;Window_StatusBase[_0x3b53f7(0xa5b)]['drawItemBackground'][_0x3b53f7(0x2c7)](this,_0x10b837);},Window_BattleStatus['prototype'][_0x16d1ef(0x3ce)]=function(){const _0x49fc7d=_0x16d1ef;this[_0x49fc7d(0x6f6)]=!![];},Window_BattleStatus[_0x16d1ef(0xa5b)]['update']=function(){const _0x1549da=_0x16d1ef;Window_StatusBase[_0x1549da(0xa5b)][_0x1549da(0x3e1)][_0x1549da(0x2c7)](this),this['updateRefresh'](),this['updateEffectContainers']();if(this[_0x1549da(0x88a)]()==='border')this['updateBorderStyle']();},Window_BattleStatus[_0x16d1ef(0xa5b)]['updateRefresh']=function(){const _0x108f19=_0x16d1ef;if($gameTemp[_0x108f19(0x9db)]())'eBnro'!==_0x108f19(0x9f1)?(this[_0x108f19(0x987)](),this[_0x108f19(0x6f6)]=![],$gameTemp[_0x108f19(0xbd4)]()):[0x6c,0x198][_0x108f19(0x4f8)](_0x8043b1['code'])&&(_0x24bd0b+='\x0a',_0x52103c+=_0x42f501[_0x108f19(0x2b8)][0x0]);else{if(this['_requestRefresh']){if(_0x108f19(0x307)==='xEnfe')this['_requestRefresh']=![],this[_0x108f19(0x928)](),this[_0x108f19(0xb5b)]();else{if(this[_0x108f19(0x223)])this[_0x108f19(0x223)]['startMove'](_0x1261a0,_0x5b110a,_0xa018b3);}}}},Window_BattleStatus['prototype']['show']=function(){const _0x5f4ccb=_0x16d1ef;Window_StatusBase[_0x5f4ccb(0xa5b)][_0x5f4ccb(0x1b0)]['call'](this);if(!$gameSystem[_0x5f4ccb(0xb9b)]())this[_0x5f4ccb(0x928)]();},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0xba2)]=function(){const _0x8ec799=_0x16d1ef;if(this[_0x8ec799(0xb30)]===Window_BattleStatus)return;Window_StatusBase['prototype']['hide']['call'](this);},Window_BattleStatus[_0x16d1ef(0xa5b)]['drawBackgroundRect']=function(_0xec292){const _0x43842c=_0x16d1ef,_0x341421=this[_0x43842c(0x88a)]();switch(_0x341421){case'xp':case _0x43842c(0x7ee):break;case _0x43842c(0xa35):case _0x43842c(0x85a):case _0x43842c(0x6a0):default:return Window_StatusBase[_0x43842c(0xa5b)][_0x43842c(0x3dd)][_0x43842c(0x2c7)](this,_0xec292);break;}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x3a9)]=Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x966)],Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x966)]=function(_0x1fa6dd){const _0x562e99=_0x16d1ef,_0x36b575=this[_0x562e99(0x88a)]();switch(_0x36b575){case _0x562e99(0x85a):this[_0x562e99(0x274)](_0x1fa6dd);break;case'xp':this['drawItemImageXPStyle'](_0x1fa6dd);break;case _0x562e99(0x7ee):this[_0x562e99(0xb84)](_0x1fa6dd);break;case _0x562e99(0xa35):case _0x562e99(0x6a0):default:VisuMZ[_0x562e99(0x8c3)]['Window_BattleStatus_drawItemImage'][_0x562e99(0x2c7)](this,_0x1fa6dd);break;}},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x79b)]=function(_0x1845fa){const _0x39b338=_0x16d1ef,_0x22e86b=this[_0x39b338(0x88a)]();if(!$gameSystem[_0x39b338(0xb9b)]())this[_0x39b338(0x98d)](_0x1845fa);switch(_0x22e86b){case'list':this['drawItemStatusListStyle'](_0x1845fa);break;case'xp':case _0x39b338(0x7ee):case _0x39b338(0xa35):case _0x39b338(0x6a0):default:this[_0x39b338(0x87d)](_0x1845fa);break;}},Window_BattleStatus['prototype'][_0x16d1ef(0x4f9)]=function(){const _0x1b49e2=_0x16d1ef,_0x258fb0=this[_0x1b49e2(0x88a)]();if(['xp'][_0x1b49e2(0x4f8)](_0x258fb0)&&!$gameSystem[_0x1b49e2(0xb9b)]()){if(_0x1b49e2(0x42d)!==_0x1b49e2(0x42d)){if(!_0x190ce8)return;const _0x4ed713=new _0x571c18();this[_0x1b49e2(0x8f0)](_0x4ed713),_0x4ed713[_0x1b49e2(0xbbf)](_0x10d2f8);}else{this[_0x1b49e2(0x3d0)](0x0,0x0,0x0,0x0);return;}}Window_StatusBase[_0x1b49e2(0xa5b)][_0x1b49e2(0x4f9)][_0x1b49e2(0x2c7)](this);},Window_BattleStatus[_0x16d1ef(0xa5b)]['centerFrontViewSprite']=function(_0x273bb4){const _0x5dfeb0=_0x16d1ef,_0xc41bb2=this[_0x5dfeb0(0x509)](_0x273bb4)[_0x5dfeb0(0xb02)]();if(!_0xc41bb2)return;const _0x4cdcd=this[_0x5dfeb0(0x88a)](),_0x2616e0=this['itemRect'](_0x273bb4);let _0x287c7e=Math['round'](_0x2616e0['x']+_0x2616e0['width']/0x2)+this[_0x5dfeb0(0x8cc)];[_0x5dfeb0(0x85a)][_0x5dfeb0(0x4f8)](_0x4cdcd)&&(_0x287c7e=_0x2616e0['width']/$gameParty['battleMembers']()[_0x5dfeb0(0xa40)],_0x287c7e*=_0x273bb4,_0x287c7e+=_0x2616e0[_0x5dfeb0(0x7d5)]/$gameParty['battleMembers']()[_0x5dfeb0(0xa40)]/0x2);let _0x277edc=Math[_0x5dfeb0(0x5d9)](this['frontviewSpriteY'](_0x273bb4,_0xc41bb2,_0x2616e0));_0xc41bb2['setHome'](_0x287c7e,_0x277edc),this['addChildAt'](_0xc41bb2,0x1),_0xc41bb2['show'](),this['updateEffectsContainer'](),this['updateAttachmentSprites']();},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x91b)]=function(_0x2af0e7,_0x1d15ad,_0x8a83ec){const _0x4d7047=_0x16d1ef,_0x35891f=VisuMZ[_0x4d7047(0x8c3)][_0x4d7047(0x58d)][_0x4d7047(0x66d)],_0x5b014c=this[_0x4d7047(0x88a)]();if(_0x5b014c==='xp'){if(_0x4d7047(0x440)!=='mEAOT'){const _0x52d0dc=_0x35891f[_0x4d7047(0xbc4)];switch(_0x52d0dc[_0x4d7047(0x1e1)]()[_0x4d7047(0x699)]()){case _0x4d7047(0x72b):return _0x8a83ec[_0x4d7047(0x842)]-_0x1d15ad[_0x4d7047(0x525)]['height']/0x4;break;case'center':const _0x273a77=_0x35891f[_0x4d7047(0x82a)];return(_0x8a83ec[_0x4d7047(0x842)]+(_0x1d15ad['height']||_0x273a77))/0x2;break;case _0x4d7047(0x18b):return 0x0;case _0x4d7047(0x8c4):default:return this[_0x4d7047(0xacf)](_0x8a83ec);break;}}else{_0x41f2b6[_0x4d7047(0x8c3)][_0x4d7047(0x7b0)][_0x4d7047(0x2c7)](this);if(this[_0x4d7047(0x48e)][_0x4d7047(0x963)]===0x3){if(this['x']===0x0)this['x']=_0xbe2aca[_0x4d7047(0x5d9)](_0x57ddd6[_0x4d7047(0x7d5)]/0x2);if(this['y']===0x0)this['y']=_0x5b8ca9['round'](_0x23f0de['height']/0x2);}}}else{if(_0x5b014c===_0x4d7047(0x7ee)){}}return _0x1d15ad[_0x4d7047(0x842)];},Sprite_Name['prototype'][_0x16d1ef(0x9c5)]=function(){return 0x24;},Sprite_Name[_0x16d1ef(0xa5b)][_0x16d1ef(0x25c)]=function(){const _0x293c12=_0x16d1ef,_0x352a34=this[_0x293c12(0x8c4)](),_0x5216dc=this['bitmapWidth'](),_0x4b833e=this[_0x293c12(0x9c5)]();this[_0x293c12(0xa2c)](),this['bitmap'][_0x293c12(0x721)](),this[_0x293c12(0xb74)]['drawTextTopAligned'](_0x352a34,0x0,0x0,_0x5216dc,_0x4b833e,_0x293c12(0x948));},Bitmap[_0x16d1ef(0xa5b)][_0x16d1ef(0xa80)]=function(_0x32933b,_0x3c9734,_0x5a5739,_0x84b076,_0x866736,_0xeb4bc4){const _0x13954d=_0x16d1ef,_0x15996d=this['context'],_0x4c9587=_0x15996d['globalAlpha'];_0x84b076=_0x84b076||0xffffffff;let _0x59e9b5=_0x3c9734,_0x3278c7=Math['round'](_0x5a5739+0x18/0x2+this[_0x13954d(0xad1)]*0.35);_0xeb4bc4===_0x13954d(0x4a0)&&(_0x13954d(0x234)!==_0x13954d(0xb49)?_0x59e9b5+=_0x84b076/0x2:_0x84f095+=_0xb2543a),_0xeb4bc4===_0x13954d(0x766)&&('YVpMD'===_0x13954d(0x844)?(this[_0x13954d(0x892)]=_0x8ac10[_0x13954d(0x5a4)]>=0x0?0x0:0x1,this[_0x13954d(0x12f)](_0x21f5b0[_0x13954d(0x5a4)])):_0x59e9b5+=_0x84b076),_0x15996d[_0x13954d(0x333)](),_0x15996d[_0x13954d(0x347)]=this['_makeFontNameText'](),_0x15996d[_0x13954d(0x496)]=_0xeb4bc4,_0x15996d['textBaseline']=_0x13954d(0x8d2),_0x15996d[_0x13954d(0x904)]=0x1,this['_drawTextOutline'](_0x32933b,_0x59e9b5,_0x3278c7,_0x84b076),_0x15996d[_0x13954d(0x904)]=_0x4c9587,this[_0x13954d(0xba6)](_0x32933b,_0x59e9b5,_0x3278c7,_0x84b076),_0x15996d['restore'](),this[_0x13954d(0x2c4)][_0x13954d(0x3e1)]();},Window_BattleStatus[_0x16d1ef(0xa5b)]['nameY']=function(_0x1265ea){const _0x35b8e6=_0x16d1ef;return this['basicGaugesY'](_0x1265ea)-this[_0x35b8e6(0x70a)]();},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x274)]=function(_0x5b4d12){const _0x5e99eb=_0x16d1ef;if(!VisuMZ[_0x5e99eb(0x8c3)][_0x5e99eb(0x58d)][_0x5e99eb(0x66d)][_0x5e99eb(0x14b)])return;const _0x4dd9db=this[_0x5e99eb(0x509)](_0x5b4d12),_0x24e568=this[_0x5e99eb(0x765)](_0x5b4d12);_0x24e568[_0x5e99eb(0x7d5)]=ImageManager[_0x5e99eb(0x302)],_0x24e568[_0x5e99eb(0x842)]-=0x2,this['drawActorFace'](_0x4dd9db,_0x24e568['x']+0x1,_0x24e568['y']+0x1,_0x24e568['width'],_0x24e568[_0x5e99eb(0x842)]);},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0xa87)]=function(_0x5b1fbf){const _0x25e34f=_0x16d1ef,_0x67336b=VisuMZ[_0x25e34f(0x8c3)][_0x25e34f(0x58d)][_0x25e34f(0x66d)],_0xe266fd=$dataSystem['optDisplayTp']?0x4:0x3,_0x350685=_0xe266fd*0x80+(_0xe266fd-0x1)*0x8+0x4,_0x23c9aa=this[_0x25e34f(0x509)](_0x5b1fbf),_0x3f95fd=this[_0x25e34f(0x765)](_0x5b1fbf);let _0x595ef2=_0x3f95fd['x']+this[_0x25e34f(0x8cc)];_0x67336b[_0x25e34f(0x14b)]?_0x595ef2=_0x3f95fd['x']+ImageManager[_0x25e34f(0x302)]+0x8:_0x595ef2+=ImageManager[_0x25e34f(0x372)];const _0x590510=Math[_0x25e34f(0x5d9)](Math[_0x25e34f(0x457)](_0x3f95fd['x']+_0x3f95fd[_0x25e34f(0x7d5)]-_0x350685,_0x595ef2)),_0x5e4d9b=Math[_0x25e34f(0x5d9)](_0x3f95fd['y']+(_0x3f95fd[_0x25e34f(0x842)]-Sprite_Name['prototype'][_0x25e34f(0x9c5)]())/0x2),_0x25658d=Math[_0x25e34f(0x5d9)](_0x590510-ImageManager[_0x25e34f(0x372)]/0x2-0x4),_0x57eed7=Math[_0x25e34f(0x5d9)](_0x3f95fd['y']+(_0x3f95fd[_0x25e34f(0x842)]-ImageManager[_0x25e34f(0x4b5)])/0x2+ImageManager[_0x25e34f(0x4b5)]/0x2);let _0xba5d61=_0x590510+0x88;const _0x2fd476=_0x5e4d9b;this[_0x25e34f(0x927)](_0x23c9aa,_0x590510-0x4+(_0x67336b['TpbGaugeOffsetX']||0x0),_0x5e4d9b+(_0x67336b[_0x25e34f(0x7b9)]||0x0)),this[_0x25e34f(0x78c)](_0x23c9aa,_0x590510+(_0x67336b['NameOffsetX']||0x0),_0x5e4d9b+(_0x67336b[_0x25e34f(0x8e1)]||0x0)),this[_0x25e34f(0x4a6)](_0x23c9aa,_0x25658d+(_0x67336b[_0x25e34f(0x675)]||0x0),_0x57eed7+(_0x67336b['StateIconOffsetY']||0x0)),this[_0x25e34f(0x96f)](_0x23c9aa,'hp',_0xba5d61+0x88*0x0+(_0x67336b[_0x25e34f(0x9f2)]||0x0),_0x2fd476+(_0x67336b[_0x25e34f(0x5df)]||0x0)),this['placeGauge'](_0x23c9aa,'mp',_0xba5d61+0x88*0x1+(_0x67336b[_0x25e34f(0x3bf)]||0x0),_0x2fd476+(_0x67336b[_0x25e34f(0x878)]||0x0));if($dataSystem[_0x25e34f(0xabb)]){if(_0x25e34f(0xa4d)==='FJdKE')this[_0x25e34f(0x96f)](_0x23c9aa,'tp',_0xba5d61+0x88*0x2+(_0x67336b[_0x25e34f(0xa15)]||0x0),_0x2fd476+(_0x67336b[_0x25e34f(0x17a)]||0x0));else return![];}},Window_BattleStatus[_0x16d1ef(0xa5b)]['drawItemImageXPStyle']=function(_0x1e7e7a){const _0x11b171=_0x16d1ef;if(!$gameSystem[_0x11b171(0xb9b)]())return;VisuMZ['BattleCore'][_0x11b171(0x3a9)][_0x11b171(0x2c7)](this,_0x1e7e7a);},Window_BattleStatus[_0x16d1ef(0xa5b)]['drawItemStatusXPStyle']=function(_0x438603){const _0x18755b=_0x16d1ef,_0x5f1cb4=VisuMZ['BattleCore']['Settings']['BattleLayout'],_0x441fc5=this[_0x18755b(0x509)](_0x438603),_0x3749a2=this[_0x18755b(0x765)](_0x438603),_0x4d8743=Math['round'](_0x3749a2['x']+(_0x3749a2[_0x18755b(0x7d5)]-0x80)/0x2),_0xce24e9=this[_0x18755b(0xacf)](_0x3749a2);let _0x19053f=_0x4d8743-ImageManager[_0x18755b(0x372)]/0x2-0x4,_0x56c6af=_0xce24e9+ImageManager[_0x18755b(0x4b5)]/0x2;_0x19053f-ImageManager['iconWidth']/0x2<_0x3749a2['x']&&(_0x18755b(0x14e)==='djKHV'?(_0x19053f=_0x4d8743+ImageManager['iconWidth']/0x2-0x4,_0x56c6af=_0xce24e9-ImageManager['iconHeight']/0x2):this[_0x18755b(0x339)](this[_0x18755b(0x8ec)]));const _0x59c78a=_0x4d8743,_0x3f9a19=this[_0x18755b(0xbba)](_0x3749a2);this[_0x18755b(0x927)](_0x441fc5,_0x4d8743+(_0x5f1cb4[_0x18755b(0x3d5)]||0x0),_0xce24e9+(_0x5f1cb4[_0x18755b(0x7b9)]||0x0)),this['placeActorName'](_0x441fc5,_0x4d8743+(_0x5f1cb4['NameOffsetX']||0x0),_0xce24e9+(_0x5f1cb4[_0x18755b(0x8e1)]||0x0)),this[_0x18755b(0x4a6)](_0x441fc5,_0x19053f+(_0x5f1cb4[_0x18755b(0x675)]||0x0),_0x56c6af+(_0x5f1cb4[_0x18755b(0x789)]||0x0)),this[_0x18755b(0x96f)](_0x441fc5,'hp',_0x59c78a+(_0x5f1cb4[_0x18755b(0x9f2)]||0x0),_0x3f9a19+(_0x5f1cb4[_0x18755b(0x5df)]||0x0)),this[_0x18755b(0x96f)](_0x441fc5,'mp',_0x59c78a+(_0x5f1cb4[_0x18755b(0x3bf)]||0x0),_0x3f9a19+this[_0x18755b(0x70a)]()+(_0x5f1cb4['MpGaugeOffsetY']||0x0)),$dataSystem['optDisplayTp']&&this[_0x18755b(0x96f)](_0x441fc5,'tp',_0x59c78a+(_0x5f1cb4[_0x18755b(0xa15)]||0x0),_0x3f9a19+this['gaugeLineHeight']()*0x2+(_0x5f1cb4['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x275)]=function(_0x508c91){const _0x5436b6=_0x16d1ef;if(!VisuMZ[_0x5436b6(0x8c3)][_0x5436b6(0x58d)][_0x5436b6(0x66d)][_0x5436b6(0xb5d)])return![];if(_0x508c91[_0x5436b6(0x685)]())return!![];return Imported[_0x5436b6(0x5d7)]&&_0x508c91[_0x5436b6(0x5b0)]();},Game_Actor[_0x16d1ef(0xa5b)]['getBattlePortraitOffsetX']=function(){const _0x1128fb=_0x16d1ef;if(this['actor']()[_0x1128fb(0x954)][_0x1128fb(0xaf1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x1128fb(0x954)][_0x1128fb(0xaf1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x16d1ef(0xa5b)][_0x16d1ef(0x87c)]=function(){const _0x3a1c70=_0x16d1ef;if(this['actor']()[_0x3a1c70(0x954)][_0x3a1c70(0xaf1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x3a1c70(0x509)]()[_0x3a1c70(0x954)][_0x3a1c70(0xaf1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x3a1c70(0x1f8)===_0x3a1c70(0x1f8))return Number(RegExp['$2']);else{if(_0x3f6825['BTestBypass']&&_0x4069e2[_0x3a1c70(0x880)]())return!![];if(this[_0x3a1c70(0xa74)]['_visualHpGauge_JustDied'])return![];return this['_battler'][_0x3a1c70(0xb22)]();}}}return 0x0;},Window_BattleStatus['prototype']['drawItemImagePortraitStyle']=function(_0x43b881){const _0x567b34=_0x16d1ef,_0x48c29b=this['actor'](_0x43b881);if(this['showPortraits'](_0x48c29b)){const _0x12e9f9=_0x567b34(0x590)[_0x567b34(0x86a)](_0x48c29b[_0x567b34(0xb7c)]()),_0x19ed56=this[_0x567b34(0x211)](_0x12e9f9,Sprite),_0x4c58c7=_0x48c29b[_0x567b34(0x548)]();if(_0x4c58c7!=='')_0x19ed56[_0x567b34(0xb74)]=ImageManager[_0x567b34(0x832)](_0x4c58c7);else{if(_0x567b34(0xb2e)===_0x567b34(0x5c9)){if(!this[_0x567b34(0xa74)])return;this[_0x567b34(0x46a)]=this[_0x567b34(0xa74)][_0x567b34(0x1c6)](),this['_shadowScaleY']=this['_battler']['battlerShadowScaleY']();}else _0x19ed56[_0x567b34(0xb74)]=ImageManager[_0x567b34(0x262)];}const _0x2147ad=this[_0x567b34(0x765)](_0x43b881);_0x19ed56['anchor']['x']=0.5,_0x19ed56[_0x567b34(0x186)]['y']=0x1;let _0x3ecb93=Math[_0x567b34(0x5d9)](_0x2147ad['x']+_0x2147ad[_0x567b34(0x7d5)]/0x2)+this['padding'];_0x3ecb93+=_0x48c29b['getBattlePortraitOffsetX']();let _0x327fdd=Math['round'](this['height']);_0x327fdd+=_0x48c29b[_0x567b34(0x87c)](),_0x19ed56[_0x567b34(0x65c)](_0x3ecb93,_0x327fdd);const _0x370e4c=VisuMZ[_0x567b34(0x8c3)]['Settings'][_0x567b34(0x66d)][_0x567b34(0x6b1)];_0x19ed56[_0x567b34(0x9fa)]['x']=_0x370e4c,_0x19ed56[_0x567b34(0x9fa)]['y']=_0x370e4c,_0x19ed56[_0x567b34(0x1b0)]();}else{if(_0x567b34(0x494)===_0x567b34(0x494)){const _0x5bee8d=this[_0x567b34(0x4b3)](_0x43b881);this['drawActorFace'](_0x48c29b,_0x5bee8d['x'],_0x5bee8d['y'],_0x5bee8d[_0x567b34(0x7d5)],_0x5bee8d[_0x567b34(0x842)]);}else{this[_0x567b34(0x30e)][_0x567b34(0x8ad)](_0x2e407c);if(this[_0x567b34(0xa8e)]())_0x130eed[_0x567b34(0x438)]['_statusWindow'][_0x567b34(0x5bf)](_0x2b5e3a,this[_0x567b34(0xa74)]);else{this[_0x567b34(0x73c)]()[_0x567b34(0x339)](_0x1d6ffd);if(_0x284bf4['isBattleFlipped']())_0x5094f9[_0x567b34(0x9fa)]['x']=-0x1;}}}},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x211)]=function(_0x5e616f,_0x141e40){const _0x3ee787=_0x16d1ef,_0x173f79=this['_additionalSprites'];if(_0x173f79[_0x5e616f])return _0x3ee787(0x546)==='NvRye'?_0x173f79[_0x5e616f]:_0x3756bd['filter'](_0x9078c2=>_0x9078c2['isAlive']()&&_0x9078c2!==_0x4fe046);else{const _0x267a3b=new _0x141e40();return _0x173f79[_0x5e616f]=_0x267a3b,this[_0x3ee787(0xab3)](_0x267a3b),this[_0x3ee787(0xab3)](this['_cursorArea']),_0x267a3b;}},Window_BattleStatus[_0x16d1ef(0xa5b)]['_createClientArea']=function(){const _0x3fd8f2=_0x16d1ef;this[_0x3fd8f2(0xa67)](),this[_0x3fd8f2(0x912)](),Window_StatusBase[_0x3fd8f2(0xa5b)][_0x3fd8f2(0x159)][_0x3fd8f2(0x2c7)](this),this[_0x3fd8f2(0x222)]();},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0xa67)]=function(){const _0x570632=_0x16d1ef;this['_cursorArea']=new Sprite(),this[_0x570632(0x3a5)]['filters']=[new PIXI['filters'][(_0x570632(0xafc))]()],this[_0x570632(0x3a5)][_0x570632(0x194)]=new Rectangle(),this[_0x570632(0x3a5)][_0x570632(0x65c)](this[_0x570632(0x3f9)],this[_0x570632(0x3f9)]),this['addChild'](this[_0x570632(0x3a5)]);},Window_BattleStatus['prototype'][_0x16d1ef(0x912)]=function(){const _0x15ffb2=_0x16d1ef;this['_effectsContainer']=new Sprite(),this[_0x15ffb2(0x339)](this[_0x15ffb2(0x4d8)]);},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x8e8)]=function(){const _0x34c0ba=_0x16d1ef;this['_effectsContainer']&&this[_0x34c0ba(0x339)](this['_effectsContainer']);},Window_BattleStatus[_0x16d1ef(0xa5b)]['_createDamageContainer']=function(){const _0x2d7599=_0x16d1ef;this['_damageContainer']=new Sprite(),this[_0x2d7599(0x339)](this[_0x2d7599(0x476)]);},Window_BattleStatus['prototype'][_0x16d1ef(0x7ac)]=function(){const _0x5e6f0b=_0x16d1ef;this[_0x5e6f0b(0xa4a)]=new Sprite();for(let _0x24b54a=0x0;_0x24b54a<0x9;_0x24b54a++){this['_cursorSprite']['addChild'](new Sprite());}this['_cursorArea']['addChild'](this[_0x5e6f0b(0xa4a)]);},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x6fa)]=function(){const _0x157a85=_0x16d1ef;Window_StatusBase[_0x157a85(0xa5b)]['_updateClientArea']['call'](this),this['_updateCursorArea']();},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x64e)]=function(){const _0xb32e84=_0x16d1ef,_0x4da713=this['_padding'];this['_cursorArea']['move'](_0x4da713,_0x4da713),this['_cursorArea']['x']=_0x4da713-this[_0xb32e84(0x5d6)]['x'],this[_0xb32e84(0x3a5)]['y']=_0x4da713-this[_0xb32e84(0x5d6)]['y'],this['innerWidth']>0x0&&this[_0xb32e84(0x6b4)]>0x0?this[_0xb32e84(0x3a5)][_0xb32e84(0x7f9)]=this[_0xb32e84(0x8c1)]():this[_0xb32e84(0x3a5)][_0xb32e84(0x7f9)]=![];},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x75d)]=function(){const _0x3717b2=_0x16d1ef;Window_StatusBase['prototype'][_0x3717b2(0x75d)][_0x3717b2(0x2c7)](this),this[_0x3717b2(0x2cc)]();},Window_BattleStatus[_0x16d1ef(0xa5b)]['_updateCursorFilterArea']=function(){const _0x41692b=_0x16d1ef,_0x3c3eeb=this[_0x41692b(0x3a5)][_0x41692b(0x57f)][_0x41692b(0x712)](new Point(0x0,0x0)),_0x1d2694=this[_0x41692b(0x3a5)][_0x41692b(0x194)];_0x1d2694['x']=_0x3c3eeb['x']+this[_0x41692b(0x5d6)]['x'],_0x1d2694['y']=_0x3c3eeb['y']+this[_0x41692b(0x5d6)]['y'],_0x1d2694[_0x41692b(0x7d5)]=this['innerWidth'],_0x1d2694[_0x41692b(0x842)]=this[_0x41692b(0x6b4)];},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x3ba)]=function(_0x3f2fe4){const _0x58462e=_0x16d1ef;if(this[_0x58462e(0x88a)]()!=='portrait')return;this['drawItemImagePortraitStyle'](_0x3f2fe4[_0x58462e(0x830)]());},Window_BattleStatus[_0x16d1ef(0xa5b)]['addDamageSprite']=function(_0x1a4ce2,_0x25534a){const _0x423d52=_0x16d1ef;if(!this[_0x423d52(0x476)])return;if(!_0x1a4ce2)return;if(!_0x25534a)return;const _0x318850=this[_0x423d52(0x765)](_0x25534a[_0x423d52(0x830)]());_0x318850['x']+=_0x318850[_0x423d52(0x7d5)]/0x2+this[_0x423d52(0x8cc)],_0x1a4ce2['x']=_0x318850['x'],_0x1a4ce2['y']=_0x318850['y'],this['_damageContainer'][_0x423d52(0x339)](_0x1a4ce2);},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x5c5)]=function(_0x3eea36){const _0x4bb4ad=_0x16d1ef;if(!this[_0x4bb4ad(0x476)])return;if(!_0x3eea36)return;this[_0x4bb4ad(0x476)][_0x4bb4ad(0x656)](_0x3eea36);},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x6c2)]=function(){const _0xe21b82=_0x16d1ef;if(!this[_0xe21b82(0xa21)]())return;if(!this[_0xe21b82(0x19a)])this[_0xe21b82(0x35e)]();this[_0xe21b82(0x6a8)](),this[_0xe21b82(0x469)]();},Window_BattleStatus[_0x16d1ef(0xa5b)]['isBorderStylePortraitShown']=function(){const _0x304c95=_0x16d1ef;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x304c95(0x37d)]())return![];return VisuMZ['BattleCore'][_0x304c95(0x58d)][_0x304c95(0x66d)][_0x304c95(0xa65)];},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x35e)]=function(){const _0x412b52=_0x16d1ef;this[_0x412b52(0x19a)]=new Sprite();const _0x597988=SceneManager[_0x412b52(0x438)],_0x3d11eb=_0x597988[_0x412b52(0x4ef)][_0x412b52(0x6f3)](_0x597988[_0x412b52(0x419)]);_0x597988[_0x412b52(0x76e)](this[_0x412b52(0x19a)],_0x3d11eb),this[_0x412b52(0x19a)][_0x412b52(0x186)]['x']=0.5,this[_0x412b52(0x19a)][_0x412b52(0x186)]['y']=0x1;const _0x36ce1b=VisuMZ[_0x412b52(0x8c3)]['Settings'][_0x412b52(0x66d)][_0x412b52(0x241)];this[_0x412b52(0x19a)][_0x412b52(0x9fa)]['x']=_0x36ce1b,this[_0x412b52(0x19a)][_0x412b52(0x9fa)]['y']=_0x36ce1b,this[_0x412b52(0x19a)]['y']=this['y']+this[_0x412b52(0x842)],this[_0x412b52(0x60a)]=0x0;},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x6a8)]=function(){const _0x1c8592=_0x16d1ef;this['_borderPortraitSprite'][_0x1c8592(0x7f9)]=BattleManager[_0x1c8592(0x4c9)]();const _0x5cd05b=BattleManager[_0x1c8592(0x509)]();if(_0x5cd05b===this['_borderPortraitSprite'][_0x1c8592(0x509)])return;this[_0x1c8592(0x19a)][_0x1c8592(0x509)]=_0x5cd05b||this['_borderPortraitSprite']['actor'];if(!_0x5cd05b){if(_0x1c8592(0x698)===_0x1c8592(0x698))return;else this[_0x1c8592(0x959)][_0x1c8592(0xb74)]['smooth']=this[_0x1c8592(0xa74)]['battlerSmoothImage']();}else{if(_0x5cd05b[_0x1c8592(0x548)]()===''){this['_borderPortraitSprite'][_0x1c8592(0xb74)]=ImageManager['_emptyBitmap'];return;}else{if(_0x1c8592(0x319)===_0x1c8592(0x319)){const _0x16e876=ImageManager[_0x1c8592(0x832)](_0x5cd05b['getBattlePortraitFilename']());_0x16e876[_0x1c8592(0x6bf)](this[_0x1c8592(0x845)]['bind'](this,_0x16e876));}else{const _0x3b587a=_0x4f6bda(_0x23c932['$1'])[_0x1c8592(0xaff)]()[_0x1c8592(0x699)]();if(_0x3b587a===_0x1c8592(0x596))return _0x1c8592(0x596);if(_0x473721[_0x1c8592(0x7c3)][_0x3b587a])return _0x3b587a;}}}},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x845)]=function(_0x5eb725){const _0x4ee618=_0x16d1ef;this[_0x4ee618(0x60a)]=0x14,this[_0x4ee618(0x19a)][_0x4ee618(0xb74)]=_0x5eb725;if(SceneManager[_0x4ee618(0x438)][_0x4ee618(0x49c)]())this[_0x4ee618(0x19a)]['x']=0x0,this[_0x4ee618(0x6e7)]=Math['ceil'](_0x5eb725[_0x4ee618(0x7d5)]/0x2);else{if(_0x4ee618(0x1b7)!==_0x4ee618(0x739))this[_0x4ee618(0x19a)]['x']=this['width'],this['_borderPortraitTargetX']=this['width']*0x3/0x4;else return _0x4f7db2(_0x395e07['$1'])*0.01;}this[_0x4ee618(0x19a)]['opacity']=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x4ee618(0x842)];const _0x28aa17=BattleManager[_0x4ee618(0x509)]();_0x28aa17&&(this[_0x4ee618(0x6e7)]+=_0x28aa17[_0x4ee618(0xa36)](),this[_0x4ee618(0x19a)]['y']+=_0x28aa17[_0x4ee618(0x87c)]());},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x469)]=function(){const _0x59009f=_0x16d1ef;if(this['_borderPortraitDuration']>0x0){const _0x30c340=this[_0x59009f(0x60a)],_0x40ca71=this[_0x59009f(0x19a)];_0x40ca71['x']=(_0x40ca71['x']*(_0x30c340-0x1)+this[_0x59009f(0x6e7)])/_0x30c340,_0x40ca71[_0x59009f(0x981)]=(_0x40ca71['opacity']*(_0x30c340-0x1)+0xff)/_0x30c340,this[_0x59009f(0x60a)]--;}},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x2b6)]=function(){const _0x175f32=_0x16d1ef;return;this['_effectsContainer']&&(this[_0x175f32(0x4d8)]['x']=this['x'],this[_0x175f32(0x4d8)]['y']=this['y']);if(this[_0x175f32(0x476)]){if(_0x175f32(0x228)==='yTXNR'){if(_0x191735[_0x175f32(0x7f3)])this[_0x175f32(0x357)](_0xae6e6a[_0x175f32(0x2af)],_0xccfebc,_0x2d7fa4);}else this[_0x175f32(0x476)]['x']=this['x'],this[_0x175f32(0x476)]['y']=this['y'];}},Window_BattleStatus[_0x16d1ef(0xa5b)][_0x16d1ef(0x3a0)]=function(){const _0x5dd267=_0x16d1ef,_0x597009=VisuMZ[_0x5dd267(0x8c3)][_0x5dd267(0x58d)][_0x5dd267(0x66d)];if(_0x597009[_0x5dd267(0xac5)]){const _0x161721=new Sprite();_0x161721['bitmap']=ImageManager['loadSystem'](_0x597009[_0x5dd267(0xac5)]),_0x161721['x']=_0x597009[_0x5dd267(0x31d)]||0x0,_0x161721['y']=_0x597009['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x5dd267(0xab3)](_0x161721),this[_0x5dd267(0x73d)]=_0x161721;}if(_0x597009[_0x5dd267(0x89b)]){const _0x5abbde=new Sprite();_0x5abbde['bitmap']=ImageManager[_0x5dd267(0x642)](_0x597009[_0x5dd267(0x89b)]),_0x5abbde['x']=_0x597009[_0x5dd267(0x7ba)]||0x0,_0x5abbde['y']=_0x597009[_0x5dd267(0xae1)]||0x0,this[_0x5dd267(0x339)](_0x5abbde),this[_0x5dd267(0x5da)]=_0x5abbde;}},Window_BattleStatus['prototype']['updateAttachmentSprites']=function(){const _0x4882e7=_0x16d1ef;this['_frontAttachmentSprite']&&this['addChild'](this[_0x4882e7(0x5da)]),this[_0x4882e7(0x73d)]&&this[_0x4882e7(0xab3)](this['_backAttachmentSprite']);},Window_BattleActor['prototype']['isOkEnabled']=function(){const _0x18384b=_0x16d1ef;return Window_BattleStatus[_0x18384b(0xa5b)][_0x18384b(0x5ba)][_0x18384b(0x2c7)](this)&&this[_0x18384b(0xace)]();},Window_BattleActor[_0x16d1ef(0xa5b)][_0x16d1ef(0xace)]=function(){const _0x470b04=_0x16d1ef,_0x497db9=BattleManager[_0x470b04(0x439)](),_0x5940e6=this[_0x470b04(0x509)](this['index']());if(!_0x497db9)return!![];if(!_0x497db9[_0x470b04(0x74a)]())return!![];const _0xd419b9=_0x497db9[_0x470b04(0x74a)]()[_0x470b04(0x954)];if(_0xd419b9[_0x470b04(0xaf1)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x5940e6===BattleManager[_0x470b04(0x509)]())return![];}return!![];},VisuMZ[_0x16d1ef(0x8c3)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)],Window_BattleEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)]=function(_0x21fbf){const _0x2cad25=_0x16d1ef;this[_0x2cad25(0x8fe)]=null,VisuMZ[_0x2cad25(0x8c3)][_0x2cad25(0x66a)]['call'](this,_0x21fbf);},Window_BattleEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x636)]=function(){const _0x2b54ec=_0x16d1ef;return this[_0x2b54ec(0x177)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x237)]=Window_BattleEnemy['prototype']['show'],Window_BattleEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x1b0)]=function(){const _0x542f2a=_0x16d1ef;VisuMZ['BattleCore']['Window_BattleEnemy_show'][_0x542f2a(0x2c7)](this),this['y']=Graphics[_0x542f2a(0x842)]*0xa;},Window_BattleEnemy['prototype'][_0x16d1ef(0x15e)]=function(){const _0x3afb4d=_0x16d1ef;return $gameTroop[_0x3afb4d(0x888)]()[_0x3afb4d(0x777)](0x0);},Window_BattleEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x928)]=function(){const _0x236086=_0x16d1ef;this[_0x236086(0xa18)]=this['validTargets'](),this[_0x236086(0x4ee)](),Window_Selectable[_0x236086(0xa5b)][_0x236086(0x928)]['call'](this);},Window_BattleEnemy[_0x16d1ef(0xa5b)]['sortEnemies']=function(){const _0x40719f=_0x16d1ef;this[_0x40719f(0xa18)]['sort']((_0xc86750,_0x3236b2)=>{const _0x16de70=_0x40719f;if(_0x16de70(0x80e)===_0x16de70(0x8e0)){if(this[_0x16de70(0x649)]())this[_0x16de70(0x955)][_0x16de70(0x795)](_0x5dfa8c);}else{if(_0xc86750[_0x16de70(0xb02)]()['_baseX']===_0x3236b2[_0x16de70(0xb02)]()[_0x16de70(0x37a)]){if(_0x16de70(0x171)===_0x16de70(0x731))_0x297d91[_0x16de70(0xa5b)][_0x16de70(0x8e4)]['call'](this,_0x4f4c71);else return _0xc86750[_0x16de70(0xb02)]()[_0x16de70(0xb72)]-_0x3236b2[_0x16de70(0xb02)]()[_0x16de70(0xb72)];}else{if(_0x16de70(0xac7)!==_0x16de70(0x45d))return _0xc86750[_0x16de70(0xb02)]()[_0x16de70(0x37a)]-_0x3236b2[_0x16de70(0xb02)]()[_0x16de70(0x37a)];else{if(_0xd492c0>_0xef7bff[_0x16de70(0x37a)])_0x206aac=!![];if(_0x25dc68<_0x756dc9[_0x16de70(0x37a)])_0x74fbe6=![];}}}}),SceneManager['isBattleFlipped']()&&('DZYMu'!==_0x40719f(0x794)?this[_0x40719f(0xa18)][_0x40719f(0x968)]():(_0x2d69c5&&_0x13ae7d[_0x40719f(0x71d)]()&&_0x11d4bb['clearActiveWeaponSlot'](),this['callNextMethod']()));},Window_BattleEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0x9bc)]=function(){const _0x1f6c75=_0x16d1ef,_0x52971e=VisuMZ[_0x1f6c75(0x8c3)][_0x1f6c75(0x58d)]['Enemy'];if(_0x52971e[_0x1f6c75(0x448)]){if(_0x1f6c75(0x488)===_0x1f6c75(0x2c5)){const _0x449f57=_0x1e3e51['regionId'](_0x4ac217['x'],_0x5aaae7['y']);if(this[_0x1f6c75(0x99d)]&&this[_0x1f6c75(0x65e)][_0x449f57])return this['_regionBattleback2'][_0x449f57];}else this[_0x1f6c75(0x2d8)]();}else{if(_0x1f6c75(0x582)!==_0x1f6c75(0x582))return _0xffcb67[_0x1f6c75(0x8ad)](...this[_0x1f6c75(0xadb)]()[_0x1f6c75(0x888)]()[_0x1f6c75(0x787)](_0x27e4ca=>_0x27e4ca!==this[_0x1f6c75(0x4db)]())),this['repeatTargets'](_0x2aa8db);else this[_0x1f6c75(0x61b)]();}},Window_BattleEnemy['prototype'][_0x16d1ef(0x2d8)]=function(){const _0x65c687=_0x16d1ef;if(this[_0x65c687(0x8fe)]&&this['_enemies']['includes'](this['_lastEnemy'])){const _0x244e17=this[_0x65c687(0xa18)]['indexOf'](this['_lastEnemy']);this[_0x65c687(0xa91)](_0x244e17);}else _0x65c687(0x2eb)!==_0x65c687(0x2eb)?(this[_0x65c687(0x157)](_0x65c687(0x72c)),_0x31da4a[_0x65c687(0x8c3)][_0x65c687(0x40f)][_0x65c687(0x2c7)](this),this[_0x65c687(0x3d4)](_0x65c687(0x98b))):this[_0x65c687(0x61b)]();},Window_BattleEnemy[_0x16d1ef(0xa5b)]['autoSelectPriority']=function(){const _0x3ad919=_0x16d1ef,_0x14cd0d=VisuMZ[_0x3ad919(0x8c3)][_0x3ad919(0x58d)][_0x3ad919(0xb6b)];let _0x2fdb3e=![];$gameSystem[_0x3ad919(0xb9b)]()?_0x2fdb3e=_0x14cd0d[_0x3ad919(0x808)]:_0x2fdb3e=_0x14cd0d[_0x3ad919(0x617)],this[_0x3ad919(0xa91)](_0x2fdb3e?this['maxItems']()-0x1:0x0);},Window_BattleEnemy[_0x16d1ef(0xa5b)][_0x16d1ef(0xa20)]=function(){const _0x1341a3=_0x16d1ef;Window_Selectable[_0x1341a3(0xa5b)][_0x1341a3(0xa20)][_0x1341a3(0x2c7)](this),this[_0x1341a3(0x8fe)]=this['enemy']();},Window_BattleItem[_0x16d1ef(0xa5b)]['includes']=function(_0x3fcb8f){const _0x43dd4b=_0x16d1ef;if(!_0x3fcb8f)return![];return _0x3fcb8f['occasion']===0x0||_0x3fcb8f[_0x43dd4b(0x83c)]===0x1;};function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel[_0x16d1ef(0xa5b)]=Object[_0x16d1ef(0x94e)](Window_Base['prototype']),Window_AutoBattleCancel['prototype']['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)]=function(_0x656818){const _0x4e84ae=_0x16d1ef;Window_Base[_0x4e84ae(0xa5b)][_0x4e84ae(0x839)][_0x4e84ae(0x2c7)](this,_0x656818),this[_0x4e84ae(0x774)](this[_0x4e84ae(0x5b6)]()),this[_0x4e84ae(0x928)]();},Window_AutoBattleCancel[_0x16d1ef(0xa5b)]['bgType']=function(){const _0x54e1f6=_0x16d1ef;return VisuMZ[_0x54e1f6(0x8c3)][_0x54e1f6(0x58d)]['AutoBattle'][_0x54e1f6(0x630)];},Window_AutoBattleCancel[_0x16d1ef(0xa5b)][_0x16d1ef(0x928)]=function(){const _0x4b2cbd=_0x16d1ef;this[_0x4b2cbd(0xaee)][_0x4b2cbd(0x721)]();const _0x2c4cbb=VisuMZ[_0x4b2cbd(0x8c3)][_0x4b2cbd(0x58d)][_0x4b2cbd(0x849)][_0x4b2cbd(0x7f1)],_0x54e7d2=_0x2c4cbb[_0x4b2cbd(0x86a)](this[_0x4b2cbd(0x622)](),this[_0x4b2cbd(0xb7b)]()),_0x429b1d=this[_0x4b2cbd(0x655)](_0x54e7d2)[_0x4b2cbd(0x7d5)],_0x2467a2=Math['floor']((this[_0x4b2cbd(0xbd6)]-_0x429b1d)/0x2);this[_0x4b2cbd(0x1c2)](_0x54e7d2,_0x2467a2,0x0,_0x429b1d);},Window_AutoBattleCancel[_0x16d1ef(0xa5b)][_0x16d1ef(0x622)]=function(){const _0xaca2c2=_0x16d1ef;if(Imported[_0xaca2c2(0x6ce)])return TextManager[_0xaca2c2(0xac9)]('ok');else{if(_0xaca2c2(0x819)===_0xaca2c2(0x6ea)){if(!_0x232f70[_0xaca2c2(0x37d)]())return;if(!_0x1da8a1[_0xaca2c2(0x191)])return;if(!_0x1c709e[_0xaca2c2(0x515)])return;_0xe0c4c6['ConvertParams'](_0x57ee2e,_0x5767bb);const _0x15a93f=_0x42fb92[_0xaca2c2(0x25b)];_0x18b527['setValue'](_0x15a93f,_0x8a1a35['_subject'][_0xaca2c2(0x373)]());}else return VisuMZ[_0xaca2c2(0x8c3)][_0xaca2c2(0x58d)]['AutoBattle']['AutoBattleOK'];}},Window_AutoBattleCancel[_0x16d1ef(0xa5b)][_0x16d1ef(0xb7b)]=function(){const _0x24a9d0=_0x16d1ef;if(Imported['VisuMZ_0_CoreEngine']){if('KEVCa'!==_0x24a9d0(0x328))_0x5971a8[_0x24a9d0(0x482)]=_0x159a11(_0x2d201d['$1'])[_0x24a9d0(0xaff)]()[_0x24a9d0(0x699)]();else return TextManager[_0x24a9d0(0xac9)](_0x24a9d0(0x947));}else{if('nlkVF'!=='FqlUn')return VisuMZ[_0x24a9d0(0x8c3)][_0x24a9d0(0x58d)][_0x24a9d0(0x849)]['AutoBattleCancel'];else{if(this[_0x24a9d0(0x3f1)][_0x24a9d0(0x49e)]())return;this[_0x24a9d0(0x896)](),this[_0x24a9d0(0x4ad)](),!this['_subject']&&!this['_currentActor']&&_0x4330e2[_0x24a9d0(0x438)][_0x24a9d0(0xba5)]();}}},Window_AutoBattleCancel[_0x16d1ef(0xa5b)][_0x16d1ef(0x3e1)]=function(){const _0x231c02=_0x16d1ef;Window_Base['prototype'][_0x231c02(0x3e1)]['call'](this),this['updateVisibility'](),this[_0x231c02(0x3e0)]();},Window_AutoBattleCancel[_0x16d1ef(0xa5b)][_0x16d1ef(0x538)]=function(){const _0x3b1ed6=_0x16d1ef;this[_0x3b1ed6(0x7f9)]=BattleManager['_autoBattle'];},Window_AutoBattleCancel[_0x16d1ef(0xa5b)]['updateCancel']=function(){const _0x32d6db=_0x16d1ef;if(!BattleManager[_0x32d6db(0xa16)])return;if(Input[_0x32d6db(0xbbb)]('ok')||Input[_0x32d6db(0xbbb)](_0x32d6db(0x947))||TouchInput['isClicked']()||TouchInput['isCancelled']()){if(_0x32d6db(0x261)!==_0x32d6db(0x261)){if(this['allowCollapse']())_0x3d3c92['BattleCore'][_0x32d6db(0x744)][_0x32d6db(0x2c7)](this);}else SoundManager[_0x32d6db(0x6a7)](),BattleManager[_0x32d6db(0xa16)]=![],Input[_0x32d6db(0x721)](),TouchInput[_0x32d6db(0x721)]();}};function Window_EnemyName(){const _0x5733b1=_0x16d1ef;this[_0x5733b1(0x839)](...arguments);}Window_EnemyName[_0x16d1ef(0xa5b)]=Object[_0x16d1ef(0x94e)](Window_StatusBase[_0x16d1ef(0xa5b)]),Window_EnemyName['prototype'][_0x16d1ef(0xb30)]=Window_EnemyName,Window_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0x839)]=function(_0x4a2678){const _0x401265=_0x16d1ef;this[_0x401265(0x1d7)]=_0x4a2678,this['_text']='';const _0x173d42=new Rectangle(0x0,0x0,Graphics[_0x401265(0xb26)],this[_0x401265(0x61e)]()*0x4);Window_StatusBase['prototype']['initialize'][_0x401265(0x2c7)](this,_0x173d42),this[_0x401265(0x774)](0x2),this['contentsOpacity']=0x0;},Window_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0x799)]=function(){const _0x257410=_0x16d1ef;this[_0x257410(0x8cc)]=0x0;},Window_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0x336)]=function(){const _0x4e505b=_0x16d1ef;return $gameTroop[_0x4e505b(0x9fe)]()[this[_0x4e505b(0x1d7)]];},Window_EnemyName['prototype']['update']=function(){const _0x45e02c=_0x16d1ef;Window_StatusBase[_0x45e02c(0xa5b)][_0x45e02c(0x3e1)][_0x45e02c(0x2c7)](this),this[_0x45e02c(0x336)]()&&this[_0x45e02c(0x336)]()[_0x45e02c(0x8c4)]()!==this[_0x45e02c(0x511)]&&(this[_0x45e02c(0x511)]=this[_0x45e02c(0x336)]()['name'](),this[_0x45e02c(0x928)]()),this[_0x45e02c(0xaa4)](),this[_0x45e02c(0x2a2)]();},Window_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0xaa4)]=function(){const _0x545322=_0x16d1ef;if(!this['enemy']()){if(_0x545322(0xaac)!==_0x545322(0x5c4)){if(this[_0x545322(0x36d)]>0x0)this['contentsOpacity']-=0x10;}else{const _0x5a6ff7=_0x3c1255[_0x545322(0x5d3)]('['+_0x1b1423['$1'][_0x545322(0xaf1)](/\d+/g)+']');for(const _0x14e865 of _0x5a6ff7){if(!_0x20e717['value'](_0x14e865))return!![];}return![];}}else{if(this[_0x545322(0x336)]()['isDead']()){if(this[_0x545322(0x36d)]>0x0)this[_0x545322(0x36d)]-=0x10;}else{if(SceneManager['_scene'][_0x545322(0x8ff)]&&SceneManager['_scene'][_0x545322(0x8ff)][_0x545322(0x29e)]&&SceneManager['_scene'][_0x545322(0x8ff)]['_enemies']['includes'](this[_0x545322(0x336)]())){if(this['contentsOpacity']<0xff)this[_0x545322(0x36d)]+=0x10;}else this[_0x545322(0x36d)]>0x0&&(_0x545322(0x4aa)!=='mIOpJ'?this[_0x545322(0x36d)]-=0x10:_0x25a778='right');}}},Window_EnemyName['prototype'][_0x16d1ef(0x2a2)]=function(){const _0x21a9fb=_0x16d1ef;if(!this['enemy']())return;SceneManager[_0x21a9fb(0x3a7)]()?this['x']=Graphics[_0x21a9fb(0xb26)]-this[_0x21a9fb(0x336)]()['battler']()[_0x21a9fb(0x37a)]:this['x']=this[_0x21a9fb(0x336)]()[_0x21a9fb(0xb02)]()[_0x21a9fb(0x37a)];this['x']-=Math[_0x21a9fb(0x5d9)](this[_0x21a9fb(0x7d5)]/0x2),this['y']=this[_0x21a9fb(0x336)]()[_0x21a9fb(0xb02)]()['_baseY']-Math[_0x21a9fb(0x5d9)](this[_0x21a9fb(0x61e)]()*1.5);const _0x3addf7=VisuMZ[_0x21a9fb(0x8c3)]['Settings'][_0x21a9fb(0xb6b)];this['x']+=_0x3addf7[_0x21a9fb(0x686)]||0x0,this['y']+=_0x3addf7[_0x21a9fb(0x8e1)]||0x0;},Window_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0x662)]=function(){const _0x2b63fb=_0x16d1ef;Window_Base['prototype'][_0x2b63fb(0x662)][_0x2b63fb(0x2c7)](this),this[_0x2b63fb(0xaee)][_0x2b63fb(0xad1)]=VisuMZ[_0x2b63fb(0x8c3)][_0x2b63fb(0x58d)][_0x2b63fb(0xb6b)][_0x2b63fb(0x7ca)];},Window_EnemyName['prototype'][_0x16d1ef(0x928)]=function(){const _0xc941ea=_0x16d1ef;Window_StatusBase[_0xc941ea(0xa5b)][_0xc941ea(0x928)]['call'](this),this[_0xc941ea(0xaee)][_0xc941ea(0x721)]();if(!this[_0xc941ea(0x336)]())return;this[_0xc941ea(0xbcd)]();},Window_EnemyName[_0x16d1ef(0xa5b)][_0x16d1ef(0xbcd)]=function(){const _0x3bc220=_0x16d1ef;this['_text']=this[_0x3bc220(0x336)]()[_0x3bc220(0x8c4)]();const _0x1fc5ac=this[_0x3bc220(0x655)](this[_0x3bc220(0x511)])[_0x3bc220(0x7d5)],_0x161e55=Math[_0x3bc220(0x5d9)]((this[_0x3bc220(0xbd6)]-_0x1fc5ac)/0x2);this[_0x3bc220(0x1c2)](this[_0x3bc220(0x511)],_0x161e55,0x0,_0x1fc5ac+0x8);},Window_BattleLog[_0x16d1ef(0xa5b)]['maxLines']=function(){const _0x1ba94d=_0x16d1ef;return VisuMZ[_0x1ba94d(0x8c3)][_0x1ba94d(0x58d)][_0x1ba94d(0x591)][_0x1ba94d(0x195)];},Window_BattleLog[_0x16d1ef(0xa5b)]['messageSpeed']=function(){const _0x8ea871=_0x16d1ef;return VisuMZ['BattleCore']['Settings'][_0x8ea871(0x591)][_0x8ea871(0x351)];},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x746)]=function(){const _0x216558=_0x16d1ef;return VisuMZ[_0x216558(0x8c3)][_0x216558(0x58d)][_0x216558(0x591)][_0x216558(0x623)];},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x9dd)]=function(){return![];},Window_BattleLog['prototype'][_0x16d1ef(0x6db)]=function(_0x19fdb7,_0x77b8dd){const _0x49e9d1=_0x16d1ef;this[_0x49e9d1(0xaa3)](_0x49e9d1(0x549)),BattleManager[_0x49e9d1(0x757)](_0x19fdb7,_0x77b8dd),this[_0x49e9d1(0xaf2)]();},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x549)]=function(){this['callNextMethod']();},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x8ad)]=function(_0x3d096c){const _0x4f664d=_0x16d1ef,_0x5ac075=Array[_0x4f664d(0xa5b)][_0x4f664d(0x777)]['call'](arguments,0x1),_0x44f3d3={'name':_0x3d096c,'params':_0x5ac075},_0x213569=this[_0x4f664d(0x2a5)][_0x4f664d(0x526)](_0x1090ca=>_0x1090ca[_0x4f664d(0x8c4)])[_0x4f664d(0x6f3)]('actionSplicePoint');if(_0x213569>=0x0){if(_0x4f664d(0xb64)!==_0x4f664d(0x90d))this[_0x4f664d(0x2a5)][_0x4f664d(0x5e9)](_0x213569,0x0,_0x44f3d3);else{if(!_0x423aa5['isSideView']())return![];return![];}}else this[_0x4f664d(0x2a5)][_0x4f664d(0x8ad)](_0x44f3d3);},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0xaa3)]=function(_0x5843a1){const _0x1b17c3=_0x16d1ef,_0x1dae19=Array['prototype'][_0x1b17c3(0x777)][_0x1b17c3(0x2c7)](arguments,0x1);this['_methods'][_0x1b17c3(0xaa3)]({'name':_0x5843a1,'params':_0x1dae19});},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x877)]=function(){const _0x80c4fa=_0x16d1ef;if(!$gameTemp[_0x80c4fa(0x502)]())return;console[_0x80c4fa(0xb03)](this[_0x80c4fa(0x2a5)][_0x80c4fa(0x526)](_0x2a8d46=>_0x2a8d46[_0x80c4fa(0x8c4)])[_0x80c4fa(0x683)]('\x0a'));},VisuMZ['BattleCore'][_0x16d1ef(0x9b3)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x928)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x928)]=function(){this['_requestRefresh']=!![];},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x80d)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x3e1)],Window_BattleLog[_0x16d1ef(0xa5b)]['update']=function(){const _0x142387=_0x16d1ef;VisuMZ[_0x142387(0x8c3)][_0x142387(0x80d)]['call'](this);if(this[_0x142387(0x6f6)])this['processRefresh']();},Window_BattleLog['prototype'][_0x16d1ef(0x74e)]=function(){const _0x1d7c7e=_0x16d1ef;this[_0x1d7c7e(0x6f6)]=![],VisuMZ[_0x1d7c7e(0x8c3)][_0x1d7c7e(0x9b3)][_0x1d7c7e(0x2c7)](this);},Window_BattleLog['prototype'][_0x16d1ef(0x422)]=function(_0x40a5a6){const _0x3ffd28=_0x16d1ef;let _0x437455=VisuMZ[_0x3ffd28(0x8c3)][_0x3ffd28(0x58d)][_0x3ffd28(0x591)][_0x3ffd28(0x3a1)][_0x3ffd28(0x1e1)]()[_0x3ffd28(0x699)](),_0x5ca805=this['_lines'][_0x40a5a6];if(_0x5ca805[_0x3ffd28(0xaf1)](/<LEFT>/i)){if(_0x3ffd28(0x91d)==='fUysx'){if(this[_0x3ffd28(0xa74)]&&this[_0x3ffd28(0xa74)][_0x3ffd28(0x8ae)]())return![];if(this[_0x3ffd28(0xa74)]&&!this['_battler'][_0x3ffd28(0x4fb)]())return![];return _0x2d7cdc['isSideView']();}else _0x437455=_0x3ffd28(0x948);}else{if(_0x5ca805[_0x3ffd28(0xaf1)](/<CENTER>/i))_0x437455=_0x3ffd28(0x4a0);else _0x5ca805[_0x3ffd28(0xaf1)](/<RIGHT>/i)&&(_0x437455=_0x3ffd28(0x766));}_0x5ca805=_0x5ca805['replace'](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x5ca805=_0x5ca805[_0x3ffd28(0x541)](/\\I\[0\]/gi,'');const _0x5ce89a=this[_0x3ffd28(0xad3)](_0x40a5a6);this[_0x3ffd28(0xaee)][_0x3ffd28(0xb4c)](_0x5ce89a['x'],_0x5ce89a['y'],_0x5ce89a['width'],_0x5ce89a[_0x3ffd28(0x842)]);const _0x26f956=this[_0x3ffd28(0x655)](_0x5ca805)[_0x3ffd28(0x7d5)];let _0x11cfbc=_0x5ce89a['x'];if(_0x437455===_0x3ffd28(0x4a0))_0x11cfbc+=(_0x5ce89a[_0x3ffd28(0x7d5)]-_0x26f956)/0x2;else _0x437455===_0x3ffd28(0x766)&&(_0x11cfbc+=_0x5ce89a[_0x3ffd28(0x7d5)]-_0x26f956);this[_0x3ffd28(0x1c2)](_0x5ca805,_0x11cfbc,_0x5ce89a['y'],_0x26f956+0x8);},Window_BattleLog[_0x16d1ef(0xa5b)]['addText']=function(_0x257e3b){const _0x582b80=_0x16d1ef;this[_0x582b80(0x8fb)][_0x582b80(0x8ad)](_0x257e3b),this[_0x582b80(0x928)](),this[_0x582b80(0xaf2)]();},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0xb48)]=function(){const _0x28cfb2=_0x16d1ef;let _0x5bad23=![];switch(this[_0x28cfb2(0xbbd)]){case _0x28cfb2(0x6f9):_0x5bad23=this[_0x28cfb2(0x71a)]['isEffecting']();break;case _0x28cfb2(0x8f5):_0x5bad23=this['_spriteset'][_0x28cfb2(0x380)]();break;case'animation':_0x5bad23=this[_0x28cfb2(0x71a)]['isAnimationPlaying']();break;case'float':_0x5bad23=this[_0x28cfb2(0x71a)][_0x28cfb2(0x671)]();break;case _0x28cfb2(0x57a):_0x5bad23=this['_spriteset'][_0x28cfb2(0x291)]();break;case _0x28cfb2(0x981):_0x5bad23=this['_spriteset']['isAnyoneChangingOpacity']();break;}if(!_0x5bad23){if(_0x28cfb2(0x9f8)!==_0x28cfb2(0x719))this[_0x28cfb2(0xbbd)]='';else{this['_regionBattleback1']={},this['_regionBattleback2']={};if(!_0x3533fc)return;const _0x2eba4a=_0x4f278a[_0x28cfb2(0x954)];if(!_0x2eba4a)return;const _0x21cda5=_0x2eba4a['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x21cda5)for(const _0x34dc24 of _0x21cda5){_0x34dc24[_0x28cfb2(0xaf1)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x18d814=_0x5b65f6(_0x30672c['$1']),_0x449d63=_0x284b46(_0x4470a6['$2']),_0x17510e=_0x449d63===0x1?this['_regionBattleback1']:this[_0x28cfb2(0x65e)],_0x2b4546=_0x5e2549(_0x2aba88['$3']);_0x17510e[_0x18d814]=_0x2b4546;}}}return _0x5bad23;},Window_BattleLog['prototype']['waitForAnimation']=function(){const _0x30ba87=_0x16d1ef;this[_0x30ba87(0x13b)](_0x30ba87(0x368));},Window_BattleLog[_0x16d1ef(0xa5b)]['waitForFloat']=function(){const _0x239721=_0x16d1ef;this[_0x239721(0x13b)]('float');},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x1f4)]=function(){const _0xaa8f4c=_0x16d1ef;this['setWaitMode'](_0xaa8f4c(0x57a));},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x12e)]=function(){const _0x162b20=_0x16d1ef;this[_0x162b20(0x13b)](_0x162b20(0x981));},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0xa19)]=function(){const _0xe743d=_0x16d1ef,_0x22c3b4=VisuMZ[_0xe743d(0x8c3)][_0xe743d(0x58d)]['BattleLog'];if(!_0x22c3b4[_0xe743d(0x250)])return;this[_0xe743d(0x8ad)](_0xe743d(0x3fb),_0x22c3b4['StartTurnMsg'][_0xe743d(0x86a)]($gameTroop[_0xe743d(0x9c2)]())),this[_0xe743d(0x8ad)](_0xe743d(0x749),_0x22c3b4[_0xe743d(0xb15)]),this[_0xe743d(0x8ad)](_0xe743d(0x721));},Window_BattleLog[_0x16d1ef(0xa5b)]['startAction']=function(_0x226ed8,_0x5d2392,_0x292ac2){const _0x565141=_0x16d1ef;this[_0x565141(0xa3a)](_0x5d2392)?BattleManager[_0x565141(0x19b)]():this[_0x565141(0x775)](_0x226ed8,_0x5d2392,_0x292ac2);},Window_BattleLog['prototype'][_0x16d1ef(0xa3a)]=function(_0x568ac4){const _0x456acc=_0x16d1ef;if(!SceneManager[_0x456acc(0x37d)]())return![];if(!_0x568ac4)return![];if(!_0x568ac4[_0x456acc(0x74a)]())return![];if(_0x568ac4[_0x456acc(0x74a)]()[_0x456acc(0x954)][_0x456acc(0xaf1)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x456acc(0x39e)===_0x456acc(0xbb3)){const _0x25c415=_0x5069ce['item']();this[_0x456acc(0x1f2)](_0x383e0c,_0x25c415),this[_0x456acc(0x8ad)](_0x456acc(0x1fc),_0x712bb8,_0x2bf536,!![]),this[_0x456acc(0x8ad)](_0x456acc(0x75a),_0x212ddf,_0x5b4cf3),this[_0x456acc(0x8ad)](_0x456acc(0xaa0)),this[_0x456acc(0x8ad)](_0x456acc(0x36f),_0x389df6,_0xd9f1f3),this[_0x456acc(0x8ad)](_0x456acc(0x213));}else return!![];}if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x568ac4[_0x456acc(0x74a)]()))return!![];return![];},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x775)]=function(_0x12979e,_0x2a0c61,_0x4518bc){const _0xeb057b=_0x16d1ef,_0x1ba0dc=_0x2a0c61[_0xeb057b(0x74a)]();this[_0xeb057b(0x45a)](_0x12979e,_0x2a0c61,_0x4518bc),this[_0xeb057b(0x779)](_0x12979e,_0x2a0c61,_0x4518bc),this[_0xeb057b(0x762)](_0x12979e,_0x2a0c61,_0x4518bc);},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x1f2)]=function(_0x3d421a,_0x5b7f55){const _0x4d513e=_0x16d1ef,_0x55583d=VisuMZ[_0x4d513e(0x8c3)][_0x4d513e(0x58d)][_0x4d513e(0x591)];_0x55583d['ActionCenteredName']&&this[_0x4d513e(0x8ad)](_0x4d513e(0x3fb),_0x4d513e(0x289)[_0x4d513e(0x86a)](DataManager['battleDisplayText'](_0x5b7f55)));if(DataManager[_0x4d513e(0x382)](_0x5b7f55)){if(_0x55583d[_0x4d513e(0x143)])this[_0x4d513e(0x357)](_0x5b7f55[_0x4d513e(0x615)],_0x3d421a,_0x5b7f55);if(_0x55583d[_0x4d513e(0x38e)])this[_0x4d513e(0x357)](_0x5b7f55[_0x4d513e(0x6de)],_0x3d421a,_0x5b7f55);}else{if(_0x55583d['ActionItemMsg'])this['displayItemMessage'](TextManager[_0x4d513e(0x2af)],_0x3d421a,_0x5b7f55);}},Window_BattleLog[_0x16d1ef(0xa5b)]['setupActionSet']=function(_0x276030,_0x43dc0e,_0x65e3f5){const _0x3cdb3a=_0x16d1ef,_0x14e9a2=_0x43dc0e[_0x3cdb3a(0x74a)]();this[_0x3cdb3a(0x1f2)](_0x276030,_0x14e9a2),this[_0x3cdb3a(0x8ad)]('applyImmortal',_0x276030,_0x65e3f5,!![]),this[_0x3cdb3a(0x8ad)](_0x3cdb3a(0x75a),_0x276030,_0x43dc0e),this['push'](_0x3cdb3a(0xaa0)),this[_0x3cdb3a(0x8ad)](_0x3cdb3a(0x36f),_0x276030,_0x43dc0e),this[_0x3cdb3a(0x8ad)](_0x3cdb3a(0x213));},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x779)]=function(_0x1e48cb,_0x5eacfa,_0x5ff29c){const _0x1ce1a1=_0x16d1ef;if(this[_0x1ce1a1(0x15b)](_0x5eacfa))_0x1ce1a1(0x3b4)===_0x1ce1a1(0x3b4)?this[_0x1ce1a1(0xa66)](_0x1e48cb,_0x5eacfa,_0x5ff29c):(this[_0x1ce1a1(0x3f1)]=this['_tpbSceneChangeCacheActor'],this[_0x1ce1a1(0x3f1)][_0x1ce1a1(0x441)]='charged',this['_inputting']=!![],this[_0x1ce1a1(0x881)]=null);else{if(this['isMeleeMultiTargetAction'](_0x5eacfa))_0x1ce1a1(0xa0d)===_0x1ce1a1(0xa0d)?this[_0x1ce1a1(0x58a)](_0x1e48cb,_0x5eacfa,_0x5ff29c):_0xc8dd4+=_0x30d5de(_0x1fbd74['$1']);else{if(_0x5eacfa['isForRandom']()){if('JAVYC'!==_0x1ce1a1(0xa71)){const _0x1d59f6=_0x40f8a6[_0x1ce1a1(0x8c3)][_0x1ce1a1(0x58d)][_0x1ce1a1(0x93b)],_0x1c1585=_0x1d59f6[_0x1ce1a1(0x5fa)];_0x1c1585&&_0x23b8f3[_0x1ce1a1(0x8c3)][_0x1ce1a1(0x282)](_0x1c1585)&&(this['_battleCoreBattleStartEvent']=!![],_0x50128c[_0x1ce1a1(0x5ab)](_0x1d59f6[_0x1ce1a1(0x5fa)]),_0x32ff85['updateInterpreter'](),_0x428321[_0x1ce1a1(0x9de)][_0x1ce1a1(0x1e5)]=!![]),_0x1d59f6['DefeatEvent']>0x0&&(this[_0x1ce1a1(0x834)]=!![]);}else this[_0x1ce1a1(0x619)](_0x1e48cb,_0x5eacfa,_0x5ff29c);}else{if('YdZMF'!=='YdZMF'){if(!_0xd10c35['isSideView']())return;const _0x17a7c7=this[_0x1ce1a1(0xb02)]();if(!_0x17a7c7)return;_0x17a7c7['startFloat'](_0x58bf14,_0x29c757,_0x591ff4);}else this[_0x1ce1a1(0x88c)](_0x1e48cb,_0x5eacfa,_0x5ff29c);}}}},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x15b)]=function(_0x9fd481){const _0x3255e5=_0x16d1ef;if(!_0x9fd481[_0x3255e5(0x5e4)]())return![];if(!_0x9fd481[_0x3255e5(0x776)]())return![];if(!_0x9fd481['isForOpponent']())return![];return VisuMZ['BattleCore'][_0x3255e5(0x58d)][_0x3255e5(0x7ec)][_0x3255e5(0x71c)];},Window_BattleLog['prototype'][_0x16d1ef(0xa66)]=function(_0x2af243,_0x4b1cb4,_0x9d0c0b){const _0x5e4d9c=_0x16d1ef,_0x2a4b87=_0x2af243['getAttackMotion']()[_0x5e4d9c(0x427)]<0x2,_0x45fe8b=0x14,_0x57cccd=0x30;_0x2a4b87&&(this['push'](_0x5e4d9c(0x360),[_0x2af243],_0x57cccd,_0x45fe8b),this['push'](_0x5e4d9c(0x8b0),_0x2af243,_0x9d0c0b,'front\x20base',_0x45fe8b,!![],_0x5e4d9c(0x56c),!![]),this['push']('requestMotion',[_0x2af243],_0x5e4d9c(0xb21)),this[_0x5e4d9c(0x8ad)](_0x5e4d9c(0xaa0)));let _0x3be452=_0x4b1cb4[_0x5e4d9c(0x3e8)]()?this['getDualWieldTimes'](_0x2af243):0x1;for(let _0x32d474=0x0;_0x32d474<_0x3be452;_0x32d474++){_0x5e4d9c(0x6c5)==='LCbQD'?(_0x4b1cb4[_0x5e4d9c(0x3e8)]()&&_0x2af243[_0x5e4d9c(0x71d)]()&&this[_0x5e4d9c(0x8ad)]('setActiveWeaponSet',_0x2af243,_0x32d474),_0x4b1cb4['item']()[_0x5e4d9c(0x995)]<0x0?this['targetActionSet'](_0x2af243,_0x4b1cb4,_0x9d0c0b):this[_0x5e4d9c(0x88c)](_0x2af243,_0x4b1cb4,_0x9d0c0b)):(_0x2d4525+=_0x39578f['isActor']()?-_0x6f3685:_0xa2f24f,_0x2d1491+=_0x13d628);}_0x4b1cb4[_0x5e4d9c(0x3e8)]()&&_0x2af243[_0x5e4d9c(0x71d)]()&&this[_0x5e4d9c(0x8ad)](_0x5e4d9c(0x61d),_0x2af243);this[_0x5e4d9c(0x8ad)](_0x5e4d9c(0x1fc),_0x2af243,_0x9d0c0b,![]);if(_0x2a4b87){if(_0x5e4d9c(0x4ac)!==_0x5e4d9c(0x4e5)){const _0x36d8d1=_0x2af243['battler']();this[_0x5e4d9c(0x8ad)](_0x5e4d9c(0x360),[_0x2af243],_0x57cccd,_0x45fe8b),this[_0x5e4d9c(0x8ad)]('performMoveToPoint',_0x2af243,_0x36d8d1['_homeX'],_0x36d8d1[_0x5e4d9c(0x9ea)],_0x45fe8b,![],_0x5e4d9c(0x56c)),this[_0x5e4d9c(0x8ad)](_0x5e4d9c(0x80f),[_0x2af243],_0x5e4d9c(0x2b7)),this[_0x5e4d9c(0x8ad)](_0x5e4d9c(0xaa0)),this[_0x5e4d9c(0x8ad)](_0x5e4d9c(0x80f),[_0x2af243],_0x5e4d9c(0xb21));}else{if(this['_svBattlerData']!==_0x2baad3)return this['_svBattlerData'];return this[_0x5e4d9c(0x9e9)](),this[_0x5e4d9c(0x9cd)];}}},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x8a3)]=function(_0x31e5e4){const _0x13e3a4=_0x16d1ef;if(!_0x31e5e4[_0x13e3a4(0x5e4)]())return![];if(!_0x31e5e4['isForAll']())return![];if(!_0x31e5e4[_0x13e3a4(0x6bd)]())return![];return VisuMZ[_0x13e3a4(0x8c3)][_0x13e3a4(0x58d)][_0x13e3a4(0x7ec)][_0x13e3a4(0x397)];},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x58a)]=function(_0x361b74,_0x3ecd78,_0x112235){const _0x58f8a7=_0x16d1ef,_0xd319a7=_0x361b74[_0x58f8a7(0x85e)]()['type']<0x2,_0x2962b6=0x14,_0x27fa01=0x30;_0xd319a7&&(this[_0x58f8a7(0x8ad)](_0x58f8a7(0x360),[_0x361b74],_0x27fa01,_0x2962b6),this['push'](_0x58f8a7(0x8b0),_0x361b74,_0x112235,_0x58f8a7(0x2a4),_0x2962b6,!![],'Linear',!![]),this['push'](_0x58f8a7(0x80f),[_0x361b74],_0x58f8a7(0xb21)),this[_0x58f8a7(0x8ad)](_0x58f8a7(0xaa0)));let _0x2a03a9=_0x3ecd78[_0x58f8a7(0x3e8)]()?this[_0x58f8a7(0x9a1)](_0x361b74):0x1;for(let _0x2df3a0=0x0;_0x2df3a0<_0x2a03a9;_0x2df3a0++){_0x3ecd78[_0x58f8a7(0x3e8)]()&&_0x361b74[_0x58f8a7(0x71d)]()&&this[_0x58f8a7(0x8ad)](_0x58f8a7(0x726),_0x361b74,_0x2df3a0),this['wholeActionSet'](_0x361b74,_0x3ecd78,_0x112235);}_0x3ecd78[_0x58f8a7(0x3e8)]()&&_0x361b74['isActor']()&&this[_0x58f8a7(0x8ad)](_0x58f8a7(0x61d),_0x361b74);this['push'](_0x58f8a7(0x1fc),_0x361b74,_0x112235,![]);if(_0xd319a7){const _0x5d2e14=_0x361b74[_0x58f8a7(0xb02)]();this['push'](_0x58f8a7(0x360),[_0x361b74],_0x27fa01,_0x2962b6),this['push'](_0x58f8a7(0x769),_0x361b74,_0x5d2e14[_0x58f8a7(0x953)],_0x5d2e14['_homeY'],_0x2962b6,![],_0x58f8a7(0x56c)),this[_0x58f8a7(0x8ad)](_0x58f8a7(0x80f),[_0x361b74],'evade'),this[_0x58f8a7(0x8ad)](_0x58f8a7(0xaa0)),this['push'](_0x58f8a7(0x80f),[_0x361b74],_0x58f8a7(0xb21));}},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x619)]=function(_0x329659,_0x37aaab,_0x68606c){const _0x42b872=_0x16d1ef,_0x4929d2=_0x37aaab[_0x42b872(0x74a)]();for(const _0x4947c5 of _0x68606c){if(!_0x4947c5)continue;this[_0x42b872(0x8ad)](_0x42b872(0x27c),_0x329659,_0x37aaab),this[_0x42b872(0x8ad)]('waitCount',Sprite_Battler[_0x42b872(0x267)]),this['push']('showAnimation',_0x329659,[_0x4947c5],_0x4929d2[_0x42b872(0x995)]),this['push'](_0x42b872(0x749),0x18),this[_0x42b872(0x8ad)]('actionEffect',_0x329659,_0x4947c5);}},Window_BattleLog[_0x16d1ef(0xa5b)]['wholeActionSet']=function(_0x1f8185,_0x31eaa5,_0x579176){const _0x4a300a=_0x16d1ef,_0x3052d7=_0x31eaa5[_0x4a300a(0x74a)]();this[_0x4a300a(0x8ad)](_0x4a300a(0x27c),_0x1f8185,_0x31eaa5),this[_0x4a300a(0x8ad)](_0x4a300a(0x749),Sprite_Battler[_0x4a300a(0x267)]),this[_0x4a300a(0x8ad)]('showAnimation',_0x1f8185,_0x579176[_0x4a300a(0xb29)](),_0x3052d7[_0x4a300a(0x995)]),this[_0x4a300a(0x8ad)](_0x4a300a(0x213));for(const _0x6ee391 of _0x579176){if(!_0x6ee391)continue;this['push'](_0x4a300a(0x6db),_0x1f8185,_0x6ee391);}},Window_BattleLog['prototype'][_0x16d1ef(0x762)]=function(_0x34ab07,_0x5c4b69,_0x119574){const _0x3b77a8=_0x16d1ef,_0x2a7e45=_0x5c4b69[_0x3b77a8(0x74a)]();this['push'](_0x3b77a8(0x1fc),_0x34ab07,_0x119574,![]),this[_0x3b77a8(0x8ad)](_0x3b77a8(0xb2b)),this[_0x3b77a8(0x8ad)](_0x3b77a8(0x3c4)),this[_0x3b77a8(0x8ad)](_0x3b77a8(0x721)),this[_0x3b77a8(0x8ad)]('performActionEnd',_0x34ab07),this[_0x3b77a8(0x8ad)](_0x3b77a8(0xaa0));},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x552)]=function(_0x1cb734){},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x1a9)]=Window_BattleLog['prototype'][_0x16d1ef(0x840)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x840)]=function(_0x4dc9e0){const _0x36486d=_0x16d1ef;if(!VisuMZ[_0x36486d(0x8c3)][_0x36486d(0x58d)][_0x36486d(0x591)][_0x36486d(0x54b)])return;VisuMZ[_0x36486d(0x8c3)]['Window_BattleLog_displayCurrentState'][_0x36486d(0x2c7)](this,_0x4dc9e0);},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x1b9)]=function(_0x39dc87){const _0x595202=_0x16d1ef;this[_0x595202(0x8ad)](_0x595202(0x209),_0x39dc87);if(VisuMZ[_0x595202(0x8c3)][_0x595202(0x58d)][_0x595202(0x7ec)][_0x595202(0x8bb)]){if(_0x595202(0x26d)===_0x595202(0xb8d)){const _0x4351d9=[];for(const _0x851c89 of this[_0x595202(0x336)]()[_0x595202(0x9a3)]){const _0x3a9066=_0x68fcc9[_0x851c89[_0x595202(0x3ee)]];if(_0x3a9066&&!_0x4351d9[_0x595202(0x4f8)](_0x3a9066))_0x4351d9[_0x595202(0x8ad)](_0x3a9066);}return _0x4351d9;}else this[_0x595202(0x8ad)]('showAnimation',_0x39dc87,[BattleManager[_0x595202(0x515)]],-0x1);}if(!VisuMZ['BattleCore']['Settings'][_0x595202(0x591)][_0x595202(0x318)])return;this[_0x595202(0x8ad)](_0x595202(0x3fb),TextManager[_0x595202(0x6e1)][_0x595202(0x86a)](_0x39dc87['name']()));},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x65d)]=function(_0x487176){const _0x4bd631=_0x16d1ef;this[_0x4bd631(0x8ad)](_0x4bd631(0x485),_0x487176);if(!VisuMZ[_0x4bd631(0x8c3)][_0x4bd631(0x58d)][_0x4bd631(0x591)][_0x4bd631(0x3f5)])return;this[_0x4bd631(0x8ad)](_0x4bd631(0x3fb),TextManager[_0x4bd631(0x6cf)][_0x4bd631(0x86a)](_0x487176['name']()));},Window_BattleLog[_0x16d1ef(0xa5b)]['displayReflectionPlayBack']=function(_0x7ccae1,_0xa6e66d){const _0x31eea7=_0x16d1ef;if(VisuMZ[_0x31eea7(0x8c3)]['Settings'][_0x31eea7(0x7ec)]['ReflectPlayback']){const _0x546190=_0xa6e66d[_0x31eea7(0x74a)]();this[_0x31eea7(0x8ad)](_0x31eea7(0x8cf),_0x7ccae1,[_0x7ccae1],_0x546190['animationId']);}},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x924)]=function(_0x505e6c,_0x5cccf4){const _0x1e0c4e=_0x16d1ef;this[_0x1e0c4e(0x8ad)](_0x1e0c4e(0x54d),_0x505e6c,_0x5cccf4);if(!VisuMZ[_0x1e0c4e(0x8c3)]['Settings']['BattleLog'][_0x1e0c4e(0x3d7)])return;const _0x13d0e3=_0x505e6c[_0x1e0c4e(0x8c4)](),_0x18113d=TextManager[_0x1e0c4e(0x9b1)][_0x1e0c4e(0x86a)](_0x13d0e3,_0x5cccf4[_0x1e0c4e(0x8c4)]());this[_0x1e0c4e(0x8ad)]('addText',_0x18113d);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x4e7)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x5d0)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x5d0)]=function(_0x23b6d5,_0xc1fa8){const _0x532902=_0x16d1ef;VisuMZ[_0x532902(0x8c3)][_0x532902(0x4e7)][_0x532902(0x2c7)](this,_0x23b6d5,_0xc1fa8),this['push']('clear');},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x62b)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x8ee)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x8ee)]=function(_0x60471a){const _0x522adc=_0x16d1ef;if(!VisuMZ['BattleCore'][_0x522adc(0x58d)][_0x522adc(0x591)]['ShowFailure'])return;VisuMZ[_0x522adc(0x8c3)][_0x522adc(0x62b)][_0x522adc(0x2c7)](this,_0x60471a);},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x90a)]=Window_BattleLog[_0x16d1ef(0xa5b)]['displayCritical'],Window_BattleLog['prototype'][_0x16d1ef(0x7c6)]=function(_0x5b894c){const _0x341e8d=_0x16d1ef;if(!VisuMZ['BattleCore']['Settings'][_0x341e8d(0x591)][_0x341e8d(0x824)])return;VisuMZ[_0x341e8d(0x8c3)][_0x341e8d(0x90a)][_0x341e8d(0x2c7)](this,_0x5b894c);},VisuMZ['BattleCore'][_0x16d1ef(0xb44)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0xac4)],Window_BattleLog[_0x16d1ef(0xa5b)]['displayMiss']=function(_0x1011fd){const _0x387c6b=_0x16d1ef;!VisuMZ[_0x387c6b(0x8c3)]['Settings']['BattleLog'][_0x387c6b(0x6e4)]?_0x387c6b(0x34b)===_0x387c6b(0x32e)?_0x55ab36[_0x387c6b(0x708)]([this],_0x362dbb):this[_0x387c6b(0x8ad)](_0x387c6b(0xbaa),_0x1011fd):VisuMZ[_0x387c6b(0x8c3)][_0x387c6b(0xb44)][_0x387c6b(0x2c7)](this,_0x1011fd);},VisuMZ[_0x16d1ef(0x8c3)]['Window_BattleLog_displayEvasion']=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x164)],Window_BattleLog[_0x16d1ef(0xa5b)]['displayEvasion']=function(_0x3fbce6){const _0x58e87d=_0x16d1ef;!VisuMZ[_0x58e87d(0x8c3)][_0x58e87d(0x58d)][_0x58e87d(0x591)]['ShowMissEvasion']?_0x3fbce6['result']()[_0x58e87d(0x4b2)]?this[_0x58e87d(0x8ad)]('performEvasion',_0x3fbce6):this[_0x58e87d(0x8ad)]('performMagicEvasion',_0x3fbce6):VisuMZ[_0x58e87d(0x8c3)]['Window_BattleLog_displayEvasion']['call'](this,_0x3fbce6);},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x798)]=function(_0x27a75c){const _0x45b2a2=_0x16d1ef;if(_0x27a75c['result']()[_0x45b2a2(0x827)]){_0x27a75c[_0x45b2a2(0x8cd)]()[_0x45b2a2(0x5a4)]>0x0&&!_0x27a75c[_0x45b2a2(0x8cd)]()['drain']&&this[_0x45b2a2(0x8ad)](_0x45b2a2(0x3e9),_0x27a75c);_0x27a75c[_0x45b2a2(0x8cd)]()[_0x45b2a2(0x5a4)]<0x0&&this['push'](_0x45b2a2(0x253),_0x27a75c);if(VisuMZ['BattleCore'][_0x45b2a2(0x58d)][_0x45b2a2(0x591)][_0x45b2a2(0x9ab)]){if('KGUdk'==='aihTM')return this[_0x45b2a2(0x9aa)]()[_0x45b2a2(0xba9)](_0x505d91=>_0x505d91[_0x45b2a2(0x294)]());else this[_0x45b2a2(0x8ad)](_0x45b2a2(0x3fb),this[_0x45b2a2(0x2d6)](_0x27a75c));}}},VisuMZ[_0x16d1ef(0x8c3)]['Window_BattleLog_displayMpDamage']=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x575)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x575)]=function(_0x129bba){const _0x1380cb=_0x16d1ef;if(!VisuMZ['BattleCore'][_0x1380cb(0x58d)][_0x1380cb(0x591)][_0x1380cb(0x68d)])return;VisuMZ['BattleCore']['Window_BattleLog_displayMpDamage'][_0x1380cb(0x2c7)](this,_0x129bba);},VisuMZ[_0x16d1ef(0x8c3)]['Window_BattleLog_displayTpDamage']=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x71e)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x71e)]=function(_0x32df3d){const _0x2ab846=_0x16d1ef;if(!VisuMZ[_0x2ab846(0x8c3)][_0x2ab846(0x58d)][_0x2ab846(0x591)][_0x2ab846(0xa23)])return;VisuMZ[_0x2ab846(0x8c3)][_0x2ab846(0x364)]['call'](this,_0x32df3d);},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x53f)]=function(_0x3817e0){const _0x9f5c26=_0x16d1ef;_0x3817e0[_0x9f5c26(0x8cd)]()[_0x9f5c26(0xb41)]()&&(_0x9f5c26(0x3ab)!==_0x9f5c26(0x3ab)?_0x430907[_0x9f5c26(0x8c3)][_0x9f5c26(0x392)][_0x9f5c26(0x2c7)](this):(this[_0x9f5c26(0x8ad)](_0x9f5c26(0x891)),this['displayChangedStates'](_0x3817e0),this[_0x9f5c26(0x672)](_0x3817e0),this[_0x9f5c26(0x8ad)]('waitForNewLine')));},Window_BattleLog[_0x16d1ef(0xa5b)]['displayAddedStates']=function(_0x228428){const _0x3a2f0d=_0x16d1ef,_0x580c40=_0x228428[_0x3a2f0d(0x8cd)](),_0x479896=_0x580c40[_0x3a2f0d(0x7ff)]();for(const _0x1611f6 of _0x479896){const _0xf96d4=_0x228428[_0x3a2f0d(0x71d)]()?_0x1611f6[_0x3a2f0d(0x615)]:_0x1611f6[_0x3a2f0d(0x6de)];if(_0xf96d4&&VisuMZ[_0x3a2f0d(0x8c3)][_0x3a2f0d(0x58d)]['BattleLog']['ShowAddedState']){if(_0x3a2f0d(0x5bd)!==_0x3a2f0d(0x5bd))return this[_0x3a2f0d(0x7a7)]();else this[_0x3a2f0d(0x8ad)]('fnordAddedStates'),this[_0x3a2f0d(0x8ad)](_0x3a2f0d(0x1c4)),this[_0x3a2f0d(0x8ad)](_0x3a2f0d(0x891)),this['push'](_0x3a2f0d(0x3fb),_0xf96d4['format'](_0x228428['name']())),this[_0x3a2f0d(0x8ad)]('wait');}_0x1611f6['id']===_0x228428['deathStateId']()&&this[_0x3a2f0d(0x8ad)](_0x3a2f0d(0x6e8),_0x228428);}},Window_BattleLog['prototype'][_0x16d1ef(0x627)]=function(){},Window_BattleLog[_0x16d1ef(0xa5b)]['displayRemovedStates']=function(_0x2f59fa){const _0xafe22c=_0x16d1ef;if(!VisuMZ[_0xafe22c(0x8c3)][_0xafe22c(0x58d)][_0xafe22c(0x591)][_0xafe22c(0x9e2)])return;const _0x35ae2f=_0x2f59fa[_0xafe22c(0x8cd)](),_0x322a1c=_0x35ae2f[_0xafe22c(0x4d4)]();for(const _0x4e8a1c of _0x322a1c){if(_0xafe22c(0x974)!=='eiHnR'){this[_0xafe22c(0x7d5)]=_0xd86182[_0xafe22c(0x7d5)],this[_0xafe22c(0x842)]=_0x46462e[_0xafe22c(0x842)];const _0x6f2e60=_0x544089[_0xafe22c(0x26b)](0x1,this['width']/this[_0xafe22c(0xb74)][_0xafe22c(0x7d5)]),_0xa0810d=_0x13b6d9[_0xafe22c(0x26b)](0x1,this[_0xafe22c(0x842)]/this[_0xafe22c(0xb74)][_0xafe22c(0x842)]),_0x19bee7=_0x4f0cec[_0xafe22c(0x26b)](_0x6f2e60,_0xa0810d);this[_0xafe22c(0x9fa)]['x']=_0x19bee7,this[_0xafe22c(0x9fa)]['y']=_0x19bee7,this['x']=(_0x3e6cd5[_0xafe22c(0x7d5)]-this['width'])/0x2,this['y']=_0xb6a0f4[_0xafe22c(0x842)]-this[_0xafe22c(0x842)];}else _0x4e8a1c[_0xafe22c(0x73f)]&&(this[_0xafe22c(0x8ad)](_0xafe22c(0x4ba)),this[_0xafe22c(0x8ad)]('popBaseLine'),this[_0xafe22c(0x8ad)](_0xafe22c(0x891)),this['push'](_0xafe22c(0x3fb),_0x4e8a1c[_0xafe22c(0x73f)]['format'](_0x2f59fa[_0xafe22c(0x8c4)]())),this['push'](_0xafe22c(0xbc7)));}},Window_BattleLog['prototype'][_0x16d1ef(0x4ba)]=function(){},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x672)]=function(_0x1ce89a){const _0x38bb36=_0x16d1ef,_0x38cdb8=VisuMZ[_0x38bb36(0x8c3)][_0x38bb36(0x58d)]['BattleLog'],_0x5c8ceb=_0x1ce89a[_0x38bb36(0x8cd)]();if(_0x38cdb8['ShowAddedBuff'])this[_0x38bb36(0x6fd)](_0x1ce89a,_0x5c8ceb[_0x38bb36(0xaf9)],TextManager['buffAdd']);if(_0x38cdb8['ShowAddedDebuff'])this['displayBuffs'](_0x1ce89a,_0x5c8ceb[_0x38bb36(0x414)],TextManager[_0x38bb36(0x80a)]);if(_0x38cdb8[_0x38bb36(0x2c8)])this['displayBuffs'](_0x1ce89a,_0x5c8ceb['removedBuffs'],TextManager[_0x38bb36(0x9e4)]);},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x6fd)]=function(_0x8419d7,_0x48caa8,_0xd7b299){const _0x1f5d57=_0x16d1ef;for(const _0x4ad51a of _0x48caa8){if(_0x1f5d57(0x7ce)===_0x1f5d57(0x7ce)){const _0x308c6a=_0xd7b299['format'](_0x8419d7[_0x1f5d57(0x8c4)](),TextManager[_0x1f5d57(0x8b7)](_0x4ad51a));this[_0x1f5d57(0x8ad)](_0x1f5d57(0x1c4)),this[_0x1f5d57(0x8ad)](_0x1f5d57(0x891)),this['push']('addText',_0x308c6a),this[_0x1f5d57(0x8ad)](_0x1f5d57(0xbc7));}else _0x121216[_0x1f5d57(0x8c3)]['Game_Battler_forceAction'][_0x1f5d57(0x2c7)](this,_0x19c3f1,_0x4c8c2c),this['_actions'][this['_actions'][_0x1f5d57(0xa40)]-0x1]['_forceAction']=!![];}},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x61f)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x721)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x721)]=function(){const _0xec4e2f=_0x16d1ef;VisuMZ[_0xec4e2f(0x8c3)][_0xec4e2f(0x61f)][_0xec4e2f(0x2c7)](this),this[_0xec4e2f(0xaf2)]();},VisuMZ['BattleCore']['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x891)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x891)]=function(){const _0x3a29b1=_0x16d1ef;VisuMZ[_0x3a29b1(0x8c3)][_0x3a29b1(0x63f)][_0x3a29b1(0x2c7)](this),this[_0x3a29b1(0xaf2)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xb68)]=Window_BattleLog[_0x16d1ef(0xa5b)]['popBaseLine'],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x1c4)]=function(){const _0x22cffa=_0x16d1ef;VisuMZ['BattleCore']['Window_BattleLog_popBaseLine'][_0x22cffa(0x2c7)](this),this[_0x22cffa(0x74e)](),this['callNextMethod']();},VisuMZ[_0x16d1ef(0x8c3)]['Window_BattleLog_popupDamage']=Window_BattleLog['prototype'][_0x16d1ef(0xac6)],Window_BattleLog[_0x16d1ef(0xa5b)]['popupDamage']=function(_0x2326df){const _0xd41612=_0x16d1ef;VisuMZ[_0xd41612(0x8c3)][_0xd41612(0xb1a)][_0xd41612(0x2c7)](this,_0x2326df),this['callNextMethod']();},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0xb2b)]=function(){const _0x2bf618=_0x16d1ef;let _0x16a07e=0x0;this[_0x2bf618(0x635)][_0x2bf618(0xa40)]>0x0&&(_0x16a07e=this[_0x2bf618(0x635)][this['_baseLineStack']['length']-0x1]);if(this[_0x2bf618(0x8fb)][_0x2bf618(0xa40)]>_0x16a07e)_0x2bf618(0xa32)===_0x2bf618(0xa62)?_0xa1c895+=(_0x392cb5['isEnemy']()?-0x1:0x1)*_0x5a89b6[_0x2bf618(0x753)]()/0x2:this[_0x2bf618(0xbc7)]();else{if('jPVCK'!=='AlYFe')this[_0x2bf618(0xaf2)]();else return![];}},VisuMZ['BattleCore']['Window_BattleLog_performActionStart']=Window_BattleLog['prototype']['performActionStart'],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x75a)]=function(_0x46c339,_0x1d6eb3){const _0x344fa3=_0x16d1ef;VisuMZ['BattleCore'][_0x344fa3(0x6a2)][_0x344fa3(0x2c7)](this,_0x46c339,_0x1d6eb3),this[_0x344fa3(0xaf2)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x375)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x27c)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x27c)]=function(_0x1cc410,_0x38c771){const _0x5a7113=_0x16d1ef;VisuMZ[_0x5a7113(0x8c3)][_0x5a7113(0x375)][_0x5a7113(0x2c7)](this,_0x1cc410,_0x38c771),this[_0x5a7113(0xaf2)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xa00)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x598)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x598)]=function(_0x5a19c6){const _0x5123d7=_0x16d1ef;VisuMZ['BattleCore'][_0x5123d7(0xa00)][_0x5123d7(0x2c7)](this,_0x5a19c6);for(const _0x552f35 of BattleManager[_0x5123d7(0x174)]()){if(!_0x552f35)continue;if(_0x552f35[_0x5123d7(0x8ae)]())continue;_0x552f35[_0x5123d7(0xac8)]();}this[_0x5123d7(0xaf2)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0xb4f)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x3e9)],Window_BattleLog['prototype'][_0x16d1ef(0x3e9)]=function(_0x44538c){const _0x2cc170=_0x16d1ef;VisuMZ[_0x2cc170(0x8c3)][_0x2cc170(0xb4f)]['call'](this,_0x44538c),this[_0x2cc170(0xaf2)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x81d)]=Window_BattleLog['prototype'][_0x16d1ef(0xbaa)],Window_BattleLog[_0x16d1ef(0xa5b)]['performMiss']=function(_0x4223b7){const _0x1b765d=_0x16d1ef;VisuMZ[_0x1b765d(0x8c3)][_0x1b765d(0x81d)][_0x1b765d(0x2c7)](this,_0x4223b7),this[_0x1b765d(0xaf2)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x87a)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x253)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x253)]=function(_0x807e26){const _0x1fe415=_0x16d1ef;VisuMZ[_0x1fe415(0x8c3)][_0x1fe415(0x87a)][_0x1fe415(0x2c7)](this,_0x807e26),this[_0x1fe415(0xaf2)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x907)]=Window_BattleLog['prototype']['performEvasion'],Window_BattleLog['prototype']['performEvasion']=function(_0x11ff6a){const _0x1586f8=_0x16d1ef;VisuMZ[_0x1586f8(0x8c3)][_0x1586f8(0x907)][_0x1586f8(0x2c7)](this,_0x11ff6a),this[_0x1586f8(0xaf2)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x21f)]=Window_BattleLog['prototype'][_0x16d1ef(0x6b5)],Window_BattleLog[_0x16d1ef(0xa5b)]['performMagicEvasion']=function(_0x542274){const _0x15f9b2=_0x16d1ef;VisuMZ['BattleCore'][_0x15f9b2(0x21f)]['call'](this,_0x542274),this[_0x15f9b2(0xaf2)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x145)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x209)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x209)]=function(_0x53b1c6){const _0x2500b6=_0x16d1ef;VisuMZ[_0x2500b6(0x8c3)][_0x2500b6(0x145)]['call'](this,_0x53b1c6),this[_0x2500b6(0xaf2)]();},VisuMZ['BattleCore'][_0x16d1ef(0x944)]=Window_BattleLog['prototype'][_0x16d1ef(0x485)],Window_BattleLog['prototype'][_0x16d1ef(0x485)]=function(_0x117d80){const _0x4e48bd=_0x16d1ef;VisuMZ['BattleCore']['Window_BattleLog_performReflection'][_0x4e48bd(0x2c7)](this,_0x117d80),this[_0x4e48bd(0xaf2)]();},VisuMZ['BattleCore'][_0x16d1ef(0x94d)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x54d)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x54d)]=function(_0x9854c1,_0x33c55f){const _0x3cca11=_0x16d1ef;VisuMZ['BattleCore'][_0x3cca11(0x94d)][_0x3cca11(0x2c7)](this,_0x9854c1,_0x33c55f),this[_0x3cca11(0xaf2)]();},VisuMZ[_0x16d1ef(0x8c3)][_0x16d1ef(0x2fe)]=Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x6e8)],Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x6e8)]=function(_0x1169c5){const _0x16b791=_0x16d1ef;VisuMZ['BattleCore']['Window_BattleLog_performCollapse'][_0x16b791(0x2c7)](this,_0x1169c5),this['callNextMethod']();},Window_BattleLog['prototype']['performCastAnimation']=function(_0x2808e7,_0x226834){const _0x94dc20=_0x16d1ef;_0x2808e7[_0x94dc20(0x36f)](_0x226834),this['callNextMethod']();},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0xb9f)]=function(_0xe5f33e,_0x346522){const _0x59e4a0=_0x16d1ef,_0x32393b=_0xe5f33e[_0x59e4a0(0x595)]();_0x32393b<=0x0?SoundManager['playEnemyAttack']():_0x59e4a0(0x71b)===_0x59e4a0(0x71b)?this[_0x59e4a0(0x205)](_0x346522,_0x32393b):(this[_0x59e4a0(0x953)]=this[_0x59e4a0(0x592)](this[_0x59e4a0(0x953)],this[_0x59e4a0(0x344)],_0x1305ee,_0x5c5c34,_0x421015),this[_0x59e4a0(0x9ea)]=this[_0x59e4a0(0x592)](this['_homeY'],this[_0x59e4a0(0xb78)],_0x53fdd1,_0x21dd05,_0x237868));},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x1fc)]=function(_0x1b2486,_0x5af35d,_0x41b1d0){const _0x4616dd=_0x16d1ef,_0x5fe8f3=[_0x1b2486][_0x4616dd(0x468)](_0x5af35d);for(const _0x3b41f3 of _0x5fe8f3){if('HuLjn'!==_0x4616dd(0x322))this[_0x4616dd(0xb74)][_0x4616dd(0x185)]=_0x37d8c6['BattleCore'][_0x4616dd(0x58d)][_0x4616dd(0x65f)]['SmoothImage'];else{if(!_0x3b41f3)continue;_0x3b41f3[_0x4616dd(0x29d)](_0x41b1d0);}}this['callNextMethod']();},Window_BattleLog[_0x16d1ef(0xa5b)]['waitCount']=function(_0x38f5e1){const _0x3ac6fe=_0x16d1ef;this[_0x3ac6fe(0x478)]=_0x38f5e1;},Window_BattleLog[_0x16d1ef(0xa5b)]['requestMotion']=function(_0x8bc152,_0x3933b7){const _0x1e449c=_0x16d1ef;for(const _0x4b9183 of _0x8bc152){if(_0x1e449c(0x249)!=='EgYkg')for(const _0x1de9e4 of _0x485cce){const _0x418b5e=_0x4dfd87[_0x1e449c(0x86a)](_0x366d22['name'](),_0x14799e['param'](_0x1de9e4));this[_0x1e449c(0x8ad)](_0x1e449c(0x1c4)),this[_0x1e449c(0x8ad)](_0x1e449c(0x891)),this[_0x1e449c(0x8ad)]('addText',_0x418b5e),this[_0x1e449c(0x8ad)](_0x1e449c(0xbc7));}else{if(!_0x4b9183)continue;_0x4b9183['requestMotion'](_0x3933b7);}}this[_0x1e449c(0xaf2)]();},Window_BattleLog[_0x16d1ef(0xa5b)]['performMoveToPoint']=function(_0x482b35,_0x56de98,_0x6b8272,_0x1707c6,_0x1f4350,_0x63c1a6){const _0x2212ca=_0x16d1ef;_0x482b35[_0x2212ca(0x1a4)](_0x56de98,_0x6b8272,_0x1707c6,_0x1f4350,_0x63c1a6,-0x1),this[_0x2212ca(0xaf2)]();},Window_BattleLog[_0x16d1ef(0xa5b)][_0x16d1ef(0x8b0)]=function(_0x45e06e,_0x40f83e,_0x505822,_0x2854ad,_0x312375,_0x171e75,_0x26b329){const _0x376cca=_0x16d1ef,_0x52da5b=Math[_0x376cca(0x457)](..._0x40f83e['map'](_0x15be26=>_0x15be26[_0x376cca(0xb02)]()[_0x376cca(0x37a)]-_0x15be26[_0x376cca(0xb02)]()[_0x376cca(0x753)]()/0x2)),_0x36ed6a=Math[_0x376cca(0x26b)](..._0x40f83e[_0x376cca(0x526)](_0x1f4200=>_0x1f4200[_0x376cca(0xb02)]()[_0x376cca(0x37a)]+_0x1f4200[_0x376cca(0xb02)]()[_0x376cca(0x753)]()/0x2)),_0x2d55f5=Math[_0x376cca(0x457)](..._0x40f83e['map'](_0x37b7a1=>_0x37b7a1['battler']()[_0x376cca(0xb72)]-_0x37b7a1['battler']()['mainSpriteHeight']())),_0x1909f2=Math[_0x376cca(0x26b)](..._0x40f83e[_0x376cca(0x526)](_0x3f89b8=>_0x3f89b8[_0x376cca(0xb02)]()['_baseY'])),_0x37d0ce=_0x40f83e[_0x376cca(0x787)](_0x27af17=>_0x27af17['isActor']())['length'],_0xc3f4c5=_0x40f83e[_0x376cca(0x787)](_0x1c7705=>_0x1c7705[_0x376cca(0x8fc)]())[_0x376cca(0xa40)];let _0x1f77e8=0x0,_0x41ab76=0x0;if(_0x505822['match'](/front/i))_0x1f77e8=_0x37d0ce>=_0xc3f4c5?_0x52da5b:_0x36ed6a;else{if(_0x505822[_0x376cca(0xaf1)](/middle/i))_0x1f77e8=(_0x52da5b+_0x36ed6a)/0x2,_0x26b329=-0x1;else _0x505822[_0x376cca(0xaf1)](/back/i)&&(_0x1f77e8=_0x37d0ce>=_0xc3f4c5?_0x36ed6a:_0x52da5b);}if(_0x505822[_0x376cca(0xaf1)](/head/i)){if(_0x376cca(0x729)===_0x376cca(0x729))_0x41ab76=_0x2d55f5;else{if(!_0x2d79de[_0x376cca(0x9b2)](_0x34ee9e))return this[_0x376cca(0x85f)](_0x5b6933);_0x4cc2ca[_0x376cca(0x8c3)]['SceneManager_push'][_0x376cca(0x2c7)](this,_0x3dbb2a);}}else{if(_0x505822[_0x376cca(0xaf1)](/center/i))_0x41ab76=(_0x2d55f5+_0x1909f2)/0x2;else _0x505822['match'](/base/i)&&(_0x41ab76=_0x1909f2);}_0x45e06e[_0x376cca(0x1a4)](_0x1f77e8,_0x41ab76,_0x2854ad,_0x312375,_0x171e75,_0x26b329),this[_0x376cca(0xaf2)]();},Window_BattleLog['prototype']['performJump']=function(_0x594390,_0x74774b,_0x2e6c32){const _0x1bdfc8=_0x16d1ef;for(const _0x1eb2bf of _0x594390){if(_0x1bdfc8(0x5a8)==='ZijNi')_0x275f17=(_0x209155+_0x2a06ce)/0x2,_0x5872a6=-0x1;else{if(!_0x1eb2bf)continue;_0x1eb2bf[_0x1bdfc8(0xa95)](_0x74774b,_0x2e6c32);}}this[_0x1bdfc8(0xaf2)]();};